<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VintagestoryAPI</name>
    </assembly>
    <members>
        <member name="T:Vintagestory.API.IAmbientManager">
            <summary>
            This is the system that manages the worlds ambient settings, such as fog color/density and clouds.
            The ambient manager basically blends ambientmodifiers on top of each other to generate the final ambient values.
            Blending is in order how the modifiers are held in CurrentModifiers in the likes of
            float weight = modifier.FogMin.Weight;
            BlendedFogMin = w * modifier.FogMin.Value + (1 - w) * BlendedFogMin;
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.Base">
            <summary>
            The base value or background ambient to overlay everything onto
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.CurrentModifiers">
            <summary>
            The list of modifiers that result in the blended values
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedFogDensity">
            <summary>
            The blended fog density, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedFogMin">
            <summary>
            The blended fog min, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedCloudBrightness">
            <summary>
            The blended cloud brightness, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedLargeCloudDensity">
            <summary>
            The blended large cloud density, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedSmallCloudDensity">
            <summary>
            The blended small cloud density, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IItemTextureAtlasAPI.GetPosition(Vintagestory.API.Common.Item,System.String)">
            <summary>
            Returns the position in the item texture atlas of given item. For items that don't use custom shapes you don't have to supply the textureName
            </summary>
            <param name="item"></param>
            <param name="textureName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IBlockTextureAtlasAPI.GetPosition(Vintagestory.API.Common.Block,System.String)">
            <summary>
            Returns the position in the block texture atlas of given block. 
            </summary>
            <param name="block"></param>
            <param name="textureName"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Client.ITextureAtlasAPI.Size">
            <summary>
            Size of one block texture atlas
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ITextureAtlasAPI.SubPixelPadding">
            <summary>
            As configured in the clientsettings.json divided by the texture atlas size
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ITextureAtlasAPI.Positions">
            <summary>
            Returns the default texture atlas position for all blocks, referenced  by the texturesubid
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ITextureAtlasAPI.AllocateTextureSpace(System.Int32,System.Int32,System.Int32@,Vintagestory.API.Client.TextureAtlasPosition@)">
            <summary>
            Reserves a spot on the texture atlas. Returns true if allocation was successful.
            Can be used to render onto it through the Render API
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="textureSubId"></param>
            <param name="texPos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITextureAtlasAPI.FreeTextureSpace(System.Int32)">
            <summary>
            Deallocates a previously allocated texture space
            </summary>
            <param name="textureSubId"></param>
        </member>
        <member name="T:Vintagestory.API.Client.ClientSettingsApi">
            <summary>
            Sort of like an api accessor to the actual client settings, these values are set by the Client.
            This is a little bit of a hack, yes
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotkeyType.GeneralControls">
            <summary>
            Controls that are always available
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotkeyType.CharacterControls">
            <summary>
            Controls that control the players character. Only triggered when the player not currently inside a dialog.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotkeyType.CreativeTool">
            <summary>
            Controls that are only available in creative mode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotkeyType.CreativeOrSpectatorTool">
            <summary>
            Controls that are only available in creative or spectator mode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotkeyType.DevTool">
            <summary>
            Developer tools
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotKey.IsGlobalHotkey">
            <summary>
            For global hotkeys that shall not be blocked by anything (e.g. F11 for fullscreen, F12 for screenshot)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotKey.IsIngameHotkey">
            <summary>
            For hotkeys that only available during a game session. When the game session ends, the handler to this hotkey is removed (or we have a dead reference to runninggame)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotKey.CurrentMapping">
            <summary>
            The current key combination for this hotkey
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotKey.DefaultMapping">
            <summary>
            The default key combination for this hotkey
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.KeyCombination">
            <summary>
            Mapping of a key combination
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.MeshDataPool">
            <summary>
            This is a modeldata pool, which can hold 400k vertices, 300k indices but not more than 900 chunks
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.MeshDataPoolManager">
            <summary>
            Holds a collection of pools, usually for 1 render pass 
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.MeshDataPoolMasterManager">
            <summary>
            Holds all chunk mesh pools of the current running game
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.FrustumCulling.CalcFrustumEquations(Vintagestory.API.MathTools.BlockPos,System.Single[])">
            <summary>
            Calculating the frustum planes.
            </summary>
            <remarks>
            From the current OpenGL modelview and projection matrices,
            calculate the frustum plane equations (Ax+By+Cz+D=0, n=(A,B,C))
            The equations can then be used to see on which side points are.
            </remarks>
        </member>
        <member name="F:Vintagestory.API.Client.ElementSizing.Fixed">
            <summary>
            Only multiplied with scale factor
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ElementSizing.Percentual">
            <summary>
            Value between 0 and 100% of parent element 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ElementSizing.FitToChildren">
            <summary>
            Size determined by child elements 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ElementSizing.PercentualSubstractFixed">
            <summary>
            Value between 0 and 100% of parent element. Will substract fixedWidth and fixedHeight from the final size
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.JsonDialogSettings.OnSet">
            <summary>
            Called whenever the value of a input field has changed
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.JsonDialogSettings.OnGet">
            <summary>
            Called when the dialog is opened the first time or when dialog.ReloadValues() is called. Should return the values the input fields should be set to
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.DialogElement.Param">
            <summary>
            To hold generic data
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.ElementAlignment">
            <summary>
            First word = X Alignment (left, center, right or fixed)
            Second word = Y Alignment (top, middle, bottom or fixed)
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.IClientEventAPI">
            <summary>
            Contains some client specific events you can hook into
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.OnChatMessage">
            <summary>
            Called when a chat message was received
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.PlayerSpawn">
            <summary>
            Called when a player joins
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.PlayerDespawn">
            <summary>
            Called whenever a player disconnects (timeout, leave, disconnect, kick, etc.). 
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.PauseResume">
            <summary>
            When the game was paused/resumed (only in single player)
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.LeaveWorld">
            <summary>
            When the player leaves the world to go back to the main menu
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IClientEventAPI.RegisterRenderer(Vintagestory.API.Client.IRenderer,Vintagestory.API.Client.EnumRenderStage)">
            <summary>
            Registers a rendering handler to be called during every render frame
            </summary>
            <param name="renderer"></param>
            <param name="renderStage"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientEventAPI.UnregisterRenderer(Vintagestory.API.Client.IRenderer,Vintagestory.API.Client.EnumRenderStage)">
            <summary>
            Removes a previously registered rendering handler.
            </summary>
            <param name="renderer"></param>
            <param name="renderStage"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientEventAPI.BlockTexturesLoaded(Vintagestory.API.Common.Action)">
            <summary>
            Called when server assetes were received and all texture atlases have been created
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientEventAPI.RegisterReloadShapes(Vintagestory.API.Common.Action)">
            <summary>
            Called when the player tries to reload the shapes folder
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientEventAPI.UnregisterReloadShapes(Vintagestory.API.Common.Action)">
            <summary>
            Removes a previously register reload handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientEventAPI.RegisterReloadShaders(Vintagestory.API.Common.ActionBoolReturn)">
            <summary>
            Called when the player tries to reload the shaders (happens when graphics settings are changed)
            </summary>
            <param name="loadShader"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientEventAPI.UnregisterReloadShaders(Vintagestory.API.Common.ActionBoolReturn)">
            <summary>
            Removes a previously register reload handler
            </summary>
            <param name="loadShader"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientEventAPI.RegisterOnLeaveWorld(Vintagestory.API.Common.Action)">
            <summary>
            Called when the player leaves the current game world
            </summary>
            <param name="handler"></param>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.OnMouseDown">
            <summary>
            Provides low level access to the mouse down event. If e.Handled is set to true, the event will not be handled by the game
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.OnMouseUp">
            <summary>
            Provides low level access to the mouse up event. If e.Handled is set to true, the event will not be handled by the game
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.OnMouseMove">
            <summary>
            Provides low level access to the mouse move event. If e.Handled is set to true, the event will not be handled by the game
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.OnKeyDown">
            <summary>
            Provides low level access to the key down event. If e.Handled is set to true, the event will not be handled by the game
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.OnKeyUp">
            <summary>
            Provides low level access to the key up event. If e.Handled is set to true, the event will not be handled by the game
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Vintagestory.API.Client.IClientNetworkAPI" -->
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.RegisterChannel(System.String)">
            <summary>   
            Supplies you with your very own and personal network channel with which you can send packets to the server. Use the same channelName on the client and server to have them link up.
            </summary>
            <param name="channelName">Unique channel identifier</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.SendBlockEntityPacket(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Sends a blockentity interaction packet to the server. For quick an easy blockentity network communication without setting up a channel first.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="packetId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.SendArbitraryPacket(System.Byte[])">
            <summary>
            Sends given packet data to the server. This let's you mess with the raw network communication and fiddle with internal engine packets if you know the protocol. For normal network communication you probably want to register your own network channel.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Vintagestory.API.Client.INetworkChannel.ChannelName">
            <summary>
            The channel name this channel was registered with
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.NetworkServerMessageHandler`1">
            <summary>
            Handler for processing a message
            </summary>
            <param name="networkMessage"></param>
        </member>
        <member name="T:Vintagestory.API.Client.IClientNetworkChannel">
            <summary>
            Represent a custom network channel for sending messages between client and server
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkChannel.RegisterMessageType(System.Type)">
            <summary>
            Registers a handler for when you send a packet with given messageId
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkChannel.SetMessageHandler``1(Vintagestory.API.Client.NetworkServerMessageHandler{``0})">
            <summary>
            Registers a handler for when you send a packet with given messageId
            </summary>
            <typeparam name="T"></typeparam>
            <param name="messageHandler"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkChannel.SendPacket``1(``0)">
            <summary>
            Sends a packet to the server
            </summary>
            <param name="message"></param>
            <param name="players"></param>
        </member>
        <member name="T:Vintagestory.API.Client.IClientPlayer">
            <summary>
            A client side player
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientPlayer.CameraYaw">
            <summary>
            The cameras current yaw
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientPlayer.CameraPitch">
            <summary>
            The cameras current pitch
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientPlayer.CameraMode">
            <summary>
            The players current camera mode
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IClientPlayer.ShowChatNotification(System.String)">
            <summary>
            Writes given message to the players current chat group but doesn't send it to the server
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Vintagestory.API.Client.ICoreClientAPI">
            <summary>
            The core api implemented by the client. The main interface for accessing the client. Contains all sub components and some miscellaneous methods.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.ApplyColorTint(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads the rgb (plant or water) tint value at given position and multiplies it byte-wise with supplied color
            </summary>
            <param name="tintIndex"></param>
            <param name="color"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.GetRandomBlockPixel(System.UInt16,System.Int32)">
            <summary>
            Returns you a rgba value picked randomly inside the first texture of given block
            </summary>
            <param name="blockId"></param>
            <param name="textureSubId"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.GetRandomItemPixel(System.Int32,System.Int32)">
            <summary>
            Returns you a rgba value picked randomly inside the first texture of given item
            </summary>
            <param name="itemId"></param>
            <param name="textureSubId"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.IsGamePaused">
            <summary>
            True if the game is currently paused (only available in singleplayer)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.HideGuis">
            <summary>
            If true, the player is in gui-less mode (through the F4 key)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Ambient">
            <summary>
            API Component to control the clients ambient values
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Event">
            <summary>
            API Component for registering to various Events
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Render">
            <summary>
            API for Rendering stuff onto the screen using OpenGL
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.TesselatorManager">
            <summary>
            Holds the default meshes of all blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Tesselator">
            <summary>
            API for Meshing in the Mainthread
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.TesselatorThreadSafe">
            <summary>
            API for Meshing in a background thread. This getter returns you a new, thread safe instance of the tesselator system, so if you have to tesselate a lot, just retrieve it once
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.BlockTextureAtlas">
            <summary>
            API for the Block Texture Atlas
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.ItemTextureAtlas">
            <summary>
            API for the Item Texture Atlas
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.EntityTextureAtlas">
            <summary>
            API for the Entity Texture Atlas
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Shader">
            <summary>
            API for Rendering stuff onto the screen using OpenGL
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Network">
            <summary>
            API for doing sending/receiving network packets
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.World">
            <summary>
            API for accessing anything in the game world
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.RegisterCommand(Vintagestory.API.Common.ClientChatCommand)">
            <summary>
            Registers a chat command
            </summary>
            <param name="chatcommand"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.RegisterCommand(System.String,System.String,System.String,Vintagestory.API.Common.ClientChatCommandDelegate)">
            <summary>
            Registers a chat command
            </summary>
            <param name="command"></param>
            <param name="descriptionMsg"></param>
            <param name="syntaxMsg"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.RegisterEntityRendererClass(System.String,System.Type)">
            <summary>
            Registers an entity renderer for given entity
            </summary>
            <param name="className"></param>
            <param name="rendererType"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.ShowChatNotification(System.String)">
            <summary>
            Shows a client side only chat message in the current chat channel
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.SendMessageToClient(System.String)">
            <summary>
            Shows a message to the client as if the client typed it, but without sending it to the server. This also causes client commands to get executed.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.SendMessageToServer(System.String,System.Int32,System.String)">
            <summary>
            Sends a message to the server
            </summary>
            <param name="message"></param>
            <param name="groupId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.SendMessageToServer(System.String,System.String)">
            <summary>
            Sends a message to the server in the players currently active channel
            </summary>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.MouseWorldInteractAnyway">
            <summary>
            Gives the player the ability to still interact with the world even if a gui dialog is opened
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.RegisterHotKey(System.String,System.String,Vintagestory.API.Client.GlKeys,Vintagestory.API.Client.HotkeyType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Registers a hot key with given default key combination, the player will be able change these in the controls. Supplied hotkeyCode can than be used to register a hotkey handler.
            </summary>
            <param name="hotkeyCode"></param>
            <param name="name"></param>
            <param name="key"></param>
            <param name="type"></param>
            <param name="altPressed"></param>
            <param name="ctrlPressed"></param>
            <param name="shiftPressed"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.SetHotKeyHandler(System.String,Vintagestory.API.Common.ActionConsumable{Vintagestory.API.Client.KeyCombination})">
            <summary>
            Will call the handler if given hotkey has been pressed. Removes the previously assigned handler.
            </summary>
            <param name="hotkeyCode"></param>
            <param name="handler"></param>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.HotKeys">
            <summary>
            Returns a list of all currently registered hotkeys.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.IGuiDialog">
            <summary>
            A reference to a currently opened gui dialog
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IGuiDialog.Attributes">
            <summary>
            Can be used to exchange data with the dialog
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IGuiDialog.OnClosed">
            <summary>
            Called when the dialgo got closed
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiDialog.TryClose">
            <summary>
            Tries to close the dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiDialog.IsOpened">
            <summary>
            Returns true if the dialog is opened
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiDialog.Recompose">
            <summary>
            Rebuilds the dialog graphics
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiDialog.ReloadValues">
            <summary>
            Reloads all field values through the OnGet method
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiDialog.FocusElement(System.Int32)">
            <summary>
            Focuses a focusable gui element at given index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiDialog.UnfocusElements">
            <summary>
            Unfocuses all gui elements
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorManager.GetDefaultBlockMesh(Vintagestory.API.Common.Block)">
            <summary>
            Returns the default block mesh that being used by the engine when tesselating a chunk. The alternate and inventory versions are seperate.
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.ITesselatorAPI">
            <summary>
            Interface that allows custom model model meshing for items, blocks and entities
            Texturing crash course:
            1. Block, Item and Entity textures are loaded from json files in the form of a CompositeTexture instance
            2. After connecting to a game server, the client inserts all of these textures into their type-respective texture atlasses
            3. After insertion a "texture sub-id" is left behind in the CompositeTexture.Baked Property
            4. You can now find the position of the texture inside the atlas through the Block/Item/Entity-TextureAtlasPositions arrays (teturesubid is the array key)
            
            Shape Tesselation crash course:
            1. Block and Item shapes are loaded from json files in the form of a CompositeShape instance
            2. A CompositeShape instance hold some block/item specific information as well as an identifier to a Shape instance
            4. After connecting to a game server, the client loads all shapes from the shape folder then finds each blocks/items shape by its shape identifier 
            5. Result is a MeshData instance that holds all vertices, UV coords, colors and etc. for each block
            6. That meshdata instance is 
               a) Held as-is in memory for using during chunk tesselation (you can get a reference to it through getDefaultBlockMesh())
               b) "Compiled" to a Model for use during rendering in the gui. 
                  Model Compilation means all it's mesh data is uploaded onto the graphcis through a VAO and a ModelRef instance is left behind which
                  can be used by the RenderAPI to render it.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateBlock(Vintagestory.API.Common.Block,Vintagestory.API.Client.MeshData@)">
            <summary>
            Tesselates a block for you using given blocks shape and texture configuration
            </summary>
            <param name="block"></param>
            <param name="modeldata"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateItem(Vintagestory.API.Common.Item,Vintagestory.API.Client.MeshData@)">
            <summary>
            Tesselates an item for you using given items shape and texture configuration
            </summary>
            <param name="item"></param>
            <param name="modeldata"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateItem(Vintagestory.API.Common.Item,Vintagestory.API.Common.CompositeShape,Vintagestory.API.Client.MeshData@)">
            <summary>
            Tesselates an item for you using given items shape and texture configuration
            </summary>
            <param name="item"></param>
            <param name="forShape"></param>
            <param name="modeldata"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateItem(Vintagestory.API.Common.Item,Vintagestory.API.Client.MeshData@,Vintagestory.API.Client.ITexPositionSource)">
            <summary>
            Tesselates an item for you using the items shape and your own defined texture configuration. You need to implement the ITextureSource yourself.
            </summary>
            <param name="item"></param>
            <param name="modeldata"></param>
            <param name="texSource"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateShape(Vintagestory.API.Common.Block,Vintagestory.API.Common.Shape,Vintagestory.API.Client.MeshData@,Vintagestory.API.MathTools.Vec3f,System.Nullable{System.Int32},System.String[])">
            <summary>
            Turns a shape into a mesh data object that you can feed into the chunk tesselator or upload to the graphics card for rendering. Uses the given blocks texture configuration as texture source.
            </summary>
            <param name="textureSourceBlock"></param>
            <param name="shape"></param>
            <param name="modeldata"></param>
            <param name="meshRotationDeg">In degrees</param>
            <param name="quantityElements"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateShape(System.String,Vintagestory.API.Common.Shape,Vintagestory.API.Client.MeshData@,Vintagestory.API.Client.ITexPositionSource,Vintagestory.API.MathTools.Vec3f,System.Int32,System.Int32,System.Nullable{System.Int32},System.String[])">
            <summary>
            Turns a shape into a mesh data object that you can feed into the chunk tesselator or upload to the graphics card for rendering. Can be used to supply a custom texture source. 
            </summary>
            <param name="typeForLogging"></param>
            <param name="shapeBase"></param>
            <param name="modeldata"></param>
            <param name="texSource"></param>
            <param name="meshRotationDeg"></param>
            <param name="generalGlowLevel"></param>
            <param name="generalTintIndex"></param>
            <param name="quantityElements"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateShapeWithJointIds(System.String,Vintagestory.API.Common.Shape,Vintagestory.API.Client.MeshData@,Vintagestory.API.Client.ITexPositionSource,Vintagestory.API.MathTools.Vec3f,System.Nullable{System.Int32},System.String[])">
            <summary>
            Turns a shape into a mesh data object that you can feed into the chunk tesselator or upload to the graphics card for rendering. Can be used to supply a custom texture source. Will add a customints array to the meshdata that holds each elements JointId for all its vertices (you will have to manually set the jointid for each element though)
            </summary>
            <param name="typeForLogging"></param>
            <param name="shapeBase"></param>
            <param name="modeldata"></param>
            <param name="texSource"></param>
            <param name="rotation"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.VoxelizeTexture(Vintagestory.API.Client.CompositeTexture,System.Int32,Vintagestory.API.Client.TextureAtlasPosition)">
            <summary>
            A helper method that turns a flat texture into its 1-voxel thick voxelized form
            </summary>
            <param name="texture"></param>
            <param name="atlasSize"></param>
            <param name="atlasPos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.VoxelizeTexture(System.Int32[],System.Int32,System.Int32,System.Int32,Vintagestory.API.Client.TextureAtlasPosition)">
            <summary>
            A helper method that turns a flat texture into its 1-voxel thick voxelized form
            </summary>
            <param name="texturePixels"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="atlasSize"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.GetTexPositionSource(Vintagestory.API.Common.Block,System.Int32)">
            <summary>
            Returns the texture source from given block. This can be used to obtain the positions of the textures in the block texture atlas.
            </summary>
            <param name="block"></param>
            <param name="altTextureNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.GetTextureSource(Vintagestory.API.Common.Item)">
            <summary>
            Returns the texture source from given item. This can be used to obtain the positions of the textures in the item texture atlas.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.GetTextureSource(Vintagestory.API.Common.Entities.EntityType,System.Int32)">
            <summary>
            Returns the texture source from given entity. This can be used to obtain the positions of the textures in the entity texture atlas.
            </summary>
            <param name="entity"></param>
            <param name="altTextureNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.IRenderAPI">
            <summary>
            The main api component to assist you in rendering pretty stuff onto the screen
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CurrentRenderStage">
            <summary>
            The render stage the engine is currently at
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.PerspectiveViewMat">
            <summary>
            The default view matrix used during perspective rendering. Is refreshed before EnumRenderStage.Opaque. Useful for doing projections in the Ortho stage via MatrixToolsd.Project()
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.PerspectiveProjectionMat">
            <summary>
            The default projection matrix used during perspective rendering. Is refreshed before EnumRenderStage.Opaque. Useful for doing projections in the Ortho stage via MatrixToolsd.Project()
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.FrameWidth">
            <summary>
            Width of the primary render framebuffer
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.FrameHeight">
            <summary>
            Height of the primary render framebuffer
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.MvMatrix">
            <summary>
            The current modelview matrix stack
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.PMatrix">
            <summary>
            The current projection matrix stack
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetItemStackRenderInfo(Vintagestory.API.Common.ItemStack,Vintagestory.API.Client.EnumItemRenderTarget)">
            <summary>
            Returns you a render info object of given item stack. Can be used to render held items onto a creature.
            </summary>
            <param name="itemstack"></param>
            <param name="ground"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlPushMatrix">
            <summary>
            Pushes a copy of the current matrix onto the games matrix stack
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlPopMatrix">
            <summary>
            Pops the top most matrix from the games matrix stack
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlLoadMatrix(System.Double[])">
            <summary>
            Replaces the top most matrix with given one
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlTranslate(System.Single,System.Single,System.Single)">
            <summary>
            Translates top most matrix in the games matrix stack
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlTranslate(System.Double,System.Double,System.Double)">
            <summary>
            Translates top most matrix in the games matrix stack
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlScale(System.Single,System.Single,System.Single)">
            <summary>
            Scales top most matrix in the games matrix stack
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlRotate(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Rotates top most matrix in the games matrix stack
            </summary>
            <param name="angle"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlGenerateTex2DMipmaps">
            <summary>
            Regenerates the mip maps for the currently bound texture
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlToggleBlend(System.Boolean,Vintagestory.API.Client.EnumBlendMode)">
            <summary>
            To enable/disable various blending modes
            </summary>
            <param name="blend"></param>
            <param name="blendMode"></param>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CurrentModelviewMatrix">
            <summary>
            The current top most matrix in the model view matrix stack. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CameraMatrixOrigin">
            <summary>
            Player camera matrix with player positioned at 0,0,0.
            You can use this matrix instead of <see cref="P:Vintagestory.API.Client.IRenderAPI.CurrentModelviewMatrix"/> for high precision rendering.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CameraMatrixOriginf">
            <summary>
            Player camera matrix with player positioned at 0,0,0.
            You can use this matrix instead of <see cref="P:Vintagestory.API.Client.IRenderAPI.CurrentModelviewMatrix"/> for high precision rendering.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CurrentProjectionMatrix">
            <summary>
            The current top most matrix in the projection matrix stack
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CurrentShadowProjectionMatrix">
            <summary>
            The current projection matrix for shadow rendering (renders the scene from the viewpoint of the sun)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GLDeleteTexture(System.Int32)">
            <summary>
            Deletes given texture
            </summary>
            <param name="textureId"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlGetMaxTextureSize">
            <summary>
            Max size a texture can have on the current graphics card
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.BindTexture2d(System.Int32)">
            <summary>
            Binds given texture. For use with shaders - you should assign the texture directly though shader uniforms.
            </summary>
            <param name="textureid"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetOrLoadTexture(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Loads given texture through the assets managers and loads it onto the graphics card. Will return a cached version on every subsequent call to this method. Returns a textureid ready to be used in BindTexture2d
            </summary>
            <param name="assetPath"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetOrLoadTexture(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.BitmapRef)">
            <summary>
            Loads the texture supplied by the bitmap, uploads it to the graphics card and keeps a cached version under given name. Will return that cached version on every subsequent call to this method. Returns a textureid ready to be used in BindTexture2d
            </summary>
            <param name="name"></param>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.DeleteTexture(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Removes given texture from the cache and from graphics card memory
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetUniformLocation(System.Int32,System.String)">
            <summary>
            Gets you the uniform location of given uniform for given shader
            </summary>
            <param name="shaderProgramNumber"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetEngineShader(Vintagestory.API.Client.EnumShaderProgram)">
            <summary>
            Gives you access to all of the vanilla shaders
            </summary>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetShader(System.Int32)">
            <summary>
            Gives you access to all currently registered shaders identified by their number
            </summary>
            <param name="shaderProgramNumber"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.StandardShader">
            <summary>
            Gives you a reference to the "standard" shader, a general purpose shader for normal shading work
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.PreparedStandardShader(System.Int32,System.Int32,System.Int32)">
            <summary>
            Populates the uniforms and light values for given positions and calls shader.Use().
            </summary>
            <param name="posX">The position for light level reading</param>
            <param name="posY">The position for light level reading</param>
            <param name="posZ">The position for light level reading</param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CurrentActiveShader">
            <summary>
            Gives you a reference to the currently active shader, or null if none is active right now
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.AllocateEmptyMesh(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Vintagestory.API.Client.CustomMeshDataPartFloat,Vintagestory.API.Client.CustomMeshDataPartByte,Vintagestory.API.Client.CustomMeshDataPartInt,Vintagestory.API.Client.EnumDrawMode,System.Boolean)">
            <summary>
            Allocates memory on the graphics card. Can use UpdateMesh() to populate it with data. The custom mesh data parts may be null. Sizes are in bytes.
            </summary>
            <param name="xyzSize"></param>
            <param name="normalSize"></param>
            <param name="uvSize"></param>
            <param name="rgbaSize"></param>
            <param name="rgba2Size"></param>
            <param name="flagsSize"></param>
            <param name="indicesSize"></param>
            <param name="customFloats"></param>
            <param name="customBytes"></param>
            <param name="drawMode"></param>
            <param name="staticDraw"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.UploadMesh(Vintagestory.API.Client.MeshData)">
            <summary>
            Will load your mesh into a VAO. VBO locations:
            xyz=0, uv=1, rgba=2, rgba2=3, flags=4, customFloats=5, customInts=6, customBytes=7  (indices do not get their own data location)
            If any of them are null, the vbo location is not consumed and all used location numbers shift by -1
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.UpdateMesh(Vintagestory.API.Client.MeshRef,Vintagestory.API.Client.MeshData)">
            <summary>
            Updates the existing mesh any non null data from updatedata
            </summary>
            <param name="meshRef"></param>
            <param name="updatedata"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.DeleteMesh(Vintagestory.API.Client.MeshRef)">
            <summary>
            Frees up the memory on the graphics card. Should always be called at the end of the lifetime to prevent memory leaks.
            </summary>
            <param name="vao"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderMesh(Vintagestory.API.Client.MeshRef)">
            <summary>
            Renders given mesh onto the screen
            </summary>
            <param name="meshRef"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderMeshInstanced(Vintagestory.API.Client.MeshRef,System.Int32)">
            <summary>
            Uses the graphics instanced rendering methods to efficiently render the same mesh multiple times. Use the custom mesh data parts with instanced flag on to supply custom data to each mesh.
            </summary>
            <param name="meshRef"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderMesh(Vintagestory.API.Client.MeshRef,System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Draws only a part of the mesh
            </summary>
            <param name="meshRef"></param>
            <param name="indicesStarts"></param>
            <param name="indicesSizes"></param>
            <param name="groupCount"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderTextureIntoTexture(Vintagestory.API.Client.LoadedTexture,System.Single,System.Single,System.Single,System.Single,Vintagestory.API.Client.LoadedTexture,System.Single,System.Single,System.Single)">
            <summary>
            Renders given texture into another texture. If you use the resulting texture for in-world rendering, remember to recreate the mipmaps via api.Render.GlGenerateTex2DMipmaps()
            </summary>
            <param name="fromTexture"></param>
            <param name="sourceX"></param>
            <param name="sourceY"></param>
            <param name="sourceWidth"></param>
            <param name="sourceHeight"></param>
            <param name="intoTexture"></param>
            <param name="targetX"></param>
            <param name="targetY"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderItemstackToGui(Vintagestory.API.Common.ItemStack,System.Double,System.Double,System.Double,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Renders given itemstack at given position (gui mode)
            </summary>
            <param name="itemstack"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="shading"></param>
            <param name="rotate"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.Render2DTexture(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Renders given texture onto the screen, uses a simple quad for rendering (gui mode)
            </summary>
            <param name="textureid"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetFont(System.Double,System.String,System.Double[],System.Double[])">
            <summary>
            For use in GenTextTexture
            </summary>
            <param name="unscaledFontSize"></param>
            <param name="fontName"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GenTextTexture(System.String,Vintagestory.API.Client.ICairoFont,Vintagestory.API.Client.TextBackground,Vintagestory.API.Client.EnumTextOrientation)">
            <summary>
            Renders given text onto a texture
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="background"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GenTextTexture(System.String,Vintagestory.API.Client.ICairoFont,System.Int32,System.Int32,Vintagestory.API.Client.TextBackground,Vintagestory.API.Client.EnumTextOrientation,System.Single)">
            <summary>
            Renders given text onto a texture
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="background"></param>
            <param name="lineHeight"></param>W
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GenUnscaledTextTexture(System.String,Vintagestory.API.Client.ICairoFont,Vintagestory.API.Client.TextBackground)">
            <summary>
            Renders given text into a texture, ignoring the current gui scale
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="background"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GenTextTexture(System.String,Vintagestory.API.Client.ICairoFont,System.Int32,Vintagestory.API.Client.TextBackground,Vintagestory.API.Client.EnumTextOrientation)">
            <summary>
            Renders given text into a texture
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="maxWidth"></param>
            <param name="background"></param>
            <param name="orientation"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.AmbientColor">
            <summary>
            The current ambient color (e.g. will return a blue tint when player is under water)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.FogColor">
            <summary>
            The current fog color (e.g. will return a blue tint when player is under water)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.FogMin">
            <summary>
            Current minimum fog value 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.FogDensity">
            <summary>
            Density of the current fog. Fog is calculated as followed in the shaders: clamp(fogMin + 1 - 1 / exp(gl_FragDepth * fogDensity), 0, 1)
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.IRenderer">
            <summary>
            Interface to render something on to the clients screens. Used for block entitites.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderer.RenderOrder">
            <summary>
            0 = drawn first, 1 = drawn last
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderer.RenderRange">
            <summary>
            Within what range to the player OnRenderFrame() should be called (currently not used!)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderer.OnRenderFrame(System.Single,Vintagestory.API.Client.EnumRenderStage)">
            <summary>
            Called every frame for rendering whatever you need to render
            </summary>
            <param name="deltaTime"></param>
            <param name="stage"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderer.Dispose">
            <summary>
            Called when the renderer was unregistered. Should free up the gpu memory you reserved.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshRef.Dispose">
            <summary>
            Equivalent to calling api.Render.DeleteMesh()
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IMusicTrack.FadeOut(System.Single,Vintagestory.API.Common.Action)">
            <summary>
            Called when the track to interupted or when Update() returned false. 
            So called every time the tracked ended or has to end
            </summary>
            <param name="seconds"></param>
            <param name="onFadedOut"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IMusicEngine.StartTrack(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.Action{Vintagestory.API.Client.ILoadedSound},System.Single,System.Single)">
            <summary>
            Loads the sound into memoroy and plays the track. Slow call. Encapsulate it into ThreadPool.QueueUserWorkItem() to not block the main thread
            </summary>
            <param name="location"></param>
            <param name="onLoaded"></param>
            <param name="volume"></param>
            <param name="pitch"></param>
        </member>
        <member name="P:Vintagestory.API.Client.IMusicEngine.CurrentTrack">
            <summary>
            The currently playing track
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IMusicEngine.LastPlayedTrack">
            <summary>
            The track that played before
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IMusicEngine.MillisecondsSinceLastTrack">
            <summary>
            The total passed milliseconds since game start at the point where the last track stopped playing
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.Before">
            <summary>
            Before any rendering has begun, use for setting up stuff during render
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.Opaque">
            <summary>
            Opaque/Alpha tested rendering
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.OIT">
            <summary>
            Order independent transparency 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.ShadowFar">
            <summary>
            Shadow map
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.ShadowFarDone">
            <summary>
            Shadow map done
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.ShadowNear">
            <summary>
            Shadow map
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.ShadowNearDone">
            <summary>
            Shadow map done
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.AfterPostProcessing">
            <summary>
            After all 3d geometry has rendered and post processing of the frame is complete
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.Ortho">
            <summary>
            Ortho mode for rendering GUIs and everything 2D
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.AfterFinalComposition">
            <summary>
            The post processing passes are merged with all 3d geometry and the scene is color graded
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.Done">
            <summary>
            Scene is blitted onto the default frame buffer, buffers not yet swapped though so can still render to default FB
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Vintagestory.API.Client.CaveMusicTrack" -->
        <member name="P:Vintagestory.API.Client.CaveMusicTrack.SessionPlayTime">
            <summary>
            When playing cave sounds, play between 4-10 minutes each time
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.Default">
            <summary>
            Culls faces if they are opaque faces adjacent to opaque faces
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.NeverCull">
            <summary>
            Never culls any faces
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.Merge">
            <summary>
            Culls all faces that are adjacent to opaque faces and faces adjacent to blocks of the same id
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.Collapse">
            <summary>
            Culls all faces that are adjacent to opaque faces and the bottom, east or south faces adjacent to blocks of the same id
            This causes to still leave one single face inbetween instead of 2, eliminating any z-fighting.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.MergeMaterial">
            <summary>
            Same as Merge but checks for equal material
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.CollapseMaterial">
            <summary>
            Same as Collapse but checks for equal material
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.Liquid">
            <summary>
            Same as CollapseMaterial but also culls faces towards opaque blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShader.PrefixCode">
            <summary>
            If set, the shader registry will attach this bit of code to the beginning of the fragment shader file. Useful for setting stuff at runtime when using file shaders, e.g. via #define
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShader.Code">
            <summary>
            Source code of the shader
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.PassId">
            <summary>
            A uniqe shader pass number assigned to each shader program
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.PassName">
            <summary>
            The name it was registered with. If you want to load this shader from a file, make sure the use the filename here
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.ClampTexturesToEdge">
            <summary>
            If true, it well configure the textures to clamp to the edge (CLAMP_TO_EDGE). Requires the textureid to be defined using SetTextureIds
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderProgram.PrepareUniformLocations(System.String[])">
            <summary>
            For declaring your uniforms. The index of the uniform is then later used for assigning data to them using RenderAPI.ProgramUniform()
            </summary>
            <param name="locations"></param>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.VertexShader">
            <summary>
            The vertex shader of this shader program
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.FragmentShader">
            <summary>
            The fragment shader of this shader program
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.GeometryShader">
            <summary>
            The geometry shader of this shader program
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.Disposed">
            <summary>
            True if this shader has been disposed
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.IShaderAPI">
            <summary>
            API for configuring and loading GLSL Shaders
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.NewShaderProgram">
            <summary>
            Returns an empty instance of an IShaderProgram for you to configure. Once configured, call RegisterShaderProgram
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.NewShader(Vintagestory.API.Client.EnumShaderType)">
            <summary>
            Returns an empty instance of an IShader for you to configure as vertex, fragment or geometry shader
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.RegisterFileShaderProgram(System.String,Vintagestory.API.Client.IShaderProgram)">
            <summary>
            Registers a configured IShaderProgram. The name must correspond to the .vsh and .fsh filenames (without ending).
            Returns a program number to be used in UseShaderProgram()
            </summary>
            <param name="name"></param>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.RegisterMemoryShaderProgram(System.String,Vintagestory.API.Client.IShaderProgram)">
            <summary>
            Registers a configured IShaderProgram. Will not load anything from the shaders folder.
            Returns a program number to be used in UseShaderProgram()
            </summary>
            <param name="name"></param>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.GetProgram(System.Int32)">
            <summary>
            Returns the loaded shaders for use in rendering
            </summary>
            <param name="renderPass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.ReloadShaders">
            <summary>
            Discards all currently compiled shaders and recompiles them. Returns true if all shaders compiled without errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.IsGLSLVersionSupported(System.String)">
            <summary>
            Returns true if given GLSL Version is available on this machine
            </summary>
            <param name="minVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITerrainMeshPool.AddMeshData(Vintagestory.API.Client.MeshData)">
            <summary>
            Requires xyz, uv, rgba, indices, flags and xyzFaces to be set
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITerrainMeshPool.AddMeshData(Vintagestory.API.Client.MeshData,System.Int32)">
            <summary>
            Requires xyz, uv, rgba, indices, flags and xyzFaces to be set
            </summary>
            <param name="data"></param>
            <param name="tintColor"></param>
        </member>
        <member name="T:Vintagestory.API.Client.ITexPositionSource">
            <summary>
            An interface that can supply texture atlas positions 
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.ItemRenderInfo">
            <summary>
            Holds information on how a collectible should be rendered in hands, on the ground or in gui.
            In collectible.OnBeforeRender() the values are prefilled with the default ones.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ItemRenderInfo.ModelRef">
            <summary>
            The model to be rendered
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ItemRenderInfo.Transform">
            <summary>
            The transform to be applied when rendered
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ItemRenderInfo.CullFaces">
            <summary>
            Wether or not to cull back faces
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ItemRenderInfo.TextureId">
            <summary>
            The texture to be used when rendering. Should probalby be the texture id of the block or item texture atlas
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ItemRenderInfo.AlphaTest">
            <summary>
            For discarding fragments with alpha value below this threshold
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ItemRenderInfo.HalfTransparent">
            <summary>
            (Currently) not used.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Standard">
            <summary>
            A very plain shader for drawing any geometry
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Particlescube">
            <summary>
            For instanced rendering of cubic particles
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Particlesquad">
            <summary>
            For instanced rendering of quad particles
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Sky">
            <summary>
            For rendering the sky colors
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Clouds">
            <summary>
            For instanced rendering of clouds
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Nightsky">
            <summary>
            For rendering the stars skybox
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Woittest">
            <summary>
            Debug shader for testing Weighted Blended Order Independent
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Transparentcompose">
            <summary>
            Merges opaque geomerty with WOIT geometry
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Debugdepthbuffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Helditem">
            <summary>
            For rendering the currently held item
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Chunkopaque">
            <summary>
            Renders opaque chunk geometry
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Multitexturetest">
            <summary>
            Debug shader for testing multitexturing
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Chunkliquid">
            <summary>
            Renders liquid chunk geometry
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Decals">
            <summary>
            Renders decals, obviously O_O
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Final">
            <summary>
            Color grading and merging of all rendered scenes
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Gui">
            <summary>
            For drawing an item stack
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Blur">
            <summary>
            The Blur shader
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Chunktransparent">
            <summary>
            Renders half transparent chunk geometry using WOIT
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Findbright">
            <summary>
            For bloom shader
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Chunktopsoil">
            <summary>
            Renders top soil chunk geometry 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Godrays">
            <summary>
            For god rays
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Autocamera">
            <summary>
            Cinematic camera pather rendering
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Blockhighlights">
            <summary>
            Worldedit block highlights
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Wireframe">
            <summary>
            The selected block outline
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Entityanimated">
            <summary>
            For animated entities
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Luma">
            <summary>
            Luma prepass for FXAA
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.IClientWorldAccessor">
            <summary>
            The world accessor implemented by the client, offers some extra features only available on the client
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientWorldAccessor.ForceLiquidSelectable">
            <summary>
            Whether the player can select liquids
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientWorldAccessor.AmbientParticles">
            <summary>
            Whether to spawn ambient particles
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientWorldAccessor.Player">
            <summary>
            Returns the player running this client instance
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IClientWorldAccessor.OpenDialog(System.String,System.Object[])">
            <summary>
            Opens a gui dialog
            Returns a IGuiDialog instance for dialogs that inherit it. Allows for data exchange with dialogs.
            </summary>
            <param name="guiClassName"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientWorldAccessor.LoadSound(Vintagestory.API.Client.SoundParams)">
            <summary>
            Loads a sounds without playing it. Use to individually control when to play/stop. Might want to set DisposeOnFinish to false but then you have to dispose it yourself. 
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IClientWorldAccessor.ShakeCamera(System.Single)">
            <summary>
            Shakes the camera view by given strength
            </summary>
            <param name="strengh"></param>
        </member>
        <member name="P:Vintagestory.API.Client.IClientWorldAccessor.LoadedEntities">
            <summary>
            The internal cache of all currently loaded entities. Warning: You should not set or remove anything from this dic unless you *really* know what you're doing. Use SpawnEntity/DespawnEntity instead.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.EnumChunkRenderPass">
            <summary>
            The various render passes available for rendering blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.Opaque">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.OpaqueNoCull">
            <summary>
            No backface culling
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.BlendNoCull">
            <summary>
            No backface culling and alpha blending on
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.Transparent">
            <summary>
            Uses a special rendering system called Weighted Blended Order Independent Transparency for half transparent blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.Liquid">
            <summary>
            Same as OpaqueNoCull but with a few quirks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.TopSoil">
            <summary>
            Special render pass for top soil only in order to have climated tinted grass half transparently overlaid over an opaque block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.Meta">
            <summary>
            Special render pass for meta blocks
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.ILoadedSound">
            <summary>
            Represents a loaded game sound 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ILoadedSound.IsPlaying">
            <summary>
            Is sound currently playing
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ILoadedSound.IsFadingIn">
            <summary>
            True if the track is fading to a higher volume
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ILoadedSound.IsFadingOut">
            <summary>
            True if the track is fading to a lower volume
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ILoadedSound.HasStopped">
            <summary>
            Is the sound finished with playing? (false when only paused)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ILoadedSound.Params">
            <summary>
            The params the sound was created with.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.Start">
            <summary>
            Starts the sound
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.Stop">
            <summary>
            Stops the sound
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.Pause">
            <summary>
            Pauses the sound
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.Toggle(System.Boolean)">
            <summary>
            True for Starting, False for Stopping the sound
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.Dispose">
            <summary>
            Dispose the object sound. May no longer be used after disposing. 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.SetPitch(System.Single)">
            <summary>
            Allows you to modify the pitch of the sound. Might also be called while the sound is currently playing.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.SetVolume(System.Single)">
            <summary>
            Allows you to modify the volumne of the sound. Might also be called while the sound is currently playing.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.SetVolume">
            <summary>
            Sets the current volumne again. Use this to update the sounds volumne after the global sound level has changed
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.SetPosition(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Sets the position from where the sound is originating from
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.FadeTo(System.Single,System.Single,Vintagestory.API.Common.Action{Vintagestory.API.Client.ILoadedSound})">
            <summary>
            Fades the sounds volumne to given value
            </summary>
            <param name="newVolume"></param>
            <param name="duration"></param>
            <param name="onFaded"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.FadeOut(System.Single,Vintagestory.API.Common.Action{Vintagestory.API.Client.ILoadedSound})">
            <summary>
            Causes the sound to fade out 
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.FadeIn(System.Single,Vintagestory.API.Common.Action{Vintagestory.API.Client.ILoadedSound})">
            <summary>
            Causes the sound to fade in
            </summary>
            <param name="seconds"></param>
            <param name="onFadedIn"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.FadeOutAndStop(System.Single)">
            <summary>
            Causes the sound to fade out and stop the track
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="T:Vintagestory.API.Client.CompositeTexture">
            <summary>
            A single block texture
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CompositeTexture.Base">
            <summary>
            The basic texture for this composite texture
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CompositeTexture.Overlays">
            <summary>
            The base texture may be overlayed with any quantity of textures. These are baked together during texture atlas creation
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CompositeTexture.Alternates">
            <summary>
            The texture may consists of any amount of alternatives, one of which will be randomly chosen when the block is placed in the world.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CompositeTexture.Baked">
            <summary>
            BakedCompositeTexture is an expanded, atlas friendly version of CompositeTexture. Required during texture atlas generation.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CompositeTexture.#ctor">
            <summary>
            Creates a new empty composite texture
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CompositeTexture.#ctor(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Creates a new empty composite texture with given base texture
            </summary>
            <param name="Base"></param>
        </member>
        <member name="M:Vintagestory.API.Client.CompositeTexture.Clone">
            <summary>
            Creates a deep copy of the texture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CompositeTexture.Bake(Vintagestory.API.Common.IAssetManager)">
            <summary>
            Expands the Composite Texture to a texture atlas friendly version and populates the Baked field
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CompositeTexture.Bake(Vintagestory.API.Common.IAssetManager,Vintagestory.API.Client.CompositeTexture)">
            <summary>
            Expands a CompositeTexture to a texture atlas friendly version and populates the Baked field
            </summary>
            <param name="assetManager"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.BakedCompositeTexture">
            <summary>
            An expanded, atlas-friendly version of a CompositeTexture
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.BakedCompositeTexture.TextureSubId">
            <summary>
            Unique identifier for this texture
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.BakedCompositeTexture.BakedName">
            <summary>
            The Base name and Overlay concatenated (if there was any defined)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.BakedCompositeTexture.TextureFilenames">
            <summary>
            The base name and overlays as array
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.BakedCompositeTexture.BakedVariants">
            <summary>
            If non-null also contains BakedName
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.CustomMeshDataPart`1">
            <summary>
            Holds arbitrary mesh data for meshes to be used in a shader
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.Values">
            <summary>
            The arbitrary data to be uploaded to the graphics card
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.Count">
            <summary>
            Amout of values currently added
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.CustomMeshDataPart`1.BufferSize">
            <summary>
            Size of the Values array
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.CustomMeshDataPart`1.AllocationSize">
            <summary>
            Size of the array that should be allocated on the graphics card.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.InterleaveSizes">
            <summary>
            Amount of variable components for variable (i.e. 2, 3 for a vec2 and a vec3), valid values are 1, 2, 3 and 4 (limited by glVertexAttribPointer)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.InterleaveStride">
            <summary>
            Stride - Size in bytes of all values for one vertex
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.InterleaveOffsets">
            <summary>
            Offset in bytes for each in variable 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.Instanced">
            <summary>
            For instanced rendering
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.StaticDraw">
            <summary>
            Set to false if you intend to update the buffer very often (i.e. every frame)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.BaseOffset">
            <summary>
            Used as offset when doing a partial update on an existing buffer
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPart`1.SetAllocationSize(System.Int32)">
            <summary>
            Lets you define your a self defined size to be allocated on the graphics card.
            If not called the allocation size will be the count of the Elements in the Array
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPart`1.AutoAllocationSize">
            <summary>
            Use the element count as the allocation size (default behavior)
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.CustomMeshDataPartByte">
            <summary>
            Holds arbitrary byte data for meshes to be used in the shader
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.CustomMeshDataPartFloat">
            <summary>
            Holds arbitrary float data for meshes to be used in the shader
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.CustomMeshDataPartInt">
            <summary>
            Holds arbitrary int data for meshes to be used in the shader
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.MeshData">
            <summary>
            A bit fat data structure that can be used to upload mesh information onto the graphics card
            Please note, all arrays are used as a buffer. They do not tightly fit the data but are always sized as a multiple of 2 from the initial size.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.xyz">
            <summary>
            The x/y/z coordinates buffer. This should hold VerticesCount*3 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Flags">
            <summary>
            The render flags buffer. This should hold VerticesCount*1 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Normals">
            <summary>
            The normals buffer. This should hold VerticesCount*1 values. Currently unused by the engine.
            GL_INT_2_10_10_10_REV Format
            x: bits 0-9    (10 bit signed int)
            y: bits 10-19  (10 bit signed int)
            z: bits 20-29  (10 bit signed int) 
            w: bits 30-31
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Uv">
            <summary>
            The uv buffer for texture coordinates. This should hold VerticesCount*2 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Rgba">
            <summary>
            The vertex color buffer. This should hold VerticesCount*4 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.rgba2">
            <summary>
            The second vertex color buffer. This should hold VerticesCount*4 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Indices">
            <summary>
            The indices buffer. This should hold IndicesCount values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.CustomFloats">
            <summary>
            Custom floats buffer. Can be used to upload arbitrary amounts of float values onto the graphics card
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.CustomInts">
            <summary>
            Custom ints buffer. Can be used to upload arbitrary amounts of int values onto the graphics card
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.CustomBytes">
            <summary>
            Custom bytes buffer. Can be used to upload arbitrary amounts of byte values onto the graphics card
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.XyzInstanced">
            <summary>
            When using instanced rendering, set this flag to have the xyz values instanced.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.UvInstanced">
            <summary>
            When using instanced rendering, set this flag to have the uv values instanced.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.RgbaInstanced">
            <summary>
            When using instanced rendering, set this flag to have the rgba values instanced.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Rgba2Instanced">
            <summary>
            When using instanced rendering, set this flag to have the rgba2 values instanced.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.IndicesInstanced">
            <summary>
            When using instanced rendering, set this flag to have the indices instanced.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.FlagsInstanced">
            <summary>
            When using instanced rendering, set this flag to have the flags instanced.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.XyzStatic">
            <summary>
            xyz vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.UvStatic">
            <summary>
            uv vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.RgbaStatic">
            <summary>
            rgab vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Rgba2Static">
            <summary>
            rgba2 vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.IndicesStatic">
            <summary>
            indices vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.FlagsStatic">
            <summary>
            flags vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.XyzOffset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.UvOffset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.RgbaOffset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Rgba2Offset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.FlagsOffset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.NormalsOffset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.IndicesOffset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.mode">
            <summary>
            The meshes draw mode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.NormalsCount">
            <summary>
            Amount of currently assigned normals
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.VerticesCount">
            <summary>
            Amount of currently assigned vertices
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.IndicesCount">
            <summary>
            Amount of currently assigned indices
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.VerticesMax">
            <summary>
            Vertex buffer size
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.IndicesMax">
            <summary>
            Index buffer size
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.XyzFaces">
            <summary>
            BlockShapeTesselator xyz faces. Required by TerrainChunkTesselator to determine vertex lightness. Should hold VerticesCount / 4 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.XyzFacesCount">
            <summary>
            Amount of assigned xyz face values
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Tints">
            <summary>
            BlockShapeTesselator tints. Required by TerrainChunkTesselator to determine whether to color a vertex or not. Should hold VerticesCount / 4 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.RenderPasses">
            <summary>
            BlockShapeTesselator renderpass. Required by TerrainChunkTesselator to determine in which mesh data pool each quad should land in. Should hold VerticesCount / 4 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.TintsCount">
            <summary>
            Amount of assigned tint values
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.RenderPassCount">
            <summary>
            Amount of assigned render pass values
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MeshData.XyzCount">
            <summary>
            returns VerticesCount * 3
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MeshData.RgbaCount">
            <summary>
            returns VerticesCount * 4
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MeshData.Rgba2Count">
            <summary>
            returns VerticesCount * 4
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MeshData.FlagsCount">
            <summary>
            returns VerticesCount
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MeshData.UvCount">
            <summary>
            returns VerticesCount * 2
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.Translate(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Offset the mesh by given values
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.Translate(System.Single,System.Single,System.Single)">
            <summary>
            Offset the mesh by given values
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.Rotate(Vintagestory.API.MathTools.Vec3f,System.Single,System.Single,System.Single)">
            <summary>
            Rotate the mesh by given angles around given origin
            </summary>
            <param name="origin"></param>
            <param name="radX"></param>
            <param name="radY"></param>
            <param name="radZ"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.Scale(Vintagestory.API.MathTools.Vec3f,System.Single,System.Single,System.Single)">
            <summary>
            Scale the mesh by given values around given origin
            </summary>
            <param name="origin"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="scaleZ"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.ModelTransform(Vintagestory.API.Common.ModelTransform)">
            <summary>
            Apply given transformation on the mesh
            </summary>
            <param name="transform"></param>        
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.MatrixTransform(System.Single[])">
            <summary>
            Apply given transformation on the mesh
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.MatrixTransform(System.Double[])">
            <summary>
            Apply given transformation on the mesh
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.#ctor">
            <summary>
            Creates a new mesh data instance with no components initialized.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new mesh data instance with given components, but you can also freely nullify or set individual components after initialization
            Any component that is null is ignored by UploadModel/UpdateModel
            </summary>
            <param name="quantityVertices"></param>
            <param name="quantityIndices"></param>
            <param name="withUv"></param>
            <param name="withNormals"></param>
            <param name="withRgba"></param>
            <param name="withRgba2"></param>
            <param name="withFlags"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.WithTints">
            <summary>
            Sets up the tints array for holding tint info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.WithXyzFaces">
            <summary>
            Sets up the xyzfaces array for holding xyzfaces info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.WithRenderpasses">
            <summary>
            Sets up the renderPasses array for holding render pass info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddMeshData(Vintagestory.API.Client.MeshData,Vintagestory.API.Client.EnumChunkRenderPass)">
            <summary>
            Add supplied mesh data to this mesh. If a given dataset is not set, it is not copied from the sourceMesh. Automatically adjusts the indices for you.
            Is filtered to only add mesh data for given render pass.
            A negative render pass value defaults to EnumChunkRenderPass.Opaque
            </summary>
            <param name="data"></param>
            <param name="filterByRenderPass"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddMeshData(Vintagestory.API.Client.MeshData)">
            <summary>
            Add supplied mesh data to this mesh. If a given dataset is not set, it is not copied from the sourceMesh. Automatically adjusts the indices for you.
            </summary>
            <param name="sourceMesh"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.RemoveIndex">
            <summary>
            Removes the last index in the indices array
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.RemoveVertex">
            <summary>
            Removes the last vertex in the vertices array
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddVertex(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddVertex(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddWithFlagsVertex(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="color"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddVertex(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="color"></param>
            <param name="color2"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddVertexWithFlags(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="color"></param>
            <param name="color2"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddVertex(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddVertex(System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte[])">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddVertex(System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte[],System.Byte[])">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="color"></param>
            <param name="color2"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddNormal(System.Single,System.Single,System.Single)">
            <summary>
            Adds a new normal to the mesh. Grows the normal buffer if necessary.
            </summary>
            <param name="normalizedX"></param>
            <param name="normalizedY"></param>
            <param name="normalizedZ"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddNormal(Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Adds a new normal to the mesh. Grows the normal buffer if necessary.
            </summary>
            <param name="facing"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.GrowVertexBuffer">
            <summary>
            Doubles the size of the xyz, uv, rgba, rgba2 and flags arrays
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.Clone">
            <summary>
            Creates a deep copy of the mesh
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.Clear">
            <summary>
            Sets the counts of all data to 0
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.CloudSideShadings">
            <summary>
            Top, Front/Left, Back/Right, Bottom
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.DefaultBlockSideShadings">
            <summary>
            Top, Front/Left, Back/Right, Bottom
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.DefaultBlockSideShadingsByFacing">
            <summary>
            Shadings by Blockfacing index
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.CubeVertices">
            <summary>
            XYZ Vertex postions for every vertex in a cube. Origin is the cube middle point.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.CubeUvCoords">
            <summary>
            UV Coords for every Vertex in a cube
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.CubeVertexIndices">
            <summary>
            Indices for every triangle in a cube
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.BaseCubeVertexIndices">
            <summary>
            Can be used for any face if offseted correctly
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetCube">
            <summary>
            Returns a default 2x2x2 cube with xyz,uv,rgba and indices set - ready for upload to the graphics card
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetShadedCubeRGBA(System.Int32,System.Single[],System.Boolean)">
            <summary>
            Returns a rgba byte array to be used for default shading on a standard cube, can supply the shading levels
            </summary>
            <param name="baseColor"></param>
            <param name="blockSideShadings"></param>
            <param name="smoothShadedSides"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetShadedCubeRGBA(System.Int32[],System.Boolean)">
            <summary>
            Returns a rgba byte array to be used for default shading on a standard cube
            </summary>
            <param name="colorSides"></param>
            <param name="smoothShadedSides"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetCubeOnlyScaleXyz(System.Single,System.Single,Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Same as GetCubeModelData but can define scale and translation. Scale is applied first.
            </summary>
            <param name="scaleH"></param>
            <param name="scaleV"></param>
            <param name="translate"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetCube(System.Single,System.Single,Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Same as GetCubeModelData but can define scale and translation. Scale is applied first.
            </summary>
            <param name="scaleH"></param>
            <param name="scaleV"></param>
            <param name="translate"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetCube(System.Single,System.Single,System.Single,Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Same as GetCubeModelData but can define scale and translation. Scale is applied first.
            </summary>
            <param name="scaleH"></param>
            <param name="scaleV"></param>
            <param name="translate"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.QuadMeshUtil">
            <summary>
            Utility class for simple quad meshes
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.QuadMeshUtil.GetQuad">
            <summary>
            Returns a single vertical quad mesh of with vertices going from -1/-1 to 1/1
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.QuadMeshUtil.GetCustomQuadModelData(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Quad without rgba, with uv
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="dw"></param>
            <param name="dh"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.QuadMeshUtil.GetCustomQuad(System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns a single vertical  quad mesh at given position, size and color
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.QuadMeshUtil.GetCustomQuadHorizontal(System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns a single horziontal quad mesh with given params
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="width"></param>
            <param name="length"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.SoundParams">
            <summary>
            The sound paramaters used for loading sounds on the client side
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.Location">
            <summary>
            The specific sound to be played
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.Position">
            <summary>
            The position of the sound
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.RelativePosition">
            <summary>
            If true then Position is added relative to the players current position
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.ShouldLoop">
            <summary>
            If the sound should start again when finished
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.DisposeOnFinish">
            <summary>
            Probably want to set this to false on looping sounds. But remember to dispose it yourself when you no longer need it
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.Pitch">
            <summary>
            The sounds intial pitch. 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.Volume">
            <summary>
            The sounds initial volumne
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.Range">
            <summary>
            The sounds initial range
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.SoundType">
            <summary>
            Determines whether to apply the music or sound volumne level to the Volume
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.TextureAtlasPosition">
            <summary>
            The position of a texture inside an atlas
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextureAtlasPosition.atlasTextureId">
            <summary>
            The OpenGL textureid
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextureAtlasPosition.atlasNumber">
            <summary>
            A sequential number in which atlas this position is in. Atlasses for a given type are sequentially numbered if more than one atlas was required to hold all the textures
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextureAtlasPosition.x1">
            <summary>
            The x coordinate of the texture origin point
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextureAtlasPosition.y1">
            <summary>
            The y coordinate of the texture origin point
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextureAtlasPosition.x2">
            <summary>
            The x coordinate of the texture end point
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextureAtlasPosition.y2">
            <summary>
            The y coordinate of the texture end point
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumAnimationBlendMode.Add">
            <summary>
            Add the animation without taking other animations into considerations
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumAnimationBlendMode.Average">
            <summary>
            Add the pose and average it together with all other running animations with blendmode Average or AddAverage
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumAnimationBlendMode.AddAverage">
            <summary>
            Add the animation without taking other animations into consideration, but add it's weight for averaging 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationMetaData.Code">
            <summary>
            Unique identifier to be able to reference this AnimationMetaData instance
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationMetaData.Animation">
            <summary>
            The animations code identifier that we want to play
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IBulkBlockAccessor">
            <summary>
            Useful for setting many blocks at once efficiently
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBulkBlockAccessor.GetStagedBlockId(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the block if for a not yet commited block. If no block has been staged for this pos the original block is return
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBulkBlockAccessor.GetStagedBlockId(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Gets the block if for a not yet commited block. If no block has been staged for this pos the original block is return
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.EventBusListenerDelegate">
            <summary>
            For handling events on the event bus
            </summary>
            <param name="eventName"></param>
            <param name="handling">Set to EnumHandling.Last to stop further propagation of the event</param>
            <param name="data"></param>
        </member>
        <member name="T:Vintagestory.API.Common.IEventAPI">
            <summary>
            Events that are available on the server and the client
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.PushEvent(System.String,Vintagestory.API.Datastructures.IAttribute)">
            <summary>
            There's 2 global event busses, 1 on the client and 1 on the server. This pushes an event onto the bus.
            </summary>
            <param name="eventName"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.RegisterEventBusListener(Vintagestory.API.Common.EventBusListenerDelegate,System.Double,System.String)">
            <summary>
            Registers a listener on the event bus. This is intended for mods as the game engine itself does not push any events.
            </summary>
            <param name="OnEvent">The handler for the events</param>
            <param name="priority">Set this to a different value if you want to catch an event before/after another mod catches it</param>
            <param name="filterByEventName">If set, events only with given eventName are received</param>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.RegisterGameTickListener(Vintagestory.API.Common.Action{System.Single},System.Int32)">
            <summary>
            Calls given method after every given interval until unregistered. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnGameTick"></param>
            <param name="millisecondInterval"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.RegisterGameTickListener(Vintagestory.API.Common.Action{Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single},Vintagestory.API.MathTools.BlockPos,System.Int32)">
            <summary>
            Calls given method after every given interval until unregistered. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnGameTick"></param>
            <param name="pos"></param>
            <param name="millisecondInterval"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.RegisterCallback(Vintagestory.API.Common.Action{System.Single},System.Int32)">
            <summary>
            Calls given method after supplied amount of milliseconds. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnTimePassed"></param>
            <param name="millisecondDelay"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.RegisterCallback(Vintagestory.API.Common.Action{Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single},Vintagestory.API.MathTools.BlockPos,System.Int32)">
            <summary>
            Calls given method after supplied amount of milliseconds, lets you supply a block position to be passed to the method. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnTimePassed"></param>
            <param name="pos"></param>
            <param name="millisecondDelay"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.UnregisterCallback(System.Int64)">
            <summary>
            Removes a delayed callback
            </summary>
            <param name="listenerId"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.UnregisterGameTickListener(System.Int64)">
            <summary>
            Removes a game tick listener
            </summary>
            <param name="listenerId"></param>
        </member>
        <member name="P:Vintagestory.API.Common.IMapChunk.RainHeightMap">
            <summary>
            The position of the last block that is not rain permeable before the first airblock
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapChunk.WorldGenTerrainHeightMap">
            <summary>
            The position of the last block before the first airblock before world gen pass Vegetation
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapChunk.TopRockIdMap">
            <summary>
            The rock block id of the topmost rock layer
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.Mod">
            <summary>
            Represents a mod in the mod manager. May contain zero to multiple
            <see cref="T:Vintagestory.API.Common.ModSystem"/> instances within it.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.FileName">
            <summary> Gets the file name of this mod. </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.Path">
            <summary> Gets the path to where this mod originated from. </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.Type">
            <summary> Gets the origin file type of the mod (.cs, .dll, .zip or folder). </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.Info">
            <summary>
            Gets the info of this mod. Found either as "modinfo.json" in the
            of the mod's folder or archive, or in the case of raw .cs and .dll
            files, using the <see cref="T:Vintagestory.API.Common.ModInfoAttribute"/>
            on the assembly.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.Icon">
            <summary>
            Holds the icon of this mod. Found as "modicon.png" in the root of
            the mod's folder or archive.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.Systems">
            <summary> Gets a collection of systems belonging to this mod. </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.ErrorWhileLoading">
            <summary> Gets whether there was an error while loading this mod. </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.DependencyError">
            <summary> Gets whether there was an error when checking this mod's dependencies. </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ModSourceType">
            <summary>
            Represents the origin file type of the mod.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModSourceType.CS">
            <summary> A single .cs source file. (Code mod without assets.) </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModSourceType.DLL">
            <summary> A single .dll source file. (Code mod without assets.) </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModSourceType.ZIP">
            <summary> A .zip archive able to contain assets and code files. </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModSourceType.FOLDER">
            <summary> A folder able to contain assets and code files. </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumReplaceMode.Replaceable">
            <summary>
            Replace if new block replaceable value > old block replaceable value
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumReplaceMode.ReplaceAll">
            <summary>
            Replace always, no matter what blocks were there previously
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumReplaceMode.ReplaceAllNoAir">
            <summary>
            Replace always, no matter what blocks were there previously, but skip air blocks in the schematic
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumReplaceMode.ReplaceOnlyAir">
            <summary>
            Replace only air blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSchematic.PathwayStarts">
            <summary>
            Distance positions from bottom left corner of the schematic. Only the first door block.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSchematic.PathwayOffsets">
            <summary>
            Distance from the bottom left door block, so the bottom left door block is always at 0,0,0
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.Place(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumOrigin,System.Boolean)">
            <summary>
            Will place all blocks using the configured replace mode. Note: If you use a revertable or bulk block accessor you will have to call PlaceBlockEntities() after the Commit()
            </summary>
            <param name="blocAccessor"></param>
            <param name="startPos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.Place(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumReplaceMode,Vintagestory.API.Common.EnumOrigin,System.Boolean)">
            <summary>
            Will place all blocks using the supplied replace mode. Note: If you use a revertable or bulk block accessor you will have to call PlaceBlockEntities() after the Commit()
            </summary>
            <param name="blockAccessor"></param>
            <param name="startPos"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ICoreAPI">
            <summary>
            Common API Components that are available on the server and the client. Cast to ICoreServerAPI or ICoreClientAPI to access side specific features.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.CmdlArguments">
            <summary>
            The command line arguments that were used to start the client or server application
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.Side">
            <summary>
            Returns if you are currently on server or on client
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.Event">
            <summary>
            Api component to register/trigger events
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.World">
            <summary>
            Second API Component for access/modify everything game world related
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.ClassRegistry">
            <summary>
            API Compoment for creating instances of certain classes, such as Itemstacks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.Assets">
            <summary>
            API Component for loading and reloading one or multiple assets at once from the assets folder
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.ModLoader">
            <summary>
            API Component for checking for and interacting with other mods and mod systems
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPI.RegisterEntity(System.String,System.Type)">
            <summary>
            Registers a non-block entity. Be sure to register it on the client and server side.
            </summary>
            <param name="className"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPI.RegisterEntityBehaviorClass(System.String,System.Type)">
            <summary>
            Registers a non-block entity behavior. Be sure to register it on the client and server side.
            </summary>
            <param name="className"></param>
            <param name="entityBehavior"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPI.RegisterEntityClass(System.String,Vintagestory.API.Common.Entities.EntityType)">
            <summary>
            Registers a new entity config for given entity class
            </summary>
            <param name="entityClassName"></param>
            <param name="config"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPI.RegisterBlockClass(System.String,System.Type)">
            <summary>
            Register a new Blockclass. Must happen before any blocks are loaded. Be sure to register it on the client and server side.
            </summary>
            <param name = "className">Class to register</param>
            <param name = "blockType">Name of the class</param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPI.RegisterCropBehavior(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="type"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPI.RegisterBlockEntityClass(System.String,System.Type)">
            <summary>
            Register a new BlockEntity Class. Must happen before any blocks are loaded. Be sure to register it on the client and server side.
            </summary>
            <param name="className"></param>
            <param name="blockentityType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPI.RegisterItemClass(System.String,System.Type)">
            <summary>
            Register a new Item Class. Must happen before any blocks are loaded. Be sure to register it on the client and server side.
            </summary>
            <param name="className"></param>
            <param name="itemType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPI.RegisterBlockBehaviorClass(System.String,System.Type)">
            <summary>
            Register a new block behavior class. Must happen before any blocks are loaded. Be sure to register it on the client and server side.
            </summary>
            <param name="className"></param>
            <param name="blockBehaviorType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPI.RegisterMountable(System.String,Vintagestory.API.Common.GetMountableDelegate)">
            <summary>
            Register a new block behavior class. Must happen before any blocks are loaded. Be sure to register it on the client and server side.
            Make your your delegate also set tree.SetString("className", "[your className]");
            </summary>
            <param name="className"></param>
            <param name="blockBehaviorType"></param>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.ObjectCache">
            <summary>
            Can be used to store non-persistent, game wide data. E.g. used for firewood piles to pregenerate all meshes only once during startup
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.DataBasePath">
            <summary>
            Returns the root path of the games data folder
            </summary>
            <value></value>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPI.GetOrCreateDataPath(System.String)">
            <summary>
            Returns the path to given foldername inside the games data folder. Ensures that the folder exists
            </summary>
            <param name="foldername"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.IMapRegion">
            <summary>
            2D Map data for a 8x8 area of chunk columns. Holds a few maps for the chunk generation.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.DepositDistortionMap">
            <summary>
            Holds some simple perlin noise to be applied as a 2d distortion when placing deposits so they are not perfectly round
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.FlowerMap">
            <summary>
            Currently unuseds
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.ShrubMap">
            <summary>
            Holds a shrub density map
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.ForestMap">
            <summary>
            Holds a forest density map
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.LandformMap">
            <summary>
            Holds the landform indices
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.ClimateMap">
            <summary>
            Holds temperature and rain fall.
            16-23 bits = Red = temperature
            8-15 bits = Green = rain
            0-7 bits = Blue = unused 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.GeologicProvinceMap">
            <summary>
            Holds the geologic province indices
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.AssetLocation">
            <summary>
            Defines a complete path to an assets, including it's domain
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.#ctor(System.String)">
            <summary>
            Create a new AssetLocation. If no domain is prefixed, the default 'game' domain is used.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.#ctor(System.String,System.String)">
            <summary>
            Create a new AssetLocation with given domain
            </summary>
            <param name="domain"></param>
            <param name="path"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.FirstPathPart(System.Int32)">
            <summary>
            Returns the n-th path part
            </summary>
            <param name="posFromLeft"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.AssetCategory.Code">
            <summary>
            Path and name
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AssetCategory.SideType">
            <summary>
            Determines wether it will be used on server, client or both.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AssetCategory.AffectsGameplay">
            <summary>
            Temporary solution to not change block types. Will be changed
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetOrigin.LoadAsset(Vintagestory.API.Common.IAsset)">
            <summary>
            
            </summary>
            <param name="asset"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetOrigin.GetAssets(Vintagestory.API.Common.AssetCategory,System.Boolean)">
            <summary>
            Returns all assets of the given category which can be found in this origin 
            </summary>
            <param name="Category"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetOrigin.GetAssets(Vintagestory.API.Common.AssetLocation,System.Boolean)">
            <summary>
            Returns all assets of the given base location path which can be found in this origin 
            </summary>
            <param name="baseLocation"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetOrigin.IsAllowedToAffectGameplay">
            <summary>
            Resource packs are not allowed to affect gameplay
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.BlockSelection">
            <summary>
            Contains all the information for a players block selection event
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSelection.Position">
            <summary>
            The position the player wants to place/break something at
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSelection.Face">
            <summary>
            The face the player aimed at
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSelection.HitPosition">
            <summary>
            The coordinate of the exact aimed position, relative to the Block Position
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSelection.SelectionBoxIndex">
            <summary>
            Which selection box was aimed at. The index corresponds to the array returned by Block.GetSelectionBoxes()
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSelection.DidOffset">
            <summary>
            Always false during block use. True during placement if the Position value was offseted. Example:
            - When trying to place planks while aiming at rock, the Position is the one in front of the Rock and DidOffset is True
            - When trying to place planks while aiming at tallgrass, the Position is where the tall grass is and DidOffset is false (because tallgrass is replacable)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSelection.Clone">
            <summary>
            Creates a deep copy 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.TotalHoursForNextStage">
            <summary>
            Total game hours from where on it can enter the next growth stage 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.TotalHoursFertilityCheck">
            <summary>
            The last time fertility increase was checked
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.Nutrients">
            <summary>
            Farmland has 3 nutrient levels N, P and K located in this array in that order. 
            Each nutrient level has a range of 0-100.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.IsWatered">
            <summary>
            Whether the farmland has water within 3 blocks of it's position
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.OriginalFertility">
            <summary>
            The fertility the soil will recover to (the soil from which the farmland was made of)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.Pos">
            <summary>
            The position of the farmland
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.UpPos">
            <summary>
            The position directly above the farmland
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ClayFormingRecipe.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serialized the alloy
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ClayFormingRecipe.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Deserializes the alloy
            </summary>
            <param name="reader"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ClayFormingRecipe.GetNameToCodeMapping(Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Resolves Wildcards in the ingredients
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ClayFormingRecipe.Clone">
            <summary>
            Creates a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.KnappingRecipe.Clone">
            <summary>
            Creates a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.SmithingRecipe.Clone">
            <summary>
            Creates a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.SingleLayerVoxelRecipe`1.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serialized the alloy
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.SingleLayerVoxelRecipe`1.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Deserializes the alloy
            </summary>
            <param name="reader"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.SingleLayerVoxelRecipe`1.GetNameToCodeMapping(Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Resolves Wildcards in the ingredients
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IAiTask.Slot">
            <summary>
            Up to 8 tasks can be active concurrently. This number denotes the index of task. Most tasks run in slot 0.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAiTask.Priority">
            <summary>
            Return equal or below zero to not execute this action.
            Any value above zero is considered if the current executing task is of a lower priority
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IAiTask.PriorityForCancel">
            <summary>
            When the activitiy is active you may wanna give it a higher priority to finish executing
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IAiTask.ShouldExecute">
            <summary>
            Return true if this task should execute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAiTask.StartExecute">
            <summary>
            Called the first time this task is considered active
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IAiTask.ContinueExecute(System.Single)">
            <summary>
            Called every game time while this task is active. Return false to stop execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAiTask.FinishExecute(System.Boolean)">
            <summary>
            Called once execution has stopped. If cancelled is true, the task has been forcefully stopped because a higher priority task has to be executed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAiTask.LoadConfig(Vintagestory.API.JsonObject,Vintagestory.API.JsonObject)">
            <summary>
            Called when a behaviors has been loaded via entityconfig
            </summary>
            <param name="taskConfig">AI Task Specific config</param>
            <param name="aiConfig">All of the AI config</param>
        </member>
        <member name="M:Vintagestory.API.Common.IAiTask.OnStateChanged(Vintagestory.API.Common.EnumEntityState)">
            <summary>
            Called when the entity changed from active to inactive state and vice versa (inactive means no player is in its ticking range)
            </summary>
            <param name="beforeState"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IAiTask.Notify(System.String,System.Object)">
            <summary>
            The notify event bubbled up from event.notify(). You may use this method in the same way as ShouldExecute(), i.e. return true if the task should start now. 
            May not start if a higher priority task in the same slot is currently running
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="T:Vintagestory.API.Common.EntityAgent">
            <summary>
            An autonomous, goal-directed entity which observes and acts upon an environment
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityAgent.DeadNotify">
            <summary>
            True if all clients have to be informed about this entities death. Set to false once all clients have been notified
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityAgent.HerdId">
            <summary>
            Unique identifier for a herd
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.ToBytes(System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Serializes the slots contents to be stored in the SaveGame
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.FromBytes(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Loads the entity from a stored byte array from the SaveGame
            </summary>
            <param name="reader"></param>
            <param name="forClient"></param>
        </member>
        <member name="T:Vintagestory.API.Common.EntityControls">
            <summary>
            The available controls to move around a character in a game world
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.HeldItemUse">
            <summary>
            If the player is currently using the currently held item in a special way (e.g. attacking with smithing hammer or eating an edible item)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMountable.Controls">
            <summary>
            Return non-null controls if the player can control the mountable
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IMountable.MountableToTreeAttributes(Vintagestory.API.Datastructures.TreeAttribute)">
            <summary>
            When the entity unloads you should write whatever you need in here to reconstruct the IMountable after it's loaded again
            Reconstruct it by registering a mountable instancer through api.RegisterMountable(string className, GetMountableDelegate mountableInstancer)
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IMountable.DidUnmount(Vintagestory.API.Common.EntityAgent)">
            <summary>
            Called when the entity unmounted himself
            </summary>
            <param name="entityAgent"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IMountable.DidMount(Vintagestory.API.Common.EntityAgent)">
            <summary>
            Called when the entity mounted himself
            </summary>
            <param name="entityAgent"></param>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.Api">
            <summary>
            The world in which the inventory is operating in. Gives inventories access to block types, item types and the ability to drop items on the ground.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.baseWeight">
            <summary>
            Is this inventory generally better suited to hold items? (e.g. set to 3 for armor in armor inventory, 2 for any item in hotbar inventory, 1 for any item in normal inventory)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.dirtySlots">
            <summary>
            Slots that have been recently modified. This list is used on the server to update the clients (then cleared) and on the client to redraw itemstacks in guis (then cleared)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.GetSuitability(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemSlot,System.Boolean)">
            <summary>
            How well a stack fits into this inventory. 
            </summary>
            <param name="stack"></param>
            <param name="targetSlot"></param>
            <param name="isMerge"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.ActivateSlot(System.Int32,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Call when a player has clicked on this slot. The source slot is the mouse cursor slot. This handles the logic of either taking, putting or exchanging items.
            </summary>
            <param name="slotId"></param>
            <param name="sourceSlot"></param>
            <param name="op"></param>
            <returns>The appropriate packet needed to reflect the changes on the opposing side</returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.OnItemSlotModified(Vintagestory.API.Common.IItemSlot)">
            <summary>
            Called when one of the containing slots has been modified
            </summary>
            <param name="slot"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.DidModifyItemSlot(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.IItemStack)">
            <summary>
            Called when one of the containing slots has been modified
            </summary>
            <param name="slot"></param>
            <param name="extractedStack">If non null the itemstack that was taken out</param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.DidNotifySlot(System.Int32)">
            <summary>
            Called when one of the containing slot was notified via NotifySlot
            </summary>
            <param name="slotId"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.FromTreeAttributes(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Called when the game is loaded or loaded from server
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.ToTreeAttributes(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Called when the game is saved or sent to client
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.InventoryBasePlayer">
            <summary>
            Abstract class used for all inventories that are "on" the player. Any inventory not inheriting from this class will not be stored to the savegame as part of the players inventory.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemSlot.BackgroundIcon">
            <summary>
            Icon name to be drawn in the slot background
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.TryPutInto(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Returns the quantity of items that were not merged (left over in the source slot)
            </summary>
            <param name="sinkSlot"></param>
            <param name="quantity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.ActivateSlot(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Call when a player has clicked on this slot. The source slot is the mouse cursor slot. This handles the logic of either taking, putting or exchanging items.
            </summary>
            <param name="sourceSlot"></param>
        </member>
        <member name="F:Vintagestory.API.Common.EnumMergePriority.AutoMerge">
            <summary>
            Automatic merge operation
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumMergePriority.DirectMerge">
            <summary>
            When using mouse to manually merge item stacks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumMergePriority.ConfirmedMerge">
            <summary>
            Confirmed merge via dialog 
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.CollectibleParticleProperties">
            <summary>
            Abstract class used for BlockVoxelParticles and ItemVoxelParticles
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BitmapExternal.GetPixel(System.Int32,System.Int32)">
            <summary>
            Retrives the ARGB value from given coordinate
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BitmapExternal.GetPixelRel(System.Single,System.Single)">
            <summary>
            Retrives the ARGB value from given coordinate using normalized coordinates (0..1)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.IParticleInstance">
            <summary>
            Represents a particle that has been spawned
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IParticleInstance.GetPosition">
            <summary>
            Returns the current position of the particle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticleInstance.GetVelocity">
            <summary>
            Returns the current velocity of the particle
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.IClassRegistryAPI">
            <summary>
            Interface for creating instances
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateBlock(System.String)">
            <summary>
            Creates a block instance from given block class 
            </summary>
            <param name="blockclass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.GetBlockClass(System.String)">
            <summary>
            Returns the type of the registered block class or null otherwise
            </summary>
            <param name="blockclass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateBlockEntity(System.String)">
            <summary>
            Creates a block entity instance from given block entity class 
            </summary>
            <param name="blockEntityClass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateEntity(System.String)">
            <summary>
            Creates a entity instance from given entity class 
            </summary>
            <param name="entityClass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateEntity(Vintagestory.API.Common.Entities.EntityType)">
            <summary>
            Creates a entity instance from given entity type 
            </summary>
            <param name="entityClass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateMountable(Vintagestory.API.Datastructures.TreeAttribute)">
            <summary>
            Creates an instance of a mountable that has been registered with api.RegisterMountable
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateBlockBehavior(Vintagestory.API.Common.Block,System.String)">
            <summary>
            Creates a block behavior instance from given block class 
            </summary>
            <param name="forBlock"></param>
            <param name="blockBehaviorName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.GetBlockBehaviorClass(System.String)">
            <summary>
            Returns the block behavior type registered for given name or null
            </summary>
            <param name="blockclass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateEntityBehavior(Vintagestory.API.Common.Entities.Entity,System.String)">
            <summary>
            Creates a block behavior instance from given block class 
            </summary>
            <param name="forEntity"></param>
            <param name="entityBehaviorName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateItem(System.String)">
            <summary>
            Creates an item instance from given item class 
            </summary>
            <param name="itemclass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.GetItemClass(System.String)">
            <summary>
            Gets the registered item type or null if not registered
            </summary>
            <param name="itemClass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateJsonTreeAttributeFromDict(System.Collections.Generic.Dictionary{System.String,Vintagestory.API.Datastructures.JsonTreeAttribute})">
            <summary>
            Creates a json serializable version of an ITreeAttribute
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.GetBlockEntity(System.String)">
            <summary>
            Returns the type for given BlockEntity class name as register in the ClassRegistry
            </summary>
            <param name="bockEntityClass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.GetBlockEntityClass(System.Type)">
            <summary>
            Returns to the block entity class if give Type is a registered block entity class
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateCropBehavior(Vintagestory.API.Common.Block,System.String)">
            <summary>
            Creates a crop behavior instance from given block class 
            </summary>
            <param name="forBlock"></param>
            <param name="cropBehaviorName"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.CmdArgs">
            <summary>
            The arguments from a client or sever command
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.#ctor">
            <summary>
            Creates a new instance of the CmdArgs util with no arguments
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of the CmdArgs util
            </summary>
            <param name="joinedargs"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.#ctor(System.String[])">
            <summary>
            Creates a new instance of the CmdArgs util
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Vintagestory.API.Common.CmdArgs.Item(System.Int32)">
            <summary>
            Returns the n-th arugment
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.CmdArgs.Length">
            <summary>
            Amount of arguments passed
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopAll">
            <summary>
            Returns all remaining arguments as single merged string, concatenated with spaces
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PeekChar(System.Nullable{System.Char})">
            <summary>
            Returns the first char of the first argument
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopChar(System.Nullable{System.Char})">
            <summary>
            Remove the first character from the first argument and returns it
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopSingle(System.String)">
            <summary>
            Removes the first argument and returns it
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PushSingle(System.String)">
            <summary>
            Adds an arg to the beginning
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.AppendSingle(System.String)">
            <summary>
            Adds an arg to the end
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopEnum``1(``0)">
            <summary>
            Tries to retrieve arg at given index as enum value or default if not enough arguments or not part of the enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopInt(System.Nullable{System.Int32})">
            <summary>
            Tries to retrieve arg at given index as int, or null if not enough arguments or not an integer
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopLong(System.Nullable{System.Int64})">
            <summary>
            Tries to retrieve arg at given index as long, or null if not enough arguments or not a long
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopBool(System.Nullable{System.Boolean})">
            <summary>
            Tries to retrieve arg at given index as boolean, or null if not enough arguments or not an integer
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopDouble(System.Nullable{System.Double})">
            <summary>
            Tries to retrieve arg at given index as int, or null if not enough arguments or not an integer
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopFloat(System.Nullable{System.Single})">
            <summary>
            Tries to retrieve arg at given index as int, or null if not enough arguments or not an integer
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopVec3i(Vintagestory.API.MathTools.Vec3i)">
            <summary>
            Tries to retrieve 3 int coordinates from the next 3 arguments
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopFlexiblePos(Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Retrieves a player position with following syntax:
            [coord] [coord] [coord]
            whereas 
            [coord] may be ~[decimal]  or =[decimal] or [decimal]
            ~ denotes a position relative to the player
            = denotes an absolute position
            no prefix denots a position relative to the map middle
            </summary>
            <param name="playerPos"></param>
            <param name="mapMiddle"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.EntityRenderer">
            <summary>
            Base class for entity rendering
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityRenderer.entity">
            <summary>
            The current entity
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityRenderer.api">
            <summary>
            A reference to the client api
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.#ctor(Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Creates a new entity renderer instance
            </summary>
            <param name="entity"></param>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.DoRender3DOpaque(System.Single,System.Boolean)">
            <summary>
            Draw call with no shader initialized
            </summary>
            <param name="dt"></param>
            <param name="isShadowPass"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.DoRender3DOpaqueBatched(System.Single,System.Boolean)">
            <summary>
            Draw call with the Entityanimated shader loaded and initialized with the correct color/fog/sunlight/texture values
            If shadows are enabled, then this method is called again with shadowmap shader intialized
            </summary>
            <param name="dt"></param>
            <param name="isShadowPass"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.DoRender2D(System.Single)">
            <summary>
            Ortho mode draw call for 2d gui stuff, like name tags. Gui shader initialized already.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.PrepareForGuiRender(System.Single,System.Double,System.Double,System.Double,System.Single,System.Single,Vintagestory.API.Client.MeshRef@,System.Single[]@)">
            <summary>
            Called before gui rendering starts. Drawing of the whole model into a gui dialog. Gui shader initialized already.
            </summary>
            <param name="dt"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <param name="yawDelta"></param>
            <param name="size"></param>
            <param name="meshRef"></param>
            <param name="modelviewMatrix"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.BeforeRender(System.Single)">
            <summary>
            Called before in-world rendering starts
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.Dispose">
            <summary>
            Should free up all the resources
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.DoRender3DOIT(System.Single)">
            <summary>
            Render call for the transparent pass
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.DoRender3DOITBatched(System.Single)">
            <summary>
            Batched render call for the transparent pass
            </summary>
            <param name="dt"></param>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntityPlayer.CameraPos">
            <summary>
            Render position for the own player on the client
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.Entity">
            <summary>
            The basic class for all entities in the game. Currently used for player and item entities.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.IsRendered">
            <summary>
            Set by the client renderer when the entity was rendered last frame
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.Renderer">
            <summary>
            Set by the game client
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.HurtColor">
            <summary>
            Color used when the entity is being attacked
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.ActivityTimers">
            <summary>
            An uptime value running activities.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.Pos">
            <summary>
            Client position
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.ServerPos">
            <summary>
            Server simulated position. If this value differs to greatly from client pos we have to override client pos
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.ServerAnimator">
            <summary>
            Server simulated animations. Only takes care of stopping animations once they're done
            Set and Called by the Entities ServerSystem
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.LocalPos">
            <summary>
            ServerPos on server, Pos on client
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.PreviousServerPos">
            <summary>
            Server simulated position copy. Needed by Entities system to send pos updatess only if ServerPos differs noticably from PreviousServerPos
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.PositionBeforeFalling">
            <summary>
            The position where the entity last had contact with the ground
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.WatchedAttributes">
            <summary>
            Permanently stored entity attributes that are sent to client everytime they have been changed
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.DebugAttributes">
            <summary>
            If entity debug mode is on, this info will be transitted to client and displayed above the entities head
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.Attributes">
            <summary>
            Permanently stored entity attributes that are only client or only server side
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.OnGround">
            <summary>
            True if this entity is in touch with the ground
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.FeetInLiquid">
            <summary>
            True if the bottom of the collisionbox is inside a liquid
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.Swimming">
            <summary>
            True if the collisionbox is 2/3rds submerged in liquid
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.CollidedVertically">
            <summary>
            True if the entity is in touch with something solid on the vertical axis
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.CollidedHorizontally">
            <summary>
            True if the entity is in touch with something solid on both horizontal axes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.StoreWithChunk">
            <summary>
            Players and whatever the player rides on will be stored seperatly
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.AlwaysActive">
            <summary>
            Whether this entity should always stay in Active model, regardless on how far away other player are
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.Collided">
            <summary>
            CollidedVertically || CollidedHorizontally
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.MaterialDensity">
            <summary>
            Determines on whether an entity floats on liquids or not. Water has a density of 1000.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.LightHsv">
            <summary>
            If set, the entity will emit dynamic light
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.ApplyGravity">
            <summary>
            If gravity should applied to this entity
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.EntityId">
            <summary>
            A unique identifier for this entity
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.Alive">
            <summary>
            True if the entity is in state active or inactive
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.ShouldDespawn">
            <summary>
            just a !Alive currently
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.Type">
            <summary>
            The type of the entity
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.Texture">
            <summary>
            Used by various renderers to retrieve the entities texture it should be drawn with
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.RendererName">
            <summary>
            Name of there renderer system that draws this entity
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.RenderColor">
            <summary>
            Used by some renderers to apply an overal color tint on the entity
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.EyeHeight">
            <summary>
            How high the camera should be placed if this entity were to be controlled by the playe
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.TryGiveItemStack(Vintagestory.API.Common.ItemStack)">
            <summary>
            Called when something tries to given an itemstack to this entity
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.IsInteractable">
            <summary>
            Should return true when this entity should be interactable by a player or other entities
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.SwimmingOffsetY">
            <summary>
            Used for passive physics simulation, together with the MaterialDensity to check how deep in the water the entity should float
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.#ctor">
            <summary>
            Creates a new instance of an entity
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnHurt(Vintagestory.API.Common.DamageSource,System.Single)">
            <summary>
            Called when the entity got hurt. On the client side, dmgSource is null
            </summary>
            <param name="damage"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.Initialize(Vintagestory.API.Common.IWorldAccessor,System.Int64)">
            <summary>
            Called when this entity got created or loaded
            </summary>
            <param name="world"></param>
            <param name="InChunkIndex3d"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.loadServerAnimator">
            <summary>
            Loads the server side lightweight animator (does not calcuate any transformation matrices). This one is used for correct syncing of animations.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.GetDrops(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer)">
            <summary>
            Is called before the entity is killed, should return what items this entity should drop. Return null or empty array for no drops.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="byPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.SetType(Vintagestory.API.Common.Entities.EntityType)">
            <summary>
            Sets the entity to given type
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.TeleportToDouble(System.Double,System.Double,System.Double)">
            <summary>
            Teleports the entity to given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.TeleportTo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Teleports the entity to given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.TeleportTo(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Teleports the entity to given position
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.TeleportTo(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Teleports the entity to given position
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.TeleportTo(Vintagestory.API.Common.Entities.EntityPos)">
            <summary>
            Teleports the entity to given position
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.ReceiveDamage(Vintagestory.API.Common.DamageSource,System.Single)">
            <summary>
            Called when the entity should be receiving damage from given source
            </summary>
            <param name="damageSource"></param>
            <param name="damage"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.ShouldReceiveDamage(Vintagestory.API.Common.DamageSource,System.Single)">
            <summary>
            Should return true if the entity can get damaged by given damageSource. Is called by ReceiveDamage.
            </summary>
            <param name="damageSource"></param>
            <param name="damage"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnFallToGround(System.Double)">
            <summary>
            Called when the entity collided vertically
            </summary>
            <param name="motionY"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnCollideWithLiquid">
            <summary>
            Called when the entity got in touch with a liquid
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnExitedLiquid">
            <summary>
            Called when the entity has left a liquid
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.SetName(System.String)">
            <summary>
            Sets the name of the entity. E.g. the players name for EntityPlayers
            </summary>
            <param name="playername"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnGameTick(System.Single)">
            <summary>
            Called every 1/75 second
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnEntitySpawn">
            <summary>
            Called when the entity spawns
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnInteract(Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.IItemSlot,Vintagestory.API.MathTools.Vec3d,System.Int32)">
            <summary>
            Called when an entity has interacted with this entity
            </summary>
            <param name="byEntity"></param>
            <param name="itemslot">If being interacted with a block/item, this should be the slot the item is being held in</param>
            <param name="hitPosition">Relative position on the entites hitbox where the entity interacted at</param>
            <param name="mode">0 = attack, 1 = interact</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnEntityDespawn(Vintagestory.API.Common.Entities.EntityDespawnReason)">
            <summary>
            Called when the entity despawns
            </summary>
            <param name="despawn"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnReceivedServerPos">
            <summary>
            Called by client when a new server pos arrived
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.SetHitbox(System.Single,System.Single)">
            <summary>
            Helper method to set the CollisionBox
            </summary>
            <param name="length"></param>
            <param name="height"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.AddBehavior(Vintagestory.API.Common.Entities.EntityBehavior)">
            <summary>
            Adds given behavior to the entities list of active behaviors
            </summary>
            <param name="behavior"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.RemoveBehavior(Vintagestory.API.Common.Entities.EntityBehavior)">
            <summary>
            Removes given behavior to the entities list of active behaviors. Does nothing if the behavior has already been removed
            </summary>
            <param name="behavior"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.HasBehavior(System.String)">
            <summary>
            Returns true if the entity has given active behavior
            </summary>
            <param name="behaviorName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.GetBehavior(System.String)">
            <summary>
            Returns the behavior instance for given entity. Returns null if it doesn't exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.IsActivityRunning(System.String)">
            <summary>
            Returns true if given activity is running
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.RemainingActivityTime(System.String)">
            <summary>
            Returns the remaining time on an activity in milliesconds
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.SetActivityRunning(System.String,System.Int32)">
            <summary>
            Starts an activity for a given duration
            </summary>
            <param name="key"></param>
            <param name="milliseconds"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.StartAnimation(Vintagestory.API.Common.AnimationMetaData)">
            <summary>
            Client: Starts given animation
            Server: Sends all active anims to all connected clients then purges the ActiveAnimationsByAnimCode list
            </summary>
            <param name="animdata"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.StartAnimation(System.String)">
            <summary>
            Start a new animation defined in the entity config file. If it's not defined, it won't play.
            Use StartAnimation(AnimationMetaData animdata) to circumvent the entity config anim data.
            </summary>
            <param name="configCode">Anim config code, not the animation code!</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.StopAnimation(System.String)">
            <summary>
            Stops given animation
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.SetDebugAnimsInfo">
            <summary>
            Updates the DebugAttributes tree
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.ToBytes(System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Serializes the slots contents to be stored in the SaveGame
            </summary>
            <param name="writer"></param>
            <param name="forClient">True when being used to send an entity to the client</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.FromBytes(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Loads the entity from a stored byte array from the SaveGame
            </summary>
            <param name="reader"></param>
            <param name="fromServer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.Die(Vintagestory.API.Common.EnumDespawnReason,Vintagestory.API.Common.DamageSource)">
            <summary>
            Makes the entity despawn
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.PlayEntitySound(System.String,Vintagestory.API.Common.IPlayer,System.Boolean,System.Single)">
            <summary>
            Assumes that it is only called on the server
            </summary>
            <param name="type"></param>
            <param name="dualCallByPlayer"></param>
            <param name="randomizePitch"></param>
            <param name="range"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.CanCollect(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Should return true if this item can be picked up as an itemstack
            </summary>
            <param name="byEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnCollected(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Called by BehaviorCollectEntities of nearby entities. Should return the itemstack that should be collected. If the item stack was fully picked up, BehaviorCollectEntities will kill this entity
            </summary>
            <param name="byEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnStateChanged(Vintagestory.API.Common.EnumEntityState)">
            <summary>
            Called on the server when the entity was changed from active to inactive state or vice versa
            </summary>
            <param name="beforeState"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.Notify(System.String,System.Object)">
            <summary>
            This method pings the Notify() method of all behaviors and ai tasks. Can be used to spread information to other creatures.
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.HasEmotionState(System.String)">
            <summary>
            True if given emotion state is currently set
            </summary>
            <param name="statecode"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.OnInventorySlot">
            <summary>
            Return false to stop walking the inventory
            </summary>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.IEntityAgent">
            <summary>
            A non passive, acting entity. Has some sort of motor controls and can hold items.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntityAgent.RightHandItemSlot">
            <summary>
            Returns the current right hand slot of the entity or null if it doesn't have one
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntityAgent.LeftHandItemSlot">
            <summary>
            Returns the current left hand slot of the entity or null if it doesn't have one
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntityAgent.GearInventory">
            <summary>
            Returns the current gear inventory of the entity or null if it doesn't have any
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntityAgent.WalkInventory(Vintagestory.API.Common.Entities.OnInventorySlot)">
            <summary>
            Iterates over the entities inventory. Return false in your handler to stop walking the inventory
            </summary>
            <param name="slot"></param>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntityAgent.Controls">
            <summary>
            An object that stores where the entity is currently moving or should be moving
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntityAgent.ReceiveSaturation(System.Single)">
            <summary>
            Saturates the entity by given value, reducing their hunger
            </summary>
            <param name="saturation"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntityAgent.EyeHeight">
            <summary>
            The height from where the camera is placed when being played by a player
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntityAgent.IsEyesSubmerged">
            <summary>
            True if the eyes are under water
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntityAgent.TryStopUsingHeldItem(System.Boolean,Vintagestory.API.Common.EnumItemUseCancelReason)">
            <summary>
            Attempt to stop the current using action, if any is running
            </summary>
            <param name="isCancel"></param>
            <param name="cancelReason"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.EntityBehavior">
            <summary>
            Defines a basic entity behavior that can be attached to entities
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.Notify(System.String,System.Object)">
            <summary>
            The notify method bubbled up from entity.Notify()
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EnumPlayerGroupMemberShip.TransientMember">
            <summary>
            Member, but chat window is usually not opened 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EnumPlayerGroupMemberShip.PersistentMember">
            <summary>
            Member, chat window always opened
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EnumPlayerGroupMemberShip.Op">
            <summary>
            Operator of this channel
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EnumPlayerGroupMemberShip.Owner">
            <summary>
            Owner of this channel
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.IEntity">
            <summary>
            Represents pretty much any object that is not a block
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntity.EntityId">
            <summary>
            Server wide unique identifier of this entity
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntity.World">
            <summary>
            The world this entity resides in
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntity.Pos">
            <summary>
            Position according to the client side physics simulation. For survival players this position is sent by the client to the server every 200ms.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntity.ServerPos">
            <summary>
            Position according to the server side physics simulation
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntity.LocalPos">
            <summary>
            Position according to the local side
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntity.WatchedAttributes">
            <summary>
            Properties that are synced to client
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntity.Attributes">
            <summary>
            Properties that are not synced and only local on client or server
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntity.CollisionBox">
            <summary>
            The entities boundaries with which it collides with the terrain
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntity.Die(Vintagestory.API.Common.EnumDespawnReason,Vintagestory.API.Common.DamageSource)">
            <summary>
            Causes the entity to despawn
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntity.ReceiveDamage(Vintagestory.API.Common.DamageSource,System.Single)">
            <summary>
            Damages this entity. Returns true if damage was applied
            </summary>
            <param name="damageSource"></param>
            <param name="damage"></param>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntity.Collided">
            <summary>
            True if the entity is in contact with something solid
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.IEntity.IsInteractable">
            <summary>
            True if the players picking ray should collide with this entity
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntity.CanCollect(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Return true if this entity is collectible by given entity.
            </summary>
            <param name="byEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntity.OnCollected(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Called if CanCollect() returned true. Should return the itemstack that will land in the players inventory
            </summary>
            <param name="byEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntity.SetType(Vintagestory.API.Common.Entities.EntityType)">
            <summary>
            Sets the type of this entity
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntity.PlayEntitySound(System.String,Vintagestory.API.Common.IPlayer,System.Boolean,System.Single)">
            <summary>
            Plays a preconfigured sound of this entity (from entitytype config)
            When called on Server Side: Broadcast a sound to all clients
            When called on Client side: Plays on the client
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntity.StartAnimation(Vintagestory.API.Common.AnimationMetaData)">
            <summary>
            Client: Starts given animation
            Server: Sends all active anims to all connected clients then purges the ActiveAnimationsByAnimCode list
            </summary>
            <param name="animdata"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntity.StartAnimation(System.String)">
            <summary>
            Start a new animation defined in the entity config file. If it's not defined, it won't play.
            Use StartAnimation(AnimationMetaData animdata) to circumvent the entity config anim data.
            </summary>
            <param name="configCode">Anim Config code, not the animation code!</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.IEntity.StopAnimation(System.String)">
            <summary>
            Stops given animation defined by the animation code or entity config code (both are searched for)
            </summary>
            <param name="code"></param>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.EntityType">
            <summary>
            Describes a entity type
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityType.Class">
            <summary>
            The class as registered in the ClassRegistry
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.ClientEntityConfig.FirstTexture">
            <summary>
            Returns the first texture in Textures dict
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.EntityPos">
            <summary>
            Represents all positional information of an entity, such as coordinates, motion and angles
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.AsBlockPos">
            <summary>
            Returns the position as BlockPos object
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.XYZInt">
            <summary>
            Returns the position as a Vec3i object
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.XYZ">
            <summary>
            Returns the position as a Vec3d object
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.XYZFloat">
            <summary>
            Returns the position as a Vec3f object
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InRangeOf(Vintagestory.API.Common.Entities.EntityPos,System.Int32)">
            <summary>
            Returns true if the entity is within given distance of the other entity
            </summary>
            <param name="position"></param>
            <param name="squareDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InRangeOf(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Returns true if the entity is within given distance of given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="squareDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InHorizontalRangeOf(System.Int32,System.Int32,System.Single)">
            <summary>
            Returns true if the entity is within given distance of given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="squareDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InRangeOf(System.Double,System.Double,System.Double,System.Single)">
            <summary>
            Returns true if the entity is within given distance of given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="squareDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InRangeOf(Vintagestory.API.MathTools.BlockPos,System.Single)">
            <summary>
            Returns true if the entity is within given distance of given block position
            </summary>
            <param name="pos"></param>
            <param name="squareDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InRangeOf(Vintagestory.API.MathTools.Vec3f,System.Single)">
            <summary>
            Returns true if the entity is within given distance of given position
            </summary>
            <param name="pos"></param>
            <param name="squareDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InRangeOf(Vintagestory.API.MathTools.Vec3d,System.Single,System.Single)">
            <summary>
            Returns true if the entity is within given distance of given position
            </summary>
            <param name="position"></param>
            <param name="horRangeSq"></param>
            <param name="vertRange"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SquareDistanceTo(System.Single,System.Single,System.Single)">
            <summary>
            Returns the squared distance of the entity to this position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SquareDistanceTo(System.Double,System.Double,System.Double)">
            <summary>
            Returns the squared distance of the entity to this position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SquareDistanceTo(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Returns the squared distance of the entity to this position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SquareDistanceTo(Vintagestory.API.Common.Entities.EntityPos)">
            <summary>
            Returns the squared distance of the entity to this position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.Copy">
            <summary>
            Creates a full copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.GetViewVector">
            <summary>
            Same as AheadCopy(1) - AheadCopy(0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.GetViewVector(System.Single,System.Single)">
            <summary>
            Same as AheadCopy(1) - AheadCopy(0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.AheadCopy(System.Double)">
            <summary>
            Returns a new entity position that is in front of the position the entity is currently looking at
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.HorizontalAheadCopy(System.Double)">
            <summary>
            Returns a new entity position that is in front of the position the entity is currently looking at using only the entities yaw, meaning the resulting coordinate will be always at the same y position.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.BehindCopy(System.Double)">
            <summary>
            Returns a new entity position that is behind of the position the entity is currently looking at
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.BasicallySameAs(Vintagestory.API.Common.Entities.EntityPos,System.Single)">
            <summary>
            Makes a "basiclly equals" check on the position, motions and angles using a small tolerance of epsilon=0.0001f 
            </summary>
            <param name="pos"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.BasicallySameAsIgnoreAngles(Vintagestory.API.Common.Entities.EntityPos,System.Single)">
            <summary>
            Makes a "basiclly equals" check on position and motions using a small tolerance of epsilon=0.0001f. Ignores the entities angles.
            </summary>
            <param name="pos"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SetFrom(Vintagestory.API.Common.Entities.EntityPos)">
            <summary>
            Loads the position and angles from given entity position.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SetFrom(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Loads the position from given position.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serializes all positional information
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.FromBytes(System.IO.BinaryReader)">
            <summary>
            Deserializes all positional information
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.SyncedEntityPos">
            <summary>
            Represents an EntityPos thats synced over the network using a dirty flag and regular is-dirty checks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.TrackedPlayerProperties.posY">
            <summary>
            Relative value. bottom 0...1 sealevel, 1 .... 2 max-y
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.TrackedPlayerProperties.sunSlight">
            <summary>
            0...32
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.TrackedPlayerProperties.Weather">
            <summary>
            Weather at the players position
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.TrackedPlayerProperties.Playstyle">
            <summary>
            The servers playstyle
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStack.Attributes">
            <summary>
            Attributes assigned to this particular itemstack. Modifiable.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStack.TempAttributes">
            <summary>
            Temporary Attributes assigned to this particular itemstack, not synchronized, not saved! Modifiable.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStack.ItemAttributes">
            <summary>
            Attributes assigned to the collectiable. Should not be modified.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.FixMapping(System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation},System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation},Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            If this itemstack was imported from another savegame you might want to call this method to correct the blockid/itemid for this savegame
            </summary>
            <param name="oldItemIdMapping"></param>
            <param name="worldForNewMapping"></param>
        </member>
        <member name="T:Vintagestory.API.Common.EnumHandling">
            <summary>
            Tells the engine how to handle default or subsequent similar behaviors
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumHandling.NotHandled">
            <summary>
            Do run default and subsequent behaviors
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumHandling.PreventDefault">
            <summary>
            Do not execute the default behavior, but let subsequent behaviors still execute
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumHandling.Last">
            <summary>
            Do not execute default behavior, do not let subsequent behaviors execute
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.EnumItemStorageFlags">
            <summary>
            Determines the kinds of storage types the item can be put into
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.General">
            <summary>
            Of no particular type
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Backpack">
            <summary>
            The item can be placed into a backpack slot
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Metallurgy">
            <summary>
            The item can be placed in a slot related to mining or smithing
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Jewellery">
            <summary>
            The item can be placed in a slot related to jewelcrafting
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Alchemy">
            <summary>
            The item can be placed in a slot related to alchemy
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Agriculture">
            <summary>
            The item can be placed in a slot related to farming
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Currency">
            <summary>
            Moneys
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Outfit">
            <summary>
            Clothes, Armor and Accessories
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IAssetManager">
            <summary>
            Takes care loading, reloading and managing all files inside the assets folder. All asset names and paths are always converted to lower case.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.Get(System.String)">
            <summary>
            Retrieves an asset from given path within the assets folder. Throws an exception when the asset does not exist. Remember to use lower case paths.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.Get(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Retrieves an asset from given path within the assets folder. Throws an exception when the asset does not exist. Remember to use lower case paths.
            </summary>
            <param name="Location"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.TryGet(System.String)">
            <summary>
            Retrieves an asset from given path within the assets folder. Returns null when the asset does not exist. Remember to use lower case paths.
            </summary>
            <param name="Category"></param>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.TryGet(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Retrieves an asset from given path within the assets folder. Returns null when the asset does not exist. Remember to use lower case paths.
            </summary>
            <param name="Location"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.GetMany(System.String,System.String,System.Boolean)">
            <summary>
            Returns all assets inside given category with the given path. If no domain is specified, all domains will be searched.
            </summary>
            <param name="pathBegins"></param>
            <param name="domain"></param>
            <param name="loadAsset">Whether it should load the contents of this asset</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.GetMany``1(Vintagestory.API.Common.ILogger,System.String,System.String)">
            <summary>
            Searches for all assets in given basepath and uses JSON.NET to automatically turn them into objects. Will log an error to given ILogger if it can't parse the json file and continue with the next asset. Remember to use lower case paths. If no domain is specified, all domains will be searched.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="logger"></param>
            <param name="pathBegins"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.GetLocations(System.String,System.String)">
            <summary>
            Returns all asset locations that begins with given path and domain. If no domain is specified, all domains will be searched.
            </summary>
            <param name="pathBegins"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.Get``1(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Retrieves an asset from given path within the assets folder and uses JSON.NET to automatically turn them into objects. Throws an exception when the asset does not exist or the conversion failed. Remember to use lower case paths.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.Reload(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Reloads all assets in given base location path. It returns the amount of the found locations.
            </summary>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.Reload(Vintagestory.API.Common.AssetCategory)">
            <summary>
            Reloads all assets in given base location path. It returns the amount of the found locations.
            </summary>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.GetOrigins">
            <summary>
            Returns all origins in the prority order. Highest (First) to Lowest (Last)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockShapeSupplier.OnTesselation(Vintagestory.API.Client.ITerrainMeshPool,Vintagestory.API.Client.ITesselatorAPI)">
            <summary>
            Let's you add your own meshes to a chunk. Don't reuse the meshdata instance anywhere in your code.
            Return false to use the default mesh instead.
            WARNING!
            The Tesselator runs in a seperate thread, so you have to make sure the fields and methods you access inside this method are thread safe.
            </summary>
            <param name="mesher">The chunk mesh, add your stuff here</param>
            <param name="tesselator">If you need to tesselate something, I suggest you use this tesselator, since using the main thread tesselator can cause race conditions</param>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.SpeedOfTime">
            <summary>
            This acts as a multiplier on how much faster an ingame second passes by compared to a real life second. The default is 60, hence per default a day lasts 24 minutes
            This is the sum of all modifiers
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IGameCalendar.SetTimeSpeedModifier(System.String,System.Int32)">
            <summary>
            If you want to modify the time speed, set a value here
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.HoursPerDay">
            <summary>
            Amount of hours per day
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.DaysPerYear">
            <summary>
            Amount of days per year
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.DaysPerMonth">
            <summary>
            Amount of days per month
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.SunPositionNormalized">
            <summary>
            Returns a normalized vector of the sun position
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.SunPosition">
            <summary>
            Returns a vector of the sun position
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.MoonPosition">
            <summary>
            Returns a vector of the moon position
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.DayLightStrength">
            <summary>
            Returns a value between 0 (no sunlight) and 1 (full sunlight)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.FullHourOfDay">
            <summary>
            The current hour of the day as integer
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.HourOfDay">
            <summary>
            The current hour of the day as decimal 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.TotalHours">
            <summary>
            Total passed hours since the game has started
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.TotalDays">
            <summary>
            Total passed days since the game has started
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.DayOfYear">
            <summary>
            The current day of the year (goes from 0 to DaysPerYear)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.Year">
            <summary>
            Returns the year. Every game begins with 1386
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.Season">
            <summary>
            Returns the current season
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IGameCalendar.Add(System.Single)">
            <summary>
            Adds given time to the calendar
            </summary>
            <param name="hours"></param>
        </member>
        <member name="P:Vintagestory.API.Common.IModLoader.Mods">
            <summary>
            Gets a collection of all loaded mods.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IModLoader.Systems">
            <summary>
            Gets a collection of all loaded and enabled mod systems.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IModLoader.GetMod(System.String)">
            <summary>
            Gets the loaded mod with the specified mod ID (domain).
            Returns null if no mod with that mod ID was found.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IModLoader.IsModLoaded(System.String)">
            <summary>
            Returns if the mod with the specified mod ID (domain) is loaded.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IModLoader.GetModSystem(System.String)">
            <summary>
            Gets a loaded mod system with the specified full name, that is the namespace and
            class name, for example "Vintagestory.ServerMods.Core" for the survival mod.
            Returns null if no mod with that name was found.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IModLoader.GetModSystem``1">
            <summary>
            Gets a loaded mod system with the specified type.
            Returns null if no mod of that type was found.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IModLoader.IsModSystemEnabled(System.String)">
            <summary>
            Returns if the mod system with the specified full name is loaded and enabled.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IModLoader.Logger">
            <summary>
            Can be used to log warnings/ errors
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IPlayer">
            <summary>
            Represents a player
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.CurrentBlockSelection">
            <summary>
            The block the player is currently aiming at
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.CurrentEntitySelection">
            <summary>
            The entity the player is currently aiming at
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.PlayerName">
            <summary>
            Get the players character name. The character name can be changed every 60 days in the account manager, so don't consider the players name as a unique identifier for a player. Use PlayerUID instead
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.PlayerUID">
            <summary>
            Returns the players identifier that is unique across all registered players and will never change. Use this to uniquely identify a player for all eternity. Shorthand for WorldData.PlayerUID
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.ClientId">
            <summary>
            The players current client id, 0 if not connected. This is the number thats assigned by the server for any connecting player. You probably don't need this number.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.Entity">
            <summary>
            The entity the player currently controls
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.WorldData">
            <summary>
            Some world-specific information about the player. This object is stored with the save game.
            If you modify it server side, be sure to call player.BroadcastPlayerData() to send it to affected clients.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.InventoryManager">
            <summary>
            Returns the given players inventory manager that let's you do various interesting things with the players inventory.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.Privileges">
            <summary>
            The list of privileges the player currently has access to (by role or direct assignment)
            This list is available for the playing player on the client, but not for other players.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.CollectibleObject">
            <summary>
            Contains all properties shared by Blocks and Items
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.CollectibleObject.Id">
            <summary>
            The block or item id
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.CollectibleObject.ItemClass">
            <summary>
            Block or Item?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.Code">
            <summary>
            A unique domain + code of the collectible. Must be globally unique for all items / all blocks.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.MaxStackSize">
            <summary>
            Max amount of collectible that one default inventory slot can hold
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.Durability">
            <summary>
            How many uses does this collectible has when being used. Item disappears at durability 0
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.LiquidSelectable">
            <summary>
            When true, liquids become selectable to the player when being held in hands
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.AttackPower">
            <summary>
            How much damage this collectible deals when used as a weapon
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.AttackRange">
            <summary>
            Until how for away can you attack entities using this collectibe
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.DamagedBy">
            <summary>
            From which damage sources does the item takes durability damage
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.MiningSpeed">
            <summary>
            Modifies how fast the player can break a block when holding this item
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.MiningTier">
            <summary>
            What tier this block can mine when held in hands
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.CreativeInventoryTabs">
            <summary>
            List of creative tabs in which this collectible should appear in
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.CreativeInventoryStacks">
            <summary>
            If you want to add itemstacks with custom attributes to the creative inventory, add them to this list
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.RenderAlphaTest">
            <summary>
            Alpha test value for rendering in gui, fp hand, tp hand or on the ground
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.GuiTransform">
            <summary>
            Used for scaling, rotation or offseting the block when rendered in guis
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.FpHandTransform">
            <summary>
            Used for scaling, rotation or offseting the block when rendered in the first person mode hand
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.TpHandTransform">
            <summary>
            Used for scaling, rotation or offseting the block when rendered in the third person mode hand
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.GroundTransform">
            <summary>
            Used for scaling, rotation or offseting the rendered as a dropped item on the ground
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.Attributes">
            <summary>
            Custom Attributes that's always assiociated with this item
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.CombustibleProps">
            <summary>
            Information about the blocks burnable states
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.NutritionProps">
            <summary>
            Information about the blocks nutrition states
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.Tool">
            <summary>
            If set, this item will be classified as given tool
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.StorageFlags">
            <summary>
            Determines in which kind of bags the item can be stored in
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.MaterialDensity">
            <summary>
            Determines on whether an object floats on liquids or not. Water has a density of 1000. Not yet implemented
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.HeldTpHitAnimation">
            <summary>
            The animation to play in 3rd person mod when hitting with this collectible
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.HeldTpIdleAnimation">
            <summary>
            The animation to play in 3rd person mod when holding this collectible
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.HeldTpUseAnimation">
            <summary>
            The animation to play in 3rd person mod when using this collectible
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnLoaded(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Server Side: Called once the collectible has been registered
            Client Side: Called once the collectible has been loaded from server packet
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnUnloaded(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Called when the client/server is shutting down
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetStorageFlags(Vintagestory.API.Common.ItemStack)">
            <summary>
            Should return in which storage containers this item can be placed in
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetItemDamageColor(Vintagestory.API.Common.ItemStack)">
            <summary>
            Returns a hardcoded rgb color (green->yellow->red) that is representative for its remaining durability vs total durability
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.ShouldDisplayItemDamage(Vintagestory.API.Common.IItemStack)">
            <summary>
            Return true if remaining durability != total durability
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnBeforeRender(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.ItemStack,Vintagestory.API.Client.EnumItemRenderTarget,Vintagestory.API.Client.ItemRenderInfo@)">
            <summary>
            This method is called before rendering the item stack into GUI, first person hand, third person hand and/or on the ground
            The renderinfo object is pre-filled with default values. 
            </summary>
            <param name="capi"></param>
            <param name="itemstack"></param>
            <param name="target"></param>
            <param name="renderinfo"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetDurability(Vintagestory.API.Common.IItemStack)">
            <summary>
            Returns the items remaining durability
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetAttackPower(Vintagestory.API.Common.IItemStack)">
            <summary>
            The amount of damage dealt when used as a weapon
            </summary>
            <param name="withItemStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetAttackRange(Vintagestory.API.Common.IItemStack)">
            <summary>
            The the attack range when used as a weapon
            </summary>
            <param name="withItemStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnBlockBreaking(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.IItemSlot,System.Single,System.Single)">
            <summary>
            Player is holding this collectible and breaks the targeted block
            </summary>
            <param name="player"></param>
            <param name="blockSel"></param>
            <param name="itemslot"></param>
            <param name="remainingResistance"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnBlockBrokenWith(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.IEntity,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.BlockSelection)">
            <summary>
            Player has broken a block while holding this collectible. Return false if you want to cancel the block break event.
            </summary>
            <param name="world"></param>
            <param name="byEntity"></param>
            <param name="itemslot"></param>
            <param name="blockSel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetMiningSpeed(Vintagestory.API.Common.IItemStack,Vintagestory.API.Common.Block)">
            <summary>
            Called every game tick when the player breaks a block with this item in his hands. Returns the mining speed for given block.
            </summary>
            <param name="itemstack"></param>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GeldHeldFpHitAnimation(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntity)">
            <summary>
            Not implemented yet
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetHeldTpHitAnimation(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntity)">
            <summary>
            Called when an entity uses this item to hit something in 3rd person mode
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetHeldTpIdleAnimation(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntity)">
            <summary>
            Called when an entity holds this item in hands in 3rd person mode
            </summary>
            <param name="activeHotbarSlot"></param>
            <param name="byEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetHeldTpUseAnimation(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntity)">
            <summary>
            Called when an entity holds this item in hands in 3rd person mode
            </summary>
            <param name="activeHotbarSlot"></param>
            <param name="byEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnAttackingWith(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.IEntity,Vintagestory.API.Common.IItemSlot)">
            <summary>
            An entity used this collectibe to attack something
            </summary>
            <param name="world"></param>
            <param name="byEntity"></param>
            <param name="itemslot"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnConsumedByCrafting(Vintagestory.API.Common.IItemSlot[],Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.CraftingRecipeIngredient,Vintagestory.API.Common.IPlayer,System.Int32)">
            <summary>
            Called when this collectible is being used as part of a crafting recipe and should get consumed now
            </summary>
            <param name="stackInSlot"></param>
            <param name="fromIngredient"></param>
            <param name="byPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.DamageItem(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.IEntity,Vintagestory.API.Common.IItemSlot)">
            <summary>
            Causes the item to be damaged. Will play a breaking sound and removes the itemstack if no more durability is left
            </summary>
            <param name="world"></param>
            <param name="byEntity"></param>
            <param name="itemslot"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetQuantityToolModes(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection)">
            <summary>
            Should return the amount of tool modes this collectible has
            </summary>
            <param name="slot"></param>
            <param name="byPlayer"></param>
            <param name="blockSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.DrawToolModeIcon(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,Cairo.Context,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Should draw given tool mode icon
            </summary>
            <param name="slot"></param>
            <param name="byPlayer"></param>
            <param name="blockSelection"></param>
            <param name="cr"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="toolMode"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetToolMode(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection)">
            <summary>
            Should return the current items tool mode.
            </summary>
            <param name="slot"></param>
            <param name="byPlayer"></param>
            <param name="blockSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.SetToolMode(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,System.Int32)">
            <summary>
            Should set given toolmode
            </summary>
            <param name="slot"></param>
            <param name="byPlayer"></param>
            <param name="blockSelection"></param>
            <param name="toolMode"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldRenderOpaque(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Client.IClientPlayer)">
            <summary>
            This method is called during the opaque render pass when this item or block is being held in hands
            </summary>
            <param name="inSlot"></param>
            <param name="byPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldRenderOit(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Client.IClientPlayer)">
            <summary>
            This method is called during the order independent transparency render pass when this item or block is being held in hands
            </summary>
            <param name="inSlot"></param>
            <param name="byPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldRenderOrtho(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Client.IClientPlayer)">
            <summary>
            This method is called during the ortho (for 2D GUIs) render pass when this item or block is being held in hands
            </summary>
            <param name="inSlot"></param>
            <param name="byPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldIdle(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent)">
            <summary>
            Called every frame when the player is holding this collectible in his hands. Is not called during OnUsing() or OnAttacking()
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnGroundIdle(Vintagestory.API.Common.EntityItem)">
            <summary>
            Called every game tick when this collectible lies dropped on the ground
            </summary>
            <param name="entityItem"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.InGuiIdle(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack)">
            <summary>
            Called every frame when this item is being displayed in the gui
            </summary>
            <param name="world"></param>
            <param name="stack"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldUseStart(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHeldItemUse)">
            <summary>
            General begin use access. Override OnHeldAttackStart or OnHeldInteractStart to alter the behavior.
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="useType"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldUseCancel(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumItemUseCancelReason)">
            <summary>
            General cancel use access. Override OnHeldAttackCancel or OnHeldInteractCancel to alter the behavior.
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="cancelReason"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldUseStep(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            General using access. Override OnHeldAttackStep or OnHeldInteractStep to alter the behavior.
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldUseStop(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHeldItemUse)">
            <summary>
            General use over access. Override OnHeldAttackStop or OnHeldInteractStop to alter the behavior.
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="useType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldAttackStart(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            When the player has begun using this item for attacking (left mouse click). Return true to play a custom action.
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldAttackCancel(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumItemUseCancelReason)">
            <summary>
            When the player has canceled a custom attack action.
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSelection"></param>
            <param name="entitySel"></param>
            <param name="cancelReason"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldAttackStep(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Called continously when a custom attack action is playing. Return false to stop the action.
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSelection"></param>
            <param name="entitySel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldAttackStop(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Called when a custom attack action is finished
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSelection"></param>
            <param name="entitySel"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldInteractStart(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Called when the player right clicks while holding this block/item in his hands
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldInteractStep(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Called every frame while the player is using this collectible. Return false to cancel the interaction.
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldInteractStop(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Called when the player successfully completed the using action, always called once an interaction is over
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldInteractCancel(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumItemUseCancelReason)">
            <summary>
            When the player released the right mouse button. Return false to deny the cancellation (= will keep using the item until OnUsing returns false).
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="cancelReason"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldDropped(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.IItemSlot,System.Int32,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Callback when the player dropped this item from his inventory. You can set handling to PreventDefault to prevent dropping this item.
            You can also check if the entityplayer of this player is dead to check if dropping of this item was due the players death
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="slot"></param>
            <param name="quantity">Amount of items the player wants to drop</param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetHeldItemInfo(Vintagestory.API.Common.ItemStack,System.Text.StringBuilder,Vintagestory.API.Common.IWorldAccessor,System.Boolean)">
            <summary>
            Called by the inventory system when you hover over an item stack. This is the text that is getting displayed.
            </summary>
            <param name="stack"></param>
            <param name="dsc"></param>
            <param name="world"></param>
            <param name="withDebugInfo"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.CanBePlacedInto(Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.IItemSlot)">
            <summary>
            Should return true if the stack can be placed into given slot
            </summary>
            <param name="stack"></param>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetMergableQuantity(Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.ItemStack)">
            <summary>
            Should return the max. number of items that can be placed from sourceStack into the sinkStack
            </summary>
            <param name="sinkStack"></param>
            <param name="sourceStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.TryMergeStacks(Vintagestory.API.Common.ItemStackMergeOperation)">
            <summary>
            Is always called on the sink slots item
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetMeltingDuration(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ISlotProvider,Vintagestory.API.Common.IItemSlot)">
            <summary>
            If the item is smeltable, this is the time it takes to smelt at smelting point
            </summary>
            <param name="world"></param>
            <param name="cookingSlotsProvider"></param>
            <param name="inputSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetMeltingPoint(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ISlotProvider,Vintagestory.API.Common.IItemSlot)">
            <summary>
            If the item is smeltable, this is its melting point
            </summary>
            <param name="world"></param>
            <param name="cookingSlotsProvider"></param>
            <param name="inputSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.CanSmelt(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ISlotProvider,Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.ItemStack)">
            <summary>
            Should return true if this collectible is smeltable
            </summary>
            <param name="world"></param>
            <param name="cookingSlotsProvider"></param>
            <param name="inputStack"></param>
            <param name="outputStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.DoSmelt(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ISlotProvider,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.IItemSlot)">
            <summary>
            Transform the item to it's smelted variant
            </summary>
            <param name="world"></param>
            <param name="cookingSlotsProvider"></param>
            <param name="inputSlot"></param>
            <param name="outputSlot"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.HasTemperature(Vintagestory.API.Common.IItemStack)">
            <summary>
            Returns true if the stack has a temperature attribute
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetTemperature(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack)">
            <summary>
            Returns the stacks item temperature in degree celsius
            </summary>
            <param name="world"></param>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.SetTemperature(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack,System.Single,System.Boolean)">
            <summary>
            Sets the stacks item temperature in degree celsius
            </summary>
            <param name="world"></param>
            <param name="itemstack"></param>
            <param name="temperature"></param>
            <param name="delayCooldown"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.IsEmptyBackPack(Vintagestory.API.Common.IItemStack)">
            <summary>
            Returns true if this stack is an empty backpack
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.IsBackPack(Vintagestory.API.Common.IItemStack)">
            <summary>
            Returns true if this stack is a backpack that can hold other items/blocks
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.QuantityBackPackSlots(Vintagestory.API.Common.IItemStack)">
            <summary>
            If the stack is a backpack, this returns the amount of slots it has
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.CodeWithPath(System.String)">
            <summary>
            Returns a new assetlocation with an equal domain and the given path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.CodeWithoutParts(System.Int32)">
            <summary>
            Removes componentsToRemove parts from the blocks code end by splitting it up at every occurence of a dash ('-'). Right to left.
            </summary>
            <param name="componentsToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.CodeEndWithoutParts(System.Int32)">
            <summary>
            Removes componentsToRemove parts from the blocks code beginning by splitting it up at every occurence of a dash ('-'). Left to Right
            </summary>
            <param name="componentsToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.CodeWithParts(System.String[])">
            <summary>
            Replaces the last parts from the blocks code and replaces it with components by splitting it up at every occurence of a dash ('-')
            </summary>
            <param name="components"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.CodeWithPart(System.String,System.Int32)">
            <summary>
            Replaces the last parts from the blocks code and replaces it with components by splitting it up at every occurence of a dash ('-')
            </summary>
            <param name="components"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.LastCodePart(System.Int32)">
            <summary>
            Returns the n-th code part in inverse order. If the code contains no dash ('-') the whole code is returned. Returns null if posFromRight is too high.
            </summary>
            <param name="posFromRight"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.FirstCodePart(System.Int32)">
            <summary>
            Returns the n-th code part. If the code contains no dash ('-') the whole code is returned. Returns null if posFromLeft is too high.
            </summary>
            <param name="posFromLeft"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.Equals(Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.ItemStack,System.String[])">
            <summary>
            Should return true if given stacks are equal, ignoring their stack size.
            </summary>
            <param name="thisStack"></param>
            <param name="otherStack"></param>
            <param name="ignoreAttributeSubTrees"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnStoreCollectibleMappings(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemSlot,System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation},System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation})">
            <summary>
            This method is for example called by chests when they are being exported as part of a block schematic. Has to store all the currents world id mappings so it can be correctly imported again
            </summary>
            <param name="blockIdMapping"></param>
            <param name="itemIdMapping"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.HasBehavior(System.Type,System.Boolean)">
            <summary>
            Returns true if the block has given behavior
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.HasBehavior(System.String,Vintagestory.API.Common.IClassRegistryAPI)">
            <summary>
            Returns true if the block has given behavior
            </summary>
            <param name="type"></param>
            <param name="classRegistry"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.WildCardMatch(Vintagestory.API.Common.AssetLocation[])">
            <summary>
            Returns true if any given wildcard matches the blocks code. E.g. water-* will match all water blocks
            </summary>
            <param name="wildcards"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.WildCardMatch(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Returns true if given wildcard matches the blocks code. E.g. water-* will match all water blocks
            </summary>
            <param name="wildCard"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.FastEntityAnimator">
            <summary>
            A class to play the right animations at the right time.
            Must be able to:
            - Automatically run animations based on each animations EnumEntityActivity
            - Manually be feed by an Entity to play additional animations
            Definition of a running animation:
            - The transformationMatrices for a given frame. Has to be interpolated from
              - Current 30-fps frame to next frame, depending on the current dt
              - All currently active animations
            
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.SimpleParticleProperties">
            <summary>
            A configurable implementation of IParticlePropertiesProvider
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.Animation">
            <summary>
            Represents a shape animation and can calculate the transformation matrices for each frame to be sent to the shader
            Process
            1. For each frame, for each root element, calculate the transformation matrix. Curent model matrix is identy mat.
            1.1. Get previous and next key frame. Apply translation, rotation and scale to model matrix.
            1.2. Store this matrix as animationmatrix in list
            1.3. For each child element
            1.3.1. Multiply local transformation matrix with the animation matrix. This matrix is now the curent model matrix. Go to 1 with child elements as root elems
            
            2. For each frame, for each joint
            2.1. Calculate the inverse model matrix 
            2.2. Multiply stored animationmatrix with the inverse model matrix
            
            3. done
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Animation.GenerateAllFrames(Vintagestory.API.Common.ShapeElement[],System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AnimationJoint})">
            <summary>
            Compiles the animation into a bunch of matrices, 31 matrices per frame.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.Initialize(Vintagestory.API.JsonObject)">
            <summary>
            Called right after the block behavior was created
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnHeldInteractStart(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called when the player right clicks while holding this block/item in his hands
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnHeldInteractStep(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called every frame while the player is using this collectible
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnHeldInteractStop(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called when the player successfully completed the using action, not called when successfully cancelled
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.TryPlaceBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called when the player attempts to place this block. The default behavior calls Block.DoPlaceBlock()
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="itemstack"></param>
            <param name="blockSel"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnBlockBroken(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called when a survival player has broken the block. The default behavior removes the block and spawns the block drops.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="byPlayer"></param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnPickBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            When the player has presed the middle mouse click on the block. The default behavior returns an itemstack with the block itself
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.GetDrops(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer,System.Single,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Is called before a block is broken, should return what items this block should drop. Return null or empty array for no drops. The default behavior drops whatever block.Drops is set to.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="byPlayer"></param>
            <param name="dropChanceMultiplier"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnNeighourBlockChange(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called when any of it's 6 neighbour blocks has been changed
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="neibpos"></param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.CanAttachBlockAt(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.Common.Block,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Used by torches and other blocks to check if it can attach itself to that block. The default behavior tests for SideSolid[blockFace.Index]
            </summary>
            <param name="world"></param>
            <param name="block"></param>
            <param name="pos"></param>
            <param name="blockFace"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.CanCreatureSpawnOn(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Entities.EntityType,Vintagestory.API.Common.Entities.BaseSpawnConditions,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Should return if supplied entitytype is allowed to spawn on this block
            </summary>
            <param name="blockAccessor"></param>
            <param name="pos"></param>
            <param name="type"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.GetRotatedBlockCode(System.Int32,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            For any block that can be rotated, this method should be implemented to return the correct rotated block code. It is used by the world edit tool for allowing block data rotations
            </summary>
            <param name="angle"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.GetVerticallyFlippedBlockCode(Vintagestory.API.Common.EnumHandling@)">
            <summary>
            For any block that can be flipped upside down, this method should be implemented to return the correctly flipped block code. It is used by the world edit tool for allowing block data rotations
            </summary>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.GetHorizontallyFlippedBlockCode(Vintagestory.API.MathTools.EnumAxis,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            For any block that can be flipped vertically, this method should be implemented to return the correctly flipped block code. It is used by the world edit tool for allowing block data rotations
            </summary>
            <param name="axis"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.IsReplacableBy(Vintagestory.API.Common.Block,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Used to determine if a block should be treated like air when placing blocks. (e.g. used for tallgrass)
            </summary>
            <param name="block"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.ShouldReceiveClientGameTicks(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Everytime the player moves by 8 blocks (or rather leaves the current 8-grid), a scan of all blocks 32x32x32 blocks around the player is initiated
            and this method is called. If the method returns true, the block is registered to a client side game ticking for spawning particles and such.
            This method will be called everytime the player left his current 8-grid area. 
            
            The default behavior is to return true if block.ParticleProperties are set
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="pos"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnBlockRemoved(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Always called when a block has been removed through whatever method, except during worldgen or via ExchangeBlock()
            For Worldgen you might be able to use TryPlaceBlockForWorldGen() to attach custom behaviors during placement/removal
            
            The default behavior is to delete the block entity, if this block has any
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnPlayerBlockInteract(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            When a player does a right click while targeting this placed block. Should return true if the event is handled, so that other events can occur, e.g. eating a held item if the block is not interactable with.
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnLoaded(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Server Side: Called once the collectible has been registered
            Client Side: Called once the collectible has been loaded from server packet
            </summary>
            <param name="api"></param>
        </member>
        <member name="T:Vintagestory.API.Common.IBlockAccessorRevertable">
            <summary>
            Provides read/write access to the blocks of a world. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessorRevertable.Relight">
            <summary>
            Whether or not to do relighting on the chunk
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessorRevertable.CurrentyHistoryState">
            <summary>
            0 = working on latest version, 1 = undo used one time, 2 = undo used 2 times, etc.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessorRevertable.ChangeHistoryState(System.Int32)">
            <summary>
            1 = perform 1 undo 
            -1 = perform 1 redo
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessorRevertable.QuantityHistoryStates">
            <summary>
            Maximum Amount of undos you can perform. More states means more memory usage.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessorRevertable.AvailableHistoryStates">
            <summary>
            Amount of currently stored history states
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessorRevertable.SetHistoryStateBlock(System.Int32,System.Int32,System.Int32,System.UInt16,System.UInt16)">
            <summary>
            Manually set the history state of a block for the to-be-comitted history state
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <param name="oldBlockId"></param>
            <param name="newBlockId"></param>
        </member>
        <member name="T:Vintagestory.API.Common.EnumBlockMaterial">
            <summary>
            Material of which a block my be made of
            Currently only used for for mining speed for tools
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.EnumPlayStyle">
            <summary>
            The playstyle that can be selected in the world creation screen
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ILogger">
            <summary>
            Interface to the clients and servers event/debug/error logging utilty
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.AddListener(Vintagestory.API.Common.LogEntryDelegate)">
            <summary>
            Adds a log entry listener to be called everytime a log entry has been addded
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Log(Vintagestory.API.Common.EnumLogType,System.String,System.Object[])">
            <summary>
            Add a log entry
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Build(System.String,System.Object[])">
            <summary>
            Adds a build log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Chat(System.String,System.Object[])">
            <summary>
            Adds a chat log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.VerboseDebug(System.String,System.Object[])">
            <summary>
            Adds a verbose debug log entry (these are only logged to file and not sent to console)
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Adds a debug log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Notification(System.String,System.Object[])">
            <summary>
            Adds a notification log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Warning(System.String,System.Object[])">
            <summary>
            Adds a warning log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Error(System.String,System.Object[])">
            <summary>
            Adds a error log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Adds a fatal error log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Event(System.String,System.Object[])">
            <summary>
            Adds an event log entry. These are showing to the player when he's starting a singpleplayer server
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="T:Vintagestory.API.Common.IParticlePropertiesProvider">
            <summary>
            Represents a provider of particle properties to be used when generating a particle
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.Init(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Called before the particle provider is used for particle creation
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.BeginParticle">
            <summary>
            Called just before a new particle is being created. You can use this to produce e.g. alternating kinds of particles
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.DieInLiquid">
            <summary>
            Whether the particle should despawn when in contact with liquids
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.DieInAir">
            <summary>
            Whether the particle should despawn when in contact with air (e.g. for water bubbles)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetQuantity">
            <summary>
            How many particles should spawn? For every particle spawned, all of belows methods are called once. E.g. if quantity is 10, GetPos(), GetVelocity(),... is called 10 times. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetPos">
            <summary>
            Position in the world where the particle should spawn
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetVelocity(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            In what direction should the particle fly/fall
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetRgbaColor">
            <summary>
            Rgba Color, one byte per channel. You can e.g. use ColorUtil.ToBytes(ColorUtil.ColorFromArgb(255, 0, 200, 50)) to for a more readable color selection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.ColorByBlock">
            <summary>
            If true GetRgbaColor() is ignored and instead uses the given blocks texture as color reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetOpacityEvolve">
            <summary>
            Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1
            </summary>
            <param name="lifetimeLeft"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetRedEvolve">
            <summary>
            Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1
            </summary>
            <param name="lifetimeLeft"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetGreenEvolve">
            <summary>
            Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1
            </summary>
            <param name="lifetimeLeft"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetBlueEvolve">
            <summary>
            Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1
            </summary>
            <param name="lifetimeLeft"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.ParticleModel">
            <summary>
            Cube or Quad?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetSize">
            <summary>
            Size of the particle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetSizeEvolve">
            <summary>
            Size change over time
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetVelocityEvolve">
            <summary>
            Velocity change over time (acts as a multiplier to the velocity)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetGravityEffect">
            <summary>
            How strongly the particle is affected by gravity (0 = no gravity applied)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetLifeLength">
            <summary>
            How long the particle should live (default = 1)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetGlowLevel">
            <summary>
            Value between 0 and 16 to determine glowiness of the particle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.SelfPropelled">
            <summary>
            If true, a particle will restore it's initial velocity once it's obstruction has been cleared
            e.g. Smokes will start flying upwards again if is currently stuck under a block and the block is removed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.TerrainCollision">
            <summary>
            If true, the particle will collide with the terrain
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.ToBytes(System.IO.BinaryWriter)">
            <summary>
            For sending over the network
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            For reading from the network
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetSecondarySpawnInterval">
            <summary>
            Determines the interval of time that must elapse during it's parent particle's lifetime before this one will spawn.
            This is only honored if this particle is defined as a secondary particle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetSecondaryParticles">
            <summary>
            The secondary particle properties. Secondary particles are particles that are emitted from an in-flight particle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.PrepareForSecondarySpawn(Vintagestory.API.Common.IParticleInstance)">
            <summary>
            Updates instance related state for secondary particles based on the given parent particle instance
            </summary>
            <param name="particleInstance">The parent IParticleInstance from which this secondary particle is being spawned</param>
        </member>
        <member name="T:Vintagestory.API.Common.IPlatform">
            <summary>
            Methods to access platform native stuff
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ClimateCondition">
            A climate condition at a given position
        </member>
        <member name="F:Vintagestory.API.Common.ClimateCondition.Temperature">
            <summary>
            Between -20 and +40 degrees
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ClimateCondition.Rainfall">
            <summary>
            Nomalized value between 0..1
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ClimateCondition.Fertility">
            <summary>
            Nomalized value between 0..1
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ClimateCondition.ForestDensity">
            <summary>
            Nomalized value between 0..1
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ClimateCondition.ShrubDensity">
            <summary>
            Nomalized value between 0..1
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.EnumLightLevelType">
            <summary>
            Used in blockAccessor.GetLightLevel() to determine what kind of light level you want
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumLightLevelType.OnlyBlockLight">
            <summary>
            Will get you just the block light
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumLightLevelType.OnlySunLight">
            <summary>
            Will get you just the sun light unaffected by the day/night cycle
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumLightLevelType.MaxLight">
            <summary>
            Will get you max(sunlight, blocklight)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumLightLevelType.MaxTimeOfDayLight">
            <summary>
            Will get you max(sunlight * sunbrightness, blocklight)
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IBlockAccessor">
            <summary>
            Provides read/write access to the blocks of a world
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.ChunkSize">
            <summary>
            Width, Length and Height of a chunk
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.RegionSize">
            <summary>
            Width and Length of a region in blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.MapSizeX">
            <summary>
            X Size of the world in blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.MapSizeY">
            <summary>
            Y Size of the world in blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.MapSizeZ">
            <summary>
            Z Size of the world in blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.MapSize">
            <summary>
            Size of the world in blocks
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetChunk(System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieve chunk at given chunk position (= divide block position by chunk size)
            </summary>
            <param name="chunkX"></param>
            <param name="chunkY"></param>
            <param name="chunkZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetMapRegion(System.Int32,System.Int32)">
            <summary>
            Retrieves a map region at given region position
            </summary>
            <param name="regionX"></param>
            <param name="regionZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetChunkAtBlockPos(System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieve chunk at given block position
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlockId(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the block id of the block at the given world coordinate
            </summary>
            <param name = "x">x coordinate</param>
            <param name = "y">y coordinate</param>
            <param name = "z">z coordinate</param>
            <returns>ID of the block at the given position. Returns 0 for Airblocks or invalid/unloaded coordinates</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlockId(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Get the block id of the block at the given world coordinate
            </summary>
            <param name="pos"></param>
            <returns>ID of the block at the given position. Returns 0 for Airblocks or invalid/unloaded coordinates</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the block type of the block at the given world coordinate. Will never return null. For airblocks or invalid coordinates you'll get a block instance with block code "air" and id 0
            </summary>
            <param name = "x">x coordinate</param>
            <param name = "y">y coordinate</param>
            <param name = "z">z coordinate</param>
            <returns>ID of the block at the given position</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlock(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Get block type at given world coordinate. Will never return null. For airblocks or invalid coordinates you'll get a block instance with block code "air" and id 0
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.WalkBlocks(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Action{Vintagestory.API.Common.Block,Vintagestory.API.MathTools.BlockPos},System.Boolean)">
            <summary>
            A bulk block checking method. Less overhead than when calling GetBlock(pos) many times. Currently used for more efficient collision testing.
            </summary>
            <param name="minPos"></param>
            <param name="maxPos"></param>
            <param name="onBlock">The method in which you want to check for the block, whatever it may be</param>
            <param name="centerOrder">If true, the blocks will be ordered by the distance to the center position</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.SetBlock(System.UInt16,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.ItemStack)">
            <summary>
            Set a block at the given position. Use blockid 0 to clear that position from any blocks. Marks the chunk dirty so that it gets saved to disk during shutdown or next autosave.
            </summary>
            <param name="blockId"></param>
            <param name="pos"></param>
            <param name="byItemstack">If set then it will be passed onto the block.OnBlockPlaced method</param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.ExchangeBlock(System.UInt16,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Set a block at the given position without calling OnBlockRemoved or OnBlockPlaced, which prevents any block entity from being removed or placed. Marks the chunk dirty so that it gets saved to disk during shutdown or next autosave.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.BreakBlock(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer,System.Single)">
            <summary>
            Removes the block at given position and calls Block.GetDrops(), Block.OnBreakBlock() and Block.OnNeighourBlockChange() for all neighbours. Drops the items that are return from Block.GetDrops()
            </summary>
            <param name="pos"></param>
            <param name="byPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.DamageBlock(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing,System.Single)">
            <summary>
            Client Side: Will render the block breaking decal on that block. If the remaining block resistance reaches 0, will call break block
            Server Side: Broadcasts a package to all nearby clients to update the block damage of this block for rendering the decal (note: there is currently no server side list of current block damages, these are client side only at the moemnt)
            </summary>
            <param name="pos"></param>
            <param name="facing"></param>
            <param name="damage"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlock(System.Int32)">
            <summary>
            Get the Block object of a certain block ID. Returns null when not found.
            </summary>
            <param name = "blockId">The block ID to search for</param>
            <returns>BlockType object</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlock(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Get the Block object of for given block code. Returns null when not found.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.SpawnBlockEntity(System.String,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.ItemStack)">
            <summary>
            Spawn block entity at this position. Does not place it's corresponding block, you have to this yourself.
            </summary>
            <param name="classname"></param>
            <param name="position"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.RemoveBlockEntity(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Permanently removes any block entity at this postion. Does not remove it's corresponding block, you have to do this yourself. Marks the chunk dirty so that it gets saved to disk during shutdown or next autosave.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlockEntity(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Retrieve the block entity at given position. Returns null if there is no block entity at this position
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.IsValidPos(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if the position is inside the maps boundaries
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.IsValidPos(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Checks if the position is inside the maps boundaries
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.IsNotTraversable(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if this position can be traversed by a normal player (returns false for outside map or not yet loaded chunks)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.IsNotTraversable(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Checks if this position can be traversed by a normal player (returns false for outside map or not yet loaded chunks)
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.Commit">
            <summary>
            Calling this method has no effect in normal block acessors except for:
            - Bulk update block accessor: Sets all blocks, relight all affected one chunks in one go and send blockupdates to clients in a packed format.
            - World gen block accessor: To Recalculate the heightmap in of all updated blocks in one go 
            - Revertable block accessor: Same as bulk update block accessor plus stores a new history state.
            </summary>
            <returns>List of changed blocks</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.Rollback">
            <summary>
            For the bulk update block accessor reverts all the SetBlocks currently called since the last Commit()
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.MarkBlockEntityDirty(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Server side call: Resends the block entity data (if present) to all clients. Triggers a block changed event on the client once received , but will not redraw the chunk. Marks also the chunk dirty so that it gets saved to disk during shutdown or next autosave.
            Client side call: No effect
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.MarkBlockUpdated(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Server side call: Triggers the method OnNeighourBlockChange() to all neighbour blocks at given position
            Client side call: No effect.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.MarkBlockDirty(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Server side: Triggers a OnNeighourBlockChange on that position and sends that block to the client (via bulk packet), through that packet the client will do a SetBlock on that position (which triggers a redraw if oldblockid != newblockid).
            Client side: Triggers a block changed event and will always redraw the chunk
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetLightLevel(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumLightLevelType)">
            <summary>
            Returns the light level (0..32) at given position. If the chunk at that position is not loaded this method will return the default sunlight value
            </summary>
            <param name="pos"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetLightRGBs(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the light values at given position. XYZ component = block light rgb, W component = sun light brightness
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetLightRGBs(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the light values at given position. XYZ component = block light rgb, W component = sun light brightness
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetTerrainMapheightAt(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the topmost solid surface position at given x/z coordinate
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetMapChunkAtBlockPos(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the map chunk at given block position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetClimateAt(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the positions current climate conditions
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.IWorldPlayerData">
            <summary>
            Some world-specific information about a connected player. If you want modify any value, also broadcast the playerdata to all connected clients.
            This is the object that stored and loaded with the save game
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.PlayerUID">
            <summary>
            The players unique identifier
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.EntityPlayer">
            <summary>
            The player entity this player is currently controlling
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.EntityControls">
            <summary>
            The controls that moves around the EntityPlayer
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.LastApprovedViewDistance">
            <summary>
            The players viewing distance in blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.CurrentGameMode">
            <summary>
            The players current game mode. Will return Spectator mode while the player is connecting.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.FreeMove">
            <summary>
            Whether the player can freely fly around
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.FreeMovePlaneLock">
            <summary>
            Whether the player is forcefully kept on vertical or horizontal plane during freemove
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.NoClip">
            <summary>
            Affected by collision boxes or not
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.MoveSpeedMultiplier">
            <summary>
            The players movement speed
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.PickingRange">
            <summary>
            Range of selectable blox
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.AreaSelectionMode">
            <summary>
            Block selection mode
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.DidSelectSkin">
            <summary>
            Client: Always false
            Server: True when the player has selected his skin (one time thing when a player first times a server)
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IPlayerInventoryManager">
            <summary>
            Let's you do various interesting things with the players inventory.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayerInventoryManager.ActiveTool">
            <summary>
            If the player currently holds a tool in his hands, this value will be set
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayerInventoryManager.ActiveHotbarSlotNumber">
            <summary>
            The players currently active hot bar slot
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayerInventoryManager.ActiveHotbarSlot">
            <summary>
            Returns the currently selected hotbar slot. Might return null if there is no hotbar!
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayerInventoryManager.Inventories">
            <summary>
            List of inventories currently available to the player (may however not be opened)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayerInventoryManager.MouseItemSlot">
            <summary>
            Returns the slot that holds the currently dragged itemstack
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.NotifySlot(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.ItemSlot)">
            <summary>
            Produces a visual cue on given slot, if it's currently part of an inventory and visible to the player
            If called on server side, the server will send a network packet to notify the client.
            </summary>
            <param name="slot"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetInventoryName(System.String)">
            <summary>
            Returns the full inventory id for given inventory class name, e.g. GlobalConstants.creativeInvClassName
            </summary>
            <param name="inventoryClassName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetOwnInventory(System.String)">
            <summary>
            Same as GetInventory() with playeruid appended to the inventoryClassName
            </summary>
            <param name="inventoryClassName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetInventory(System.String)">
            <summary>
            Retrieve a players inventory
            </summary>
            <param name="inventoryId"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetHotbarItemstack(System.Int32)">
            <summary>
            Gets the itemstack that in the given slot number of the players hotbar
            </summary>
            <param name="slotId"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetBestSuitedHotbarSlot(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.IInventory,Vintagestory.API.Common.ItemSlot)">
            <summary>
            Returns a slot that would best fit the contents of the source slot. Only tries to place the itemstack into the hotbar.
            </summary>
            <param name="sourceInventory"></param>
            <param name="sourceSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetHotbarInventory">
            <summary>
            Returns the hotbar inventory object. Obvious comment is being obvious.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetBestSuitedSlot(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.ItemSlot,System.Boolean,System.Collections.Generic.List{Vintagestory.API.Common.IItemSlot})">
            <summary>
            Returns a slot that would best fit the contents of the source slot. This checks all inventories currently opened by the player.
            </summary>
            <param name="sourceSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.TryTransferItemFrom(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@,System.Boolean,System.Boolean)">
            <summary>
            Tries to move away items from the source slot into any other slot of another inventory
            </summary>
            <param name="sourceSlot"></param>
            <param name="op"></param>
            <param name="onlyPlayerInventory">Forces to place the item only into the players personal inventory</param>
            <returns>One or more client packets that may be sent to the server for synchronisation</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.TryGiveItemstack(Vintagestory.API.Common.ItemStack,System.Boolean)">
            <summary>
            Tries to add given itemstack to the players inventory
            </summary>
            <param name="itemstack"></param>
            <param name="slotNotifyEffect"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.OpenInventory(Vintagestory.API.Common.IInventory)">
            <summary>
            Notifies the inventory manager that the player has opened an inventory. Should always be called on both sides (client and server).
            Only then interaction with other inventories becomes possible
            </summary>
            <param name="inventory"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.CloseInventory(Vintagestory.API.Common.IInventory)">
            <summary>
            Notifies the inventory manager that the player has closed an inventory. Should always be called on both sides (client and server). After closing interaction with given inventory becomes no longer possible until reopened
            </summary>
            <param name="inventory"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.HasInventory(Vintagestory.API.Common.IInventory)">
            <summary>
            Shorthand for Inventories.ContainsValue(inventory)
            </summary>
            <param name="inventory"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.DiscardAll">
            <summary>
            Will discard all of the players inventory contents
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.OnDeath">
            <summary>
            Will drop all of the players inventory contents
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.Blocks">
            <summary>
            Holds all the blockids for each coordinate, access via index: (y * chunksize + z) * chunksize + x
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.Light">
            <summary>
            Lowest 5 bits: Sun brightness, Next 5 bits: Block brightness, Highest 6 bits: Block hue 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.LightSat">
            <summary>
            Holds 3 saturation bits, the other upper 5 bits are unused. 
            Useful applications for the unused bits: 
            - 3 bits for water level for water permissible blocks, like fences: http://www.minecraftforum.net/forums/minecraft-discussion/suggestions/67465-water-should-flow-through-fences
            - 1-2 bits Damage value? 
            - 1 bit if the player placed this block or whether it was part of worldgen
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.Entities">
            <summary>
            An array holding all Entities currently residing in this chunk. This array may be larger than the amount of entities in the chunk. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.EntitiesCount">
            <summary>
            Actual count of entities in this chunk
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.BlockEntities">
            <summary>
            An array holding block Entities currently residing in this chunk. This array may be larger than the amount of block entities in the chunk. 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.Unpack">
            <summary>
            Blockdata and Light might be compressed, always call this method if you want to access these
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.MarkDirty">
            <summary>
            Marks this chunk as modified. If called on server side it will be stored to disk, if called on client it will be redrawn
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.LightPositions">
            <summary>
            Returns a list of a in-chunk indexed positions of all light sources in this chunk
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IWorldAccessor">
            <summary>
            Important interface to access the game world.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Api">
            <summary>
            The api interface
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.LoadedChunkIndices">
            <summary>
            Returns a list all loaded chunk positions in the form of a long index. Code to turn that into x/y/z coords:
            Vec3i coords = new Vec3i(
               (int)(chunkIndex3d % ChunkMapSizeX),
               (int)(chunkIndex3d / (ChunkMapSizeX * ChunkMapSizeZ)),
               (int)((chunkIndex3d / ChunkMapSizeX) % ChunkMapSizeZ)
            );
            Retrieving the list is not a very fast process, not suggested to be called every frame
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.BlockLightLevels">
            <summary>
            The currently configured block light brightness levels
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.SunLightLevels">
            <summary>
            The currently configured sun light brightness levels
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.SeaLevel">
            <summary>
            The currently configured sea level (y-coordinate)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.SunBrightness">
            <summary>
            The currently configured max sun light level
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.EntityDebugMode">
            <summary>
            Whether the current side (client/server) is in entity debug mode
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.AssetManager">
            <summary>
            Loaded game assets
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Logger">
            <summary>
            Logging Utility
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Side">
            <summary>
            The current side (client/server)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.BlockAccessor">
            <summary>
            Relaxed block access to the worlds block data
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.BulkBlockAccessor">
            <summary>
            Relaxed bulk block access to the worlds block data. Since this is a single bulk block access instance the cached data is shared for everything accessing this method, hence should only be accessed from the main thread and any changed comitted within the same game tick. You can however use the WorldManager api to get your own instance of a bulk block accessor
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.ClassRegistry">
            <summary>
            Interface to create instance of certain classes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Calendar">
            <summary>
            Interface to access the game calendar
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.CollisionTester">
            <summary>
            For collision testing in the main thread
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Rand">
            <summary>
            Just a random number generator (just a new Random())
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.ElapsedMilliseconds">
            <summary>
            Amount of milliseconds ellapsed since startup
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Blocks">
            <summary>
            List of all loaded blocks. Some may be null or placeholders (then block.code is null).
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Items">
            <summary>
            List of all loaded items. Some may be null or placeholders (then item.code is null)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.EntityTypes">
            <summary>
            List of all loaded entity types. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.GridRecipes">
            <summary>
            List of all loaded crafting recipes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Alloys">
            <summary>
            List of all loaded metal alloys
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.SmithingRecipes">
            <summary>
            List of all loaded smithing recipes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.KnappingRecipes">
            <summary>
            List of all loaded knapping recipes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.ClayFormingRecipes">
            <summary>
            List of all loaded clay forming recipes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.DefaultEntityTrackingRange">
            <summary>
            The range in blocks within a client will receive regular updates for an entity
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetItem(System.Int32)">
            <summary>
            Retrieve the item class from given item id
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetBlock(System.UInt16)">
            <summary>
            Retrieve the block class from given block id
            </summary>
            <param name="blockId"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetItem(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Retrieve the item class from given item code. Will return null if the item does not exist.
            </summary>
            <param name="itemCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetBlock(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Retrieve the block class from given block code. Will return null if the block does not exist.
            </summary>
            <param name="blockCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetEntityType(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Retrieve the entity class from given entity code. Will return null if the entity does not exist.
            </summary>
            <param name="entityCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetWeatherAtPosition(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            The current weather for each weather pattern. A value of 0 denotes in active, a value of 1 denotes strongly active
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SpawnItemEntity(Vintagestory.API.Common.ItemStack,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Spawns a dropped itemstack at given position. Will immediately disappear if stacksize==0
            </summary>
            <param name="itemstack"></param>
            <param name="position"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SpawnEntity(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Creates a new entity. It's the responsibility of the given Entity to call set it's EntityType.
            This should be done inside it's Initialize method before base.Initialize is called.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetEntitiesAround(Vintagestory.API.MathTools.Vec3d,System.Single,System.Single,Vintagestory.API.Common.ActionConsumable{Vintagestory.API.Common.Entities.Entity})">
            <summary>
            Retrieve all entities within given range and given matcher method
            </summary>
            <param name="position"></param>
            <param name="horRange"></param>
            <param name="vertRange"></param>
            <param name="matches"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetPlayersAround(Vintagestory.API.MathTools.Vec3d,System.Single,System.Single,Vintagestory.API.Common.ActionConsumable{Vintagestory.API.Common.IPlayer})">
            <summary>
            Retrieve all players within given range and given matcher method. This method is faster than when using GetEntitiesAround with a matcher for players
            </summary>
            <param name="position"></param>
            <param name="horRange"></param>
            <param name="vertRange"></param>
            <param name="matches"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetNearestEntity(Vintagestory.API.MathTools.Vec3d,System.Single,System.Single,Vintagestory.API.Common.ActionConsumable{Vintagestory.API.Common.Entities.Entity})">
            <summary>
            Retrieve the nearest entity within given range and given matcher method
            </summary>
            <param name="position"></param>
            <param name="horRange"></param>
            <param name="vertRange"></param>
            <param name="matches"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetIntersectingEntities(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.Cuboidf[])">
            <summary>
            Retrieves the first found entity that intersects any of the supplied collisionboxes offseted by basePos. This is a helper method for you to determine if you can place a block at given position. You can also implement it yourself with intersection testing and GetEntitiesAround()
            </summary>
            <param name="collisionBoxes"></param>
            <param name="basePos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.NearestPlayer(System.Double,System.Double,System.Double)">
            <summary>
            Find the nearest player to the given position
            </summary>
            <param name = "x">x coordinate</param>
            <param name = "y">y coordinate</param>
            <param name = "z">z coordinate</param>
            <returns>ID of the nearest player</returns>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.AllOnlinePlayers">
            <summary>
            Gets a list of all online players. 
            </summary>
            <returns>Array containing the IDs of online players</returns>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.AllPlayers">
            <summary>
            Gets a list of all players that connected to this server at least once. When called client side you will receive the same as AllOnlinePlayers
            </summary>
            <returns>Array containing the IDs of online players</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlayerByUid(System.String)">
            <summary>
            Retrieves the worldplayer data object of given player. When called server side the player does not need to be connected.
            </summary>
            <param name="playerUid"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlaySoundAt(Vintagestory.API.Common.AssetLocation,System.Double,System.Double,System.Double,Vintagestory.API.Common.IPlayer,System.Boolean,System.Single,System.Single)">
            <summary>
            Plays given sound at given position.
            </summary>
            <param name="location"></param>
            <param name="posx"></param>
            <param name="posy"></param>
            <param name="posz"></param>
            <param name="dualCallByPlayer">If this call is made on client and on server, set this the causing playerUID to prevent double playing. Essentially dualCall will play the sound on the client, and send it to all other players except source client</param>
            <param name="randomizePitch"></param>
            <param name="range">The range at which the gain will be attenuated to 1% of the supplied volume</param>
            <param name="volume"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlaySoundAt(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.Entities.IEntity,Vintagestory.API.Common.IPlayer,System.Boolean,System.Single,System.Single)">
            <summary>
            Plays given sound at given position.
            </summary>
            <param name="location"></param>
            <param name="atEntity"></param>
            <param name="dualCallByPlayer">If this call is made on client and on server, set this the causing playerUID to prevent double playing. Essentially dualCall will play the sound on the client, and send it to all other players except source client</param>
            <param name="randomizePitch"></param>
            <param name="range">The range at which the gain will be attenuated to 1% of the supplied volume</param>
            <param name="volume"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlaySoundAt(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.IPlayer,System.Boolean,System.Single,System.Single)">
            <summary>
            Plays given sound at given player position.
            </summary>
            <param name="location"></param>
            <param name="atPlayer"></param>
            <param name="dualCallByPlayer">If this call is made on client and on server, set this the causing playerUID to prevent double playing. Essentially dualCall will play the sound on the client, and send it to all other players except source client</param>
            <param name="randomizePitch"></param>
            <param name="range">The range at which the gain will be attenuated to 1% of the supplied volume</param>
            <param name="volume"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SpawnParticles(System.Single,System.Int32,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3f,Vintagestory.API.MathTools.Vec3f,System.Single,System.Single,System.Single,Vintagestory.API.Common.EnumParticleModel,Vintagestory.API.Common.IPlayer)">
            <summary>
            Spawn a bunch of particles
            </summary>
            <param name="quantity"></param>
            <param name="color"></param>
            <param name="minPos"></param>
            <param name="maxPos"></param>
            <param name="minVelocity"></param>
            <param name="maxVelocity"></param>
            <param name="lifeLength"></param>
            <param name="gravityEffect"></param>
            <param name="scale"></param>
            <param name="model"></param>
            <param name="dualCallByPlayer">If this call is made on client and on server, set this the causing playerUID to prevent double spawning. Essentially dualCall will spawn the particles on the client, and send it to all other players except source client</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SpawnParticles(Vintagestory.API.Common.IParticlePropertiesProvider,Vintagestory.API.Common.IPlayer)">
            <summary>
            Spawn a bunch of particles
            </summary>
            <param name="particlePropertiesProvider"></param>
            <param name="dualCallByPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SpawnBlockVoxelParticles(Vintagestory.API.MathTools.Vec3d,Vintagestory.API.Common.Block,System.Single,System.Int32,System.Single,Vintagestory.API.Common.IPlayer)">
            <summary>
            Spawn a bunch of particles colored by given block texture
            </summary>
            <param name="pos"></param>
            <param name="block"></param>
            <param name="radius"></param>
            <param name="quantity"></param>
            <param name="scale"></param>
            <param name="dualCallByPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SpawnItemVoxelParticles(Vintagestory.API.MathTools.Vec3d,Vintagestory.API.Common.Item,System.Single,System.Int32,System.Single,Vintagestory.API.Common.IPlayer)">
            <summary>
            Spawn a bunch of particles colored by given block texture
            </summary>
            <param name="pos"></param>
            <param name="item"></param>
            <param name="radius"></param>
            <param name="quantity"></param>
            <param name="scale"></param>
            <param name="dualCallByPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RayTraceForSelection(Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.Common.BlockSelection@,Vintagestory.API.Common.EntitySelection@,Vintagestory.API.MathTools.BlockFilter)">
            <summary>
            Shoots out a virtual ray at between given positions and stops when the ray hits a block or entity selection box. The block/entity it struck first is then returned by reference.
            </summary>
            <param name="fromPos"></param>
            <param name="toPos"></param>
            <param name="blockSelection"></param>
            <param name="entitySelection"></param>
            <param name="filter">Can be used to ignore certain blocks</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RayTraceForSelection(Vintagestory.API.MathTools.IWorldIntersectionSupplier,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.Common.BlockSelection@,Vintagestory.API.Common.EntitySelection@,Vintagestory.API.MathTools.BlockFilter)">
            <summary>
            Shoots out a virtual ray at between given positions and stops when the ray hits a block or entity intersection box supplied by given supplier. The block/entity it struck first is then returned by reference.
            </summary>
            <param name="supplier"></param>
            <param name="fromPos"></param>
            <param name="toPos"></param>
            <param name="blockSelection"></param>
            <param name="entitySelection"></param>
            <param name="filter">Can be used to ignore certain blocks</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RayTraceForSelection(Vintagestory.API.MathTools.Vec3d,System.Single,System.Single,System.Single,Vintagestory.API.Common.BlockSelection@,Vintagestory.API.Common.EntitySelection@,Vintagestory.API.MathTools.BlockFilter)">
            <summary>
            Shoots out a virtual ray at given position and angle and stops when the ray hits a block or entity selection box. The block/entity it struck first is then returned by reference.
            </summary>
            <param name="fromPos"></param>
            <param name="pitch"></param>
            <param name="yaw"></param>
            <param name="range"></param>
            <param name="blockSelection"></param>
            <param name="entitySelection"></param>
            <param name="filter">Can be used to ignore certain blocks</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RayTraceForSelection(Vintagestory.API.MathTools.Ray,Vintagestory.API.Common.BlockSelection@,Vintagestory.API.Common.EntitySelection@,Vintagestory.API.MathTools.BlockFilter)">
            <summary>
            Shoots out a given ray and stops when the ray hits a block or entity selection box. The block/entity it struck first is then returned by reference.
            </summary>
            <param name="ray"></param>
            <param name="blockSelection"></param>
            <param name="entitySelection"></param>
            <param name="filter">Can be used to ignore certain blocks</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RegisterGameTickListener(Vintagestory.API.Common.Action{System.Single},System.Int32)">
            <summary>
            Calls given method after every given interval until unregistered. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnGameTick"></param>
            <param name="millisecondInterval"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.UnregisterGameTickListener(System.Int64)">
            <summary>
            Removes a game tick listener
            </summary>
            <param name="listenerId"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RegisterCallback(Vintagestory.API.Common.Action{System.Single},System.Int32)">
            <summary>
            Calls given method after supplied amount of milliseconds. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnTimePassed"></param>
            <param name="millisecondDelay"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RegisterCallbackUnique(Vintagestory.API.Common.Action{Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single},Vintagestory.API.MathTools.BlockPos,System.Int32)">
            <summary>
            Calls given method after supplied amount of milliseconds. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            Ignores any subsequent registers for the same blockpos while a callback is still in the queue. Used e.g. for liquid physics to prevent unnecessary multiple updates
            </summary>
            <param name="OnGameTick"></param>
            <param name="pos"></param>
            <param name="millisecondInterval"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RegisterCallback(Vintagestory.API.Common.Action{Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single},Vintagestory.API.MathTools.BlockPos,System.Int32)">
            <summary>
            Calls given method after supplied amount of milliseconds, lets you supply a block position to be passed to the method. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnTimePassed"></param>
            <param name="pos"></param>
            <param name="millisecondDelay"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlayerHasPrivilege(System.Int32,System.String)">
            <summary>
            Returns true if given client has a privilege. Always returns true on the client.
            </summary>
            <param name="clientid"></param>
            <param name="privilege"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.UnregisterCallback(System.Int64)">
            <summary>
            Removes a delayed callback
            </summary>
            <param name="listenerId"></param>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.InteresectionTester">
            <summary>
            Utility for testing intersections. Only access from main thread.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockCropProperties.RequiredNutrient">
            <summary>
            Which nutrient category this crop requires to grow
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockCropProperties.NutrientConsumption">
            <summary>
            Total amount of nutrient consumed to reach full maturity. (100 is the maximum available for farmland)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockCropProperties.GrowthStages">
            <summary>
            Amount of growth stages this crop has
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockCropProperties.TotalGrowthDays">
            <summary>
            Total time in ingame days required for the crop to reach full maturity assuming full nutrient levels
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockCropProperties.MultipleHarvests">
            <summary>
            If true, the player may harvests from the crop multiple times
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockCropProperties.HarvestGrowthStageLoss">
            <summary>
            When multiple harvets is true, this is the amount of growth stages the crop should go back when harvested
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockCropProperties.Behaviors">
            <summary>
            Allows customization of crop growth behavior. BlockEntityFarmland calls methods on all behaviors to allow greater control.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.BlockEntity">
            <summary>
            Basic class for block entities - a data structures to hold custom information for blocks, e.g. for chests to hold it's contents
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockEntity.pos">
            <summary>
            Position of the block for this block entity
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.#ctor">
            <summary>
            Creats an empty instance. Use initialize to initialize it with the api.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.Initialize(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            This method is called right after the block entity was spawned or right after it was loaded from a newly loaded chunk. You do have access to the world and its blocks at this point.
            However if this block entity already existed then FromTreeAttributes is called first!
            You should still call the base method to sets the this.api field
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.RegisterGameTickListener(Vintagestory.API.Common.Action{System.Single},System.Int32)">
            <summary>
            Registers a game tick listener that does the disposing for you when the Block is removed
            </summary>
            <param name="OnGameTick"></param>
            <param name="millisecondInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.RegisterDelayedCallback(Vintagestory.API.Common.Action{System.Single},System.Int32)">
            <summary>
            Registers a delayed callback that does the disposing for you when the Block is removed
            </summary>
            <param name="OnDelayedCallbackTick"></param>
            <param name="millisecondInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnBlockRemoved">
            <summary>
            Called when the block at this position was removed in some way. Removes the game tick listeners, so still call the base method
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnBlockUnloaded">
            <summary>
            Called when the chunk the block entity resides in was unloaded. Removes the game tick listeners, so still call the base method
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnBlockPlaced(Vintagestory.API.Common.ItemStack)">
            <summary>
            Called when the block entity just got placed, not called when it was previously placed and the chunk is loaded
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.ToTreeAttributes(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Called when saving the world or when sending the block entity data to the client. When overriding, make sure to still call the base method.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.FromTreeAtributes(Vintagestory.API.Datastructures.ITreeAttribute,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Called when loading the world or when receiving block entity from the server. When overriding, make sure to still call the base method.
            FromTreeAtributes is always called before Initialize() is called, so the this.api field is not yet set!
            </summary>
            <param name="tree"></param>
            <param name="worldAccessForResolve">Use this api if you need to resolve blocks/items. Not suggested for other purposes, as the residing chunk may not be loaded at this point</param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnReceivedClientPacket(Vintagestory.API.Common.IPlayer,System.Int32,System.Byte[])">
            <summary>
            Called whenever a blockentity packet at the blocks position has been received from the client
            </summary>
            <param name="fromPlayer"></param>
            <param name="packetid"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnReceivedServerPacket(System.Int32,System.Byte[])">
            <summary>
            Called whenever a blockentity packet at the blocks position has been received from the server
            </summary>
            <param name="packetid"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.MarkDirty(System.Boolean)">
            <summary>
            When called on Server: Will resync the block entity with all its TreeAttribute to the client, but will not resend or redraw the block unless specified.
            When called on Client: Triggers a block changed event on the client, but will not redraw the block unless specified.
            </summary>
            <param name="redrawOnClient">When true, the block is also marked dirty and thus redrawn. When called serverside a dirty block packet is sent to the client for it to be redrawn</param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.GetBlockInfo(Vintagestory.API.Common.IPlayer)">
            <summary>
            Called by the block info HUD for displaying additional information
            </summary>
            <param name="forPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnStoreCollectibleMappings(System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation},System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation})">
            <summary>
            Called by the worldedit schematic exporter so that it can also export the mappings of items/blocks stored inside blockentities
            </summary>
            <param name="blockIdMapping"></param>
            <param name="itemIdMapping"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnLoadCollectibleMappings(Vintagestory.API.Common.IWorldAccessor,System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation},System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation})">
            <summary>
            Called by the blockschematic loader so that you may fix any blockid/itemid mappings against the mapping of the savegame, if you store any collectibles in this blockentity.
            Hint: Use itemstack.FixMapping() to do the job for you.
            </summary>
            <param name="oldBlockIdMapping"></param>
            <param name="oldItemIdMapping"></param>
        </member>
        <member name="F:Vintagestory.API.Common.AdvancedParticleProperties.PosOffset">
            <summary>
            Offset from the blocks hitboxes top middle position
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.JsonItemStack.Type">
            <summary>
            Block or Item?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.JsonItemStack.Code">
            <summary>
            Code of the block or item
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.JsonItemStack.StackSize">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.JsonItemStack.Attributes">
            <summary>
            Tree Attributes that should be attached to the resulting itemstack
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.JsonItemStack.Resolve(Vintagestory.API.Common.IWorldAccessor,System.String)">
            <summary>
            Sets itemstack.block or itemstack.item
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.JsonItemStack.Clone">
            <summary>
            Creates a deep copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.AlloyRecipe.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serialized the alloy
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AlloyRecipe.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Deserializes the alloy
            </summary>
            <param name="reader"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.MetalAlloyIngredient.Clone">
            <summary>
            Creates a deep copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.CompositeShape.Alternates">
            <summary>
            The block shape may consists of any amount of alternatives, one of which will be randomly chosen when the block is placed in the world.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CompositeShape.VoxelizeTexture">
            <summary>
            If true, the shape is created from a voxelized version of the first defined texture
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CompositeShape.QuantityElements">
            <summary>
            If non zero will only tesselate the first n elements of the shape
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CompositeShape.SelectiveElements">
            <summary>
            If set will only tesselate elements with given name
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CompositeShape.Clone">
            <summary>
            Creates a deep copy of the texture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CompositeShape.LoadAlternates(Vintagestory.API.Common.IAssetManager,Vintagestory.API.Common.ILogger)">
            <summary>
            Expands the Composite Texture to a texture atlas friendly version and populates the Baked field
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.EnumGameMode">
            <summary>
            A players game mode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumGameMode.Guest">
            <summary>
            Can not place or remove blocks, but can interact with blocks and entities
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumGameMode.Survival">
            <summary>
            May not fly or break blocks immediately
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumGameMode.Creative">
            <summary>
            Can fly, break blocks immediately, etc.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumGameMode.Spectator">
            <summary>
            Can fly but may not interact with the world in any way
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IAsset">
            <summary>
            Represents a loaded asset from the assets folder
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAsset.Name">
            <summary>
            The assets Filename 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAsset.Data">
            <summary>
            The file contents in binary format
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IAsset.ToObject``1(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            If the asset is a json file you can use this convenience method to turn it into an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAsset.ToText">
            <summary>
            Turns the binary data into a UTF-8 string. Use for text files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAsset.ToBitmap(Vintagestory.API.Common.IPlatform)">
            <summary>
            Turns the binary data into a Bitmap. Use for .png images. Does not work on other image formats.
            </summary>
            <param name="platform"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.IInventory">
            <summary>
            Basic interface representing an item inventory
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.TakeLocked">
            <summary>
            Called by item slot, if true, player cannot take items from this chest
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.PutLocked">
            <summary>
            Called by item slot, if true, player cannot take items from this chest
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.LastChanged">
            <summary>
            Milliseconds since server startup when the inventory was last changed (not used currently)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.GetSlot(System.Int32)">
            <summary>
            Returns the slot at given slot number. Returns null for invalid slot number (below 0 or above QuantitySlots), otherwise given slot.
            </summary>
            <param name="slotId"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.QuantitySlots">
            <summary>
            Returns the amount of existing slots in this inventory
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.Open(Vintagestory.API.Common.IPlayer)">
            <summary>
            Marks the inventory available for interaction for this player
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.Close(Vintagestory.API.Common.IPlayer)">
            <summary>
            Removes ability to interact with this inventory for this player
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.HasOpened(Vintagestory.API.Common.IPlayer)">
            <summary>
            Checks if given player has this inventory currently opened
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.GetBestSuitedSlot(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.ItemSlot,System.Collections.Generic.List{Vintagestory.API.Common.IItemSlot})">
            <summary>
            Returns the best suited slot to hold the item from the source slot. Attached is also a weight, indicating how well the item is suited for it. If no suitable slot was found, the weight will be 0 and the slot will be null. A higher weight means the slot is better suited to hold the item. This method does not check if the player is actually allowed to access or modify this inventory.
            
            Weight will be 1 for a default slot that is empty
            Weight will be 2 for a default slot that can take one or more items from the source slot
            Weight could be 10 for an empty armor slot and the source slot contains an armor itemtack
            </summary>
            <param name="sourceSlot"></param>
            <param name="skipSlots"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.ActivateSlot(System.Int32,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            When the player clicks on this slot
            </summary>
            <param name="slotId"></param>
            <param name="sourceSlot"></param>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.TryFlipItems(System.Int32,Vintagestory.API.Common.IItemSlot)">
            <summary>
            Attempts to flip the contents of both slots
            </summary>
            <param name="targetSlotId"></param>
            <param name="sourceSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.GetSlotId(Vintagestory.API.Common.IItemSlot)">
            <summary>
            Will return -1 if the slot is not found in this inventory
            </summary>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.MarkSlotDirty(System.Int32)">
            <summary>
            Server Side: Will resent the slot contents to the client and mark them dirty there as well
            Client Side: Will refresh stack size, model and stuff if this stack is currently being rendered
            </summary>
            <param name="slotId"></param>
        </member>
        <member name="E:Vintagestory.API.Common.IInventory.SlotModified">
            <summary>
            Event that fires when a slot was modified
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.IInventory.SlotNotified">
            <summary>
            Event that fires when NotifySlot was called 
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IItemStack">
            <summary>
            Represents a stack of items or blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.Collectible">
            <summary>
            The base class the Item/Block inherits from
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.Class">
            <summary>
            Is it a Block or Item?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.Item">
            <summary>
            The Item if ItemClass==Item, otherwise null
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.Block">
            <summary>
            The Block if ItemClass==Block, otherwise null
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.StackSize">
            <summary>
            Amount of items or blocks in this stack
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.Id">
            <summary>
            The items or blocks unique id
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.Attributes">
            <summary>
            Attributes assigned to this itemstack. Modifiable.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.Equals(Vintagestory.API.Common.ItemStack,System.String[])">
            <summary>
            Checks if this item stack is of the same class, id and has the same stack attributes. Ignores stack size
            </summary>
            <param name="sourceStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serializes this itemstack into a byte stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.FromBytes(System.IO.BinaryReader)">
            <summary>
            Deserializes an itemstack from given byte stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.MatchesSearchText(System.String)">
            <summary>
            Checks if the contained item or block name contains given searchtext
            </summary>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.GetName">
            <summary>
            Returns the name displayed in the players inventory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.GetDescription(Vintagestory.API.Common.IWorldAccessor,System.Boolean)">
            <summary>
            Returns a multiline description text of the item
            </summary>
            <param name="world"></param>
            <param name="debug">Whether to show additional debug info</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.Clone">
            <summary>
            Creates a deep copy of the itemstack
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IItemSlot.Inventory">
            <summary>
            The inventory the slot belongs to
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemSlot.Itemstack">
            <summary>
            The contained itemstack
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemSlot.StackSize">
            <summary>
            Returns that stack size of the itemstack. Returns 0 if the itemstack is null. Might however also return 0 if the itemstack is non-null but stacksize is set to 0.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemSlot.Empty">
            <summary>
            Short verison of Itemstack == null
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemSlot.StorageType">
            <summary>
            Returns what kind of items it can hold. 0 if it can hold any item.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IItemSlot.CanTake">
            <summary>
            Returns true if items can be taken from this slot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemSlot.CanTakeFrom(Vintagestory.API.Common.IItemSlot)">
            <summary>
            Returns true if the slot can hold one ore more items from the source slot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemSlot.TakeOut(System.Int32)">
            <summary>
            Splits the itemstack and returns a copy of the new itemstack with given quantity
            </summary>
            <param name="quantity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemSlot.TryPutInto(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IItemSlot)">
            <summary>
            Tries to fill the destination slot with whatever we have in our slot. Uses standard move operaton
            </summary>
            <param name="destinationSlot"></param>
            <param name="quantity"></param>
            <param name="isShiftTransfer"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemSlot.TryPutInto(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Tries to fill the destination slot with whatever we have in our slot
            </summary>
            <param name="destinationSlot"></param>
            <param name="quantity"></param>
            <param name="isShiftTransfer"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemSlot.TryFlipWith(Vintagestory.API.Common.IItemSlot)">
            <summary>
            Exchanges the slot contents with the target slot
            </summary>
            <param name="itemSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemSlot.ActivateSlot(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Call when a player has clicked on this slot. The source slot must always be the mouse cursor slot. This handles the logic of either taking, putting, stacking or exchanging items.
            </summary>
            <param name="sourceSlot"></param>
            <param name="button"></param>
            <param name="modifiers"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IItemSlot.OnItemSlotModified(Vintagestory.API.Common.IItemStack)">
            <summary>
            Called from another slot when items have been placed into it.
            </summary>
            <param name="sinkStack">If items were moved, this is the stack they were moved into (may belong to another slot)</param>
        </member>
        <member name="M:Vintagestory.API.Common.IItemSlot.MarkDirty">
            <summary>
            Marks this slot dirty so that it gets synchronized
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ShapeElement.GetParentPath">
            <summary>
            Walks the element tree and collects all parents, starting with the root element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ShapeElement.GetInverseModelMatrix">
            <summary>
            Returns the full inverse model matrix (includes all parent transforms)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.Block">
            <summary>
            Basic class for a placeable block
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Block.Id">
            <summary>
            Returns the block id
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Block.ItemClass">
            <summary>
            Returns EnumItemClass.Block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.DefaultCollisionBox">
            <summary>
            Default Full Block Collision Box
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.BlockId">
            <summary>
            Unique number of the block. This number depends on the order in which the blocks are order. The numbering is however always ensured to remain the same on a per world basis.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.DrawType">
            <summary>
            If not set to JSON it will use an efficient hardcoded model
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.RenderPass">
            <summary>
            During which render pass this block should be rendered
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.MatterState">
            <summary>
            Liquids are handled and rendered differently than solid blocks.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Ambientocclusion">
            <summary>
            Currently not used
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.WalkSpeedMultiplier">
            <summary>
            Walk speed when standing or inside this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.DragMultiplier">
            <summary>
            Drag multiplier applied to entities standing on it
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.PartialSelection">
            <summary>
            If true, players can target individual selection boxes of the block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Sounds">
            <summary>
            The sounds played for this block during step, break, build and walk
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.GlowLevel">
            <summary>
            Basic glow level for all the blocks model elements
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.RenderFlags">
            <summary>
            8 bits that are sent to the graphics card for each vertex of the blocks shape. The lower 3 bits are currently used for altering the vertexes z-depth to fix a bunch of z-fighting issues
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.LightHsv">
            <summary>
            For light emitting blocks: hue, saturation and brightness value
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.LightAbsorption">
            <summary>
            For light blocking blocks. Any value above 32 will completely block all light.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Replaceable">
            <summary>
            A value usually between 0-9999 that indicates which blocks may be replaced with others.
            - Any block with replaceable value above 5000 will be washed away by water
            - Any block with replaceable value above 6000 will replaced when the player tries to place a block
            Examples:
            0 = Bedrock
            6000 = Tallgrass
            9000 = Lava
            9500 = Water
            9999 = Air
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Fertility">
            <summary>
            0 = nothing can grow, 10 = some tallgrass and small trees can be grow on it, 100 = all grass and trees can grow on it
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.RequiredMiningTier">
            <summary>
            The mining tier required to break this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Resistance">
            <summary>
            How long it takes to break this block in seconds
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.BlockMaterial">
            <summary>
            A way to categorize blocks. Used for getting the mining speed for each tool type, amongst other things
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.RandomizeAxes">
            <summary>
            Random texture selection - whether or not to use the Y axis during randomization (for multiblock plants)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.RandomDrawOffset">
            <summary>
            If true then the block will be randomly offseted by 1/3 of a block when placed
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.ShapeInventory">
            <summary>
            The block shape to be used when displayed in the inventory gui, held in hand or dropped on the ground
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Shape">
            <summary>
            The default json block shape to be used when drawtype==JSON
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.ParticleProperties">
            <summary>
            Particles that should spawn in regular intervals from this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Textures">
            <summary>
            Default textures to be used for this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.TexturesInventory">
            <summary>
            Textures to be used for this block in the inventory gui, held in hand or dropped on the ground
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Block.FirstTextureInventory">
            <summary>
            Returns the first textures in the TexturesInventory dictionary
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SideOpaque">
            <summary>
            Defines which of the 6 block sides are completely opaque. Used to determine which block faces can be culled during tesselation.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SideSolid">
            <summary>
            Defines which of the 6 block side are solid. Used to determine if attachable blocks can be attached to this block. Also used to determine if snow can rest on top of this block.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SideAo">
            <summary>
            Defines which of the 6 block side should be shaded with ambient occlusion
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.AllowSpawnCreatureGroups">
            <summary>
            Defines what creature groups may spawn on this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SideAoByFlags">
            <summary>
            Created on the client to cache the side ao flags by blockfacing flags plus every face with every face combined (e.g. south|west). Havin these values cached speeds up chunk tesselation.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.FaceCullMode">
            <summary>
            Determines which sides of the blocks should be rendered
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.TintIndex">
            <summary>
            0 for no tint, 1 for plant climate tint, 2 for water climate tint
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.ShapeHasClimateTint">
            <summary>
            Internal value that's set during if the block shape has any tint indexes for use in chunk tesselation and stuff O_O
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.ShapeHasWaterTint">
            <summary>
            Internal value that's set during if the block shape has any tint indexes for use in chunk tesselation and stuff O_O
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.CollisionBoxes">
            <summary>
            Defines the area with which the player character collides with.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SelectionBoxes">
            <summary>
            Defines the area which the players mouse pointer collides with for selection.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Climbable">
            <summary>
            Used for ladders. If true, walking against this blocks collisionbox will make the player climb
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.RainPermeable">
            <summary>
            Will be used for not rendering rain below this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SnowCoverage">
            <summary>
            Whether snow may rest on top of this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.LiquidLevel">
            <summary>
            Value between 0..7 for Liquids to determine the height of the liquid
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.HasAlternates">
            <summary>
            A flag set during texture block shape tesselation
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.BlockBehaviors">
            <summary>
            Modifiers that can alter the behavior of a block, particularly when being placed or removed
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Drops">
            <summary>
            The items that should drop from breaking this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.CropProps">
            <summary>
            Information about the blocks as a crop 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.EntityClass">
            <summary>
            If this block has a block entity attached to it, this will store it's code 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Block.#ctor">
            <summary>
            Creates a new instance of a block with default model transforms
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnLoaded(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Called when this block was loaded by the server or the client
            </summary>
            <param name="api"></param>
        </member>
        <member name="P:Vintagestory.API.Common.Block.AllSidesOpaque">
            <summary>
            Sets the whole SideOpaque array to true 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Block.IsLiquid">
            <summary>
            Returns true if this blocks matterstate is liquid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.IsWater">
            <summary>
            Return true if this is water (used for checking if Farmland is watered)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetSelectionBoxes(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the blocks selection boxes at this position in the world
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetCollisionBoxes(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the blocks collision box
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetLightHsv(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.ItemStack)">
            <summary>
            Should return the light HSV values. 
            Warning: This method is likely to get called in a background thread. Please make sure your code in here is thread safe.
            </summary>
            <param name="blockAccessor"></param>
            <param name="pos">May be null</param>
            <param name="stack">Set if its an itemstack for which the engine wants to check the light level</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetDecal(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Client.ITexPositionSource,Vintagestory.API.Client.MeshData@,Vintagestory.API.Client.MeshData@)">
            <summary>
            Called before a decal is created 
            </summary>
            <param name="world"></param>
            <param name="decalTexSource"></param>
            <param name="decalModelData"></param>
            <param name="blockModelData"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.CanAttachBlockAt(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.Common.Block,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Used by torches and other blocks to check if it can attach itself to that block
            </summary>
            <param name="world"></param>
            <param name="block"></param>
            <param name="pos"></param>
            <param name="blockFace"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.CanCreatureSpawnOn(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Entities.EntityType,Vintagestory.API.Common.Entities.BaseSpawnConditions)">
            <summary>
            Should return if supplied entitytype is allowed to spawn on this block
            </summary>
            <param name="blockAccessor"></param>
            <param name="pos"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.TryPlaceBlockForWorldGen(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Currently used for wildvines and saguaro cactus
            </summary>
            <param name="blockAccessor"></param>
            <param name="pos"></param>
            <param name="onBlockFace"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.TryPlaceBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.BlockSelection)">
            <summary>
            Called when the player attempts to place this block
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="itemstack"></param>
            <param name="blockSel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.IsSuitablePosition(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Checks if this block does not intersect with something at given position
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnHeldInteractStart(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Delegates the event to the block behaviors and calls the base method if the event was not handled
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnHeldInteractStep(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Delegates the event to the block behaviors and calls the base method if the event was not handled
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnHeldInteractStop(System.Single,Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Delegates the event to the block behaviors and calls the base method if the event was not handled
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.DoPlaceBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing,Vintagestory.API.Common.ItemStack)">
            <summary>
            Called by TryPlaceBlock if placement is possible 
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="onBlockFace"></param>
            <param name="byItemStack">Might be null</param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnGettingBroken(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.IItemSlot,System.Single,System.Single)">
            <summary>
            Player is breaking this block. Has to reduce remainingResistance by the amount of time it should be broken
            </summary>
            <param name="player"></param>
            <param name="blockSel"></param>
            <param name="itemslot"></param>
            <param name="remainingResistance"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockBroken(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer,System.Single)">
            <summary>
            Called when a survival player has broken the block. This method needs to remove the block.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="byPlayer"></param>
            <param name="dropQuantityMultiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetDrops(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer,System.Single)">
            <summary>
            Is called before a block is broken, should return what items this block should drop. Return null or empty array for no drops.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="byPlayer"></param>
            <param name="dropQuantityMultiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnTryIgniteBlock(Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.MathTools.BlockPos,System.Single,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called while the given entity attempts to ignite this block
            </summary>
            <param name="byEntity"></param>
            <param name="pos"></param>
            <param name="secondsIgniting"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnTryIgniteBlockOver(Vintagestory.API.Common.Entities.IEntityAgent,Vintagestory.API.MathTools.BlockPos,System.Single,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called after the given entity has attempted to ignite this block
            </summary>
            <param name="byEntity"></param>
            <param name="pos"></param>
            <param name="secondsIgniting"></param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnPickBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            When the player has presed the middle mouse click on the block
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockRemoved(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Always called when a block has been removed through whatever method, except during worldgen or via ExchangeBlock()
            For Worldgen you might be able to use TryPlaceBlockForWorldGen() to attach custom behaviors during placement/removal
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockPlaced(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.ItemStack)">
            <summary>
            Always called when a block has been placed through whatever method, except during worldgen or via ExchangeBlock()
            For Worldgen you might be able to use TryPlaceBlockForWorldGen() to attach custom behaviors during placement/removal
            </summary>
            <param name="world"></param>
            <param name="blockPos"></param>
            <param name="byItemStack">May be null!</param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnNeighourBlockChange(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Called when any of it's 6 neighbour blocks has been changed
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="neibpos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockInteract(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection)">
            <summary>
            When a player does a right click while targeting this placed block. Should return true if the event is handled, so that other events can occur, e.g. eating a held item if the block is not interactable with.
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnEntityInside(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.Entity,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            When an entity is inside a block (can only occur if collision box is smaller than 1x1x1)
            </summary>
            <param name="world"></param>
            <param name="entity"></param>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnEntityCollide(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.Entity,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing,System.Boolean)">
            <summary>
            Whenever an entity collides with the collision box of the block
            </summary>
            <param name="world"></param>
            <param name="entity"></param>
            <param name="pos"></param>
            <param name="facing"></param>
            <param name="isImpact"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.ShouldReceiveClientGameTicks(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Everytime the player moves by 8 blocks (or rather leaves the current 8-grid), a scan of all blocks 32x32x32 blocks around the player is initiated
            and this method is called. If the method returns true, the block is registered to a client side game ticking for spawning particles and such.
            This method will be called everytime the player left his current 8-grid area. 
            </summary>
            <param name="world"></param>
            <param name="player"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnClientGameTick(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Called evey 25ms if the block is in range (32 blocks) and block returned true on ShouldReceiveClientGameTicks(). Takes a few seconds for the game to register the block.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.ShouldReceiveServerGameTicks(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Object@)">
            <summary>
            Called every interval specified in Server.Config.RandomTickInterval. Defaults to 50ms. This method
            is called on a separate server thread. This should be considered when deciding how to access blocks.
            If true is returned, the server will call OnServerGameTick on the main thread passing the BlockPos
            and the 'extra' object if specified. The 'extra' parameter is meant to prevent duplicating lookups
            and other calculations when OnServerGameTick is called. 
            </summary>
            <param name="world"></param>
            <param name="pos">The position of this block</param>
            <param name="extra">Optional parameter to set if you need to pass additional data to the OnServerGameTick method</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnServerGameTick(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Object)">
            <summary>
            Called by the main server thread if and only if this block returned true in ShouldReceiveServerGameTicks.
            </summary>
            <param name="world"></param>
            <param name="pos">The position of this block</param>
            <param name="extra">The value set for the 'extra' parameter when ShouldReceiveGameTicks was called.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnHeldIdle(Vintagestory.API.Common.IItemSlot,Vintagestory.API.Common.Entities.IEntityAgent)">
            <summary>
            When the item is being held in hands without using it 
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
        </member>
        <member name="F:Vintagestory.API.Common.Block.TopMiddlePos">
            <summary>
            The origin point from which particles are being spawned
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Block.DetermineTopMiddlePos">
            <summary>
            Used as base position for particles.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Block.IsReplacableBy(Vintagestory.API.Common.Block)">
            <summary>
            Used to determine if a block should be treated like air when placing blocks. (e.g. used for tallgrass)
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.SuggestedHVOrientation(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection)">
            <summary>
            Returns a horizontal and vertical orientation which should be used for oriented blocks like stairs during placement.
            </summary>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.ToString">
            <summary>
            Simple string representation for debugging
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetRotatedBlockCode(System.Int32)">
            <summary>
            For any block that can be rotated, this method should be implemented to return the correct rotated block code. It is used by the world edit tool for allowing block data rotations
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetVerticallyFlippedBlockCode">
            <summary>
            For any block that can be flipped upside down, this method should be implemented to return the correctly flipped block code. It is used by the world edit tool for allowing block data rotations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetHorizontallyFlippedBlockCode(Vintagestory.API.MathTools.EnumAxis)">
            <summary>
            For any block that can be flipped vertically, this method should be implemented to return the correctly flipped block code. It is used by the world edit tool for allowing block data rotations
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetBehavior(System.Type,System.Boolean)">
            <summary>
            Returns the blocks behavior of given type, if it has such behavior
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.HasBehavior(System.Type,System.Boolean)">
            <summary>
            Returns true if the block has given behavior
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.HasBehavior(System.String,Vintagestory.API.Common.IClassRegistryAPI)">
            <summary>
            Returns true if the block has given behavior
            </summary>
            <param name="type"></param>
            <param name="classRegistry"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetPlacedBlockInfo(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer)">
            <summary>
            Called by the block info HUD for displaying additional information
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetHeldItemInfo(Vintagestory.API.Common.ItemStack,System.Text.StringBuilder,Vintagestory.API.Common.IWorldAccessor,System.Boolean)">
            <summary>
            Called by the inventory system when you hover over an item stack. This is the text that is getting displayed.
            </summary>
            <param name="stack"></param>
            <param name="dsc"></param>
            <param name="world"></param>
            <param name="withDebugInfo"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.DoParticalSelection(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            If true, the player can select invdividual selection boxes of this block
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnCollectTextures(Vintagestory.API.Common.ICoreAPI,Vintagestory.API.Datastructures.OrderedDictionary{Vintagestory.API.Common.AssetLocation,System.Boolean})">
            <summary>
            Called by the texture atlas manager when building up the block atlas. Has to add all of the blocks texture
            </summary>
            <param name="api"></param>
            <param name="textureDict"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.BakeAndCollect(Vintagestory.API.Common.ICoreAPI,System.Collections.Generic.Dictionary{System.String,Vintagestory.API.Client.CompositeTexture},Vintagestory.API.Datastructures.OrderedDictionary{Vintagestory.API.Common.AssetLocation,System.Boolean})">
            <summary>
            Called by the texture atlas manager when building up the block atlas. Has to add all of the blocks texture
            </summary>
            <param name="api"></param>
            <param name="dict"></param>
            <param name="textureDict"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.WildCardPop(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.AssetLocation)">
            <summary>
            Returns a new AssetLocation with the wildcards (*) being filled with the block other Code parts, if the wildcard matches
            </summary>
            <param name="search"></param>
            <param name="replace"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetBlastResistance(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.Vec3f,Vintagestory.API.Common.EnumBlastType)">
            <summary>
            Should return the blocks blast resistance. Default behavior is to return BlockMaterialUtil.MaterialBlastResistance(blastType, BlockMaterial);
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="blastDirectionVector"></param>
            <param name="blastType"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.ExplosionDropChance(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumBlastType)">
            <summary>
            Should return the chance of the block dropping its upon upon being exploded. Default behavior is to return BlockMaterialUtil.MaterialBlastDropChances(blastType, BlockMaterial);
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="blastType"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockExploded(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumBlastType)">
            <summary>
            Called when the block was blown up by explosives
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="explosionCenter"></param>
            <param name="blastType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.TextureSubIdForRandomBlockPixel(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing,System.Int32@)">
            <summary>
            Should return the texture sub id to be used for the block particle coloring
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="facing"></param>
            <param name="tintIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.Clone">
            <summary>
            Creates a deep copy of the block
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.FillPlaceHolders(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Used by the block loader to replace wildcards with their final values
            </summary>
            <param name="searchReplace"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.FillPlaceHolder(Vintagestory.API.Common.AssetLocation,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Used by the block loader to replace wildcards with their final values
            </summary>
            <param name="input"></param>
            <param name="searchReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.FillPlaceHolder(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Used by the block loader to replace wildcards with their final values
            </summary>
            <param name="input"></param>
            <param name="searchReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.FillPlaceHolder(System.String,System.String,System.String)">
            <summary>
            Used by the block loader to replace wildcards with their final values
            </summary>
            <param name="input"></param>
            <param name="search"></param>
            <param name="replace"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.CombustibleProperties">
            <summary>
            Used for an items combustible value
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.BurnTemperature">
            <summary>
            The temperature at which it burns
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.BurnDuration">
            <summary>
            For how long it burns
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.HeatResistance">
            <summary>
            How many degrees celsius it can resists before it ignites
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.MeltingPoint">
            <summary>
            How many degrees celsius it takes to smelt/transform this into another. Only used when put in a stove and Melted is set 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.MeltingDuration">
            <summary>
            For how many seconds the temperature has to be above the melting point until the item is smelted
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.SmokeLevel">
            <summary>
            How much smoke this item produces when being used as fuel
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.SmeltedRatio">
            <summary>
            How many ores are required to produce one output stack
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.SmeltingType">
            <summary>
            Used for correct naming in the tool tip
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.SmeltedStack">
            <summary>
            If set, the block/item is smeltable in a furnace and this is the resulting itemstack once the MeltingPoint has been reached for the supplied duration.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.RequiresContainer">
            <summary>
            If true (default) a container is required to smelt this item. 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CombustibleProperties.Clone">
            <summary>
            Creates a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.GridRecipe">
            <summary>
            Represents a crafting recipe
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.IngredientPattern">
            <summary>
            The pattern of the ingredient. Order for a 3x3 recipe: 
            1 2 3
            4 5 6
            7 8 9
            Order for a 2x2 recipe:
            1 2
            3 4
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Ingredients">
            <summary>
            The recipes ingredients in any order
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Width">
            <summary>
            Required grid width for crafting this recipe 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Height">
            <summary>
            Required grid height for crafting this recipe 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Output">
            <summary>
            The resulting Stack
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Shapeless">
            <summary>
            Whether the order of input items should be respected
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Name">
            <summary>
            Name of the recipe, optional
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.ResolveIngredients(Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Turns Ingredients into IItemStacks
            </summary>
            <param name="world"></param>
            <returns>True on successful resolve</returns>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.GetNameToCodeMapping(Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Resolves Wildcards in the ingredients
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.ConsumeInput(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.IItemSlot[],System.Int32)">
            <summary>
            Puts the crafted itemstack into the output slot and 
            consumes the required items from the input slots
            </summary>
            <param name="inputSlots"></param>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="gridWidth"></param>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.Matches(Vintagestory.API.Common.IItemSlot[],System.Int32)">
            <summary>
            Check if this recipe matches given ingredients
            </summary>
            <param name="ingredients"></param>
            <param name="gridWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serialized the recipe
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Deserializes the recipe
            </summary>
            <param name="reader"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.Clone">
            <summary>
            Creates a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.CraftingRecipeIngredient">
            <summary>
            A crafting recipe ingredient
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.Type">
            <summary>
            Item or Block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.Code">
            <summary>
            Code of the item or block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.Name">
            <summary>
            Name of the class, used for filling placeholders in the output stack
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.Quantity">
            <summary>
            How much input items are required
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.Attributes">
            <summary>
            What attributes this itemstack must have
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.IsTool">
            <summary>
            Whether this crafting recipe ingredient should be regarded as a tool required to build this item.
            If true, the recipe will not consume the item but reduce its durability.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.AllowedVariants">
            <summary>
            When using a wildcrad in the item/block code, setting this field will limit the allowed variants
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.ReturnedStack">
            <summary>
            If set, the crafting recipe will give back the consumed stack to be player upon crafting
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.ResolvedItemstack">
            <summary>
            The itemstack made from Code, Quantity and Attributes, populated by the engine
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.IsWildCard">
            <summary>
            Whether this recipe contains a wildcard, populated by the engine
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CraftingRecipeIngredient.Resolve(Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Turns Type, Code and Attributes into an IItemStack
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="T:Vintagestory.API.Common.Item">
            <summary>
            Represents an in game Item of Vintage Story
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Item.Id">
            <summary>
            The unique number of the item, dynamically assigned by the game
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Item.ItemClass">
            <summary>
            The type of the collectible object
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Item.ItemId">
            <summary>
            The unique number of the item, dynamically assigned by the game
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Item.Shape">
            <summary>
            The items shape. Null for automatic shape based on the texture.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Item.Textures">
            <summary>
            Default textures to be used for this block
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Item.FirstTexture">
            <summary>
            Returns the first texture in Textures
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Item.#ctor">
            <summary>
            Instantiate a new item with default model transforms
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Item.#ctor(System.Int32)">
            <summary>
            Instantiates a new item with given item id and stacksize = 1
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Item.FillPlaceHolders(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Fills in placeholders in the composite texture (called by the VSGameContent mod during item loading)
            </summary>
            <param name="searchReplace"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Item.Clone">
            <summary>
            Creates a deep copy of the item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ActionConsumable`1">
            <summary>
            Return true if the action/event should be "consumed" (e.g. mark a mouse click as handled)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ActionConsumable">
            <summary>
            Return true if the action/event should be "consumed" (e.g. mark a mouse click as handled)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ActionBoolReturn">
            <summary>
            Return true if the action/event was successfull
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ActionConsumable`2">
            <summary>
            Return true if the action/event should be "consumed" (e.g. mark a mouse click as handled)
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.Action">
            <summary>
            A parameterless method
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.PlayerChat">
            <summary>
            When the player wrote a chat message. Set consumed.value to true to prevent further processing of this chat message
            </summary>
            <param name="byPlayer"></param>
            <param name="channelId"></param>
            <param name="message"></param>
            <param name="consumed"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.BlockDropItemStack">
            <summary>
            Represents an itemstack that is dropped by chance when breaking a block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.Type">
            <summary>
            Block or Item?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.Code">
            <summary>
            Code of the block or item
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.Quantity">
            <summary>
            Quantity to be dropped
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.Attributes">
            <summary>
            Tree Attributes that should be attached to the resulting itemstack
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.LastDrop">
            <summary>
            If true and the quantity dropped is >=1 any subsequent drop will be ignored
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.Tool">
            <summary>
            If not null then given tool is required to break this block
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockDropItemStack.Resolve(Vintagestory.API.Common.IWorldAccessor,System.String)">
            <summary>
            Sets itemstack.block or itemstack.item
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockDropItemStack.GetNextItemStack(System.Single)">
            <summary>
            Returns an itemstack with random quantity as configured via the Quantity field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockDropItemStack.Clone">
            <summary>
            Creates a deep copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ModSystem">
            <summary>
            Base of a system, which is part of a code mod. Takes care of setting up,
            registering and handling all sorts of things. You may choose to split up
            a mod into multiple distinct systems if you so choose, but there may
            also be just one.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModSystem.AllWorldGenFlags">
            <summary>
            You can use this value to register to a worldgeneration event for all play styles.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModSystem.Mod">
            <summary>
            Gets the <see cref="T:Vintagestory.API.Common.Mod"/> this mod system is part of.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ModSystem.ShouldLoad(Vintagestory.API.Common.EnumAppSide)">
            <summary>
            Returns if this mod should be loaded for the given app side.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Vintagestory.API.Common.ModSystem.ExecuteOrder" -->
        <member name="M:Vintagestory.API.Common.ModSystem.AllowRuntimeReload">
            <summary>
            When the server reloads mods at runtime, should this mod also be reloaded. Return false e.g. for any mod that adds blocks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModSystem.StartPre(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Called during intial mod loading, called before any mod receives the call to Start()
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ModSystem.Start(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Side agnostic Start method, called after all mods received a call to StartPre().
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ModSystem.StartClientSide(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Minor convenience method to save yourself the check for/cast to ICoreClientAPI in Start()
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ModSystem.StartServerSide(Vintagestory.API.Server.ICoreServerAPI)">
            <summary>
            Minor convenience method to save yourself the check for/cast to ICoreServerAPI in Start()
            </summary>
            <param name="api"></param>
        </member>
        <member name="T:Vintagestory.API.Common.ModelTransform">
            <summary>
            Used for transformations applied to a block or item model
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModelTransform.Translation">
            <summary>
            Offsetting
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModelTransform.Rotation">
            <summary>
            Rotating
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModelTransform.Scale">
            <summary>
            Scaling
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModelTransform.Origin">
            <summary>
            Rotation/Scaling Origin
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModelTransform.Rotate">
            <summary>
            Whether to rotate in gui item preview or to rotate when dropped
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.BlockDefaultGui">
            <summary>
            Scale = 1, No Translation, Rotation by -45 deg in Y-Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.BlockDefault">
            <summary>
            Scale = 1, No Translation, Rotation by -45 deg in Y-Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.BlockDefaultTp">
            <summary>
            Scale = 1, No Translation, Rotation by -45 deg in Y-Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.ItemDefaultGui">
            <summary>
            Scale = 1, No Translation, No Rotation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.ItemDefault">
            <summary>
            Scale = 1, No Translation, Rotation by 180 deg in X-Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.ItemDefaultTp">
            <summary>
            Scale = 1, No Translation, Rotation by 180 deg in X-Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.EnsureDefaultValues">
            <summary>
            Makes sure that Translation and Rotation is not null
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ModType">
            <summary>
            Describes the type of a mod. Allows easy recognition and limiting of
            what any particular mod can do.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModType.Theme">
            <summary>
            Makes only theme changes (texture, shape, sound, music) to existing
            game or mod assets / content without adding new content or code.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModType.Content">
            <summary>
            Can modify any existing assets, or add new content, but no code.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModType.Code">
            <summary>
            Can modify existing assets, add new content and make use of C#
            source files (.cs) and pre-compiled assemblies (.dll).
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ModInfo">
            <summary>
            Meta data for a specific mod folder, archive, source file or assembly.
            Either loaded from a "modinfo.json" or from the assembly's
            <see cref="T:Vintagestory.API.Common.ModInfoAttribute"/>.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Type">
            <summary> The type of this mod. Can be "Theme", "Content" or "Code". </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Name">
            <summary> The name of this mod. For example "My Example Mod". </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.ModID">
            <summary>
            The mod id (domain) of this mod. For example "myexamplemod".
            (Optional. Uses mod name (converted to lowercase, stripped of
            whitespace and special characters) if missing.)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Version">
            <summary> The version of this mod. For example "2.10.4". (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Description">
            <summary> A short description of what this mod does. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Website">
            <summary> Location of the website or project site of this mod. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Authors">
            <summary> Names of people working on this mod. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Contributors">
            <summary> Names of people contributing to this mod. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Side">
            <summary>
            Which side(s) this mod runs on. Can be "Server", "Client" or "Universal".
            (Optional. Universal (both server and client) by default.)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.RequiredOnClient">
            <summary>
            If set to true and the mod is universal, clients don't need the mod
            to join. (Optional. False by default.)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Dependencies">
            <summary> List of mods (and versions) this mod depends on. </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ModInfo.ToModID(System.String)">
            <summary>
            Attempts to convert the specified mod name to a mod ID, stripping any
            non-alphanumerical (including spaces and dashes) and lowercasing letters.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ModInfo.IsValidModID(System.String)">
            <summary>
            Returns whether the specified domain is valid.
            
            Tests if the string is non-null, has a length of at least 1, starts with
            a basic lowercase letter and contains only lowercase letters and numbers.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ModInfoAttribute">
            <summary>
            Applied to a mod assembly to provide additional meta data information
            about a code mod. Superseded by "modinfo.json" file, if available.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Name">
            <summary> The name of this mod. For example "My Example Mod". </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.ModID">
            <summary> The mod ID (domain) of this mod. For example "myexamplemod". </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Version">
            <summary> The version of this mod. For example "2.10.4". (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Description">
            <summary> A short description of what this mod does. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Website">
            <summary> Location of the website or project site of this mod. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Authors">
            <summary> Names of people working on this mod. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Contributors">
            <summary> Names of people contributing to this mod. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Side">
            <summary>
            Which side(s) this mod runs on. Can be "Server", "Client" or "Universal".
            (Optional. Universal (both server and client) by default.)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.RequiredOnClient">
            <summary>
            If set to false and the mod is universal, clients don't need it to join.
            (Optional. True (required) by default.)
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ModDependency">
            <summary>
            Represents a mod dependency requirement of one mod for another.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModDependency.ModID">
            <summary> The required mod id (domain) of this dependency. </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModDependency.Version">
            <summary>
            The minimum version requirement of this dependency.
            May be empty if the no specific version is required.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ModDependencyAttribute">
            <summary>
            Applied to a mod assembly multiple times for each required dependency.
            Superseded by this mod's "modinfo.json" file, if available.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModDependencyAttribute.ModID">
            <summary> The required mod id (domain) of this dependency. </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModDependencyAttribute.Version">
            <summary>
            The minimum version requirement of this dependency.
            May be empty if the no specific version is required.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.IServerConfig">
            <summary>
            The servers configuration
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.Port">
            <summary>
            The current network port 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.ServerName">
            <summary>
            Name of the server, currently not used
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.WelcomeMessage">
            <summary>
            Displays when the user logs in.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.MaxClients">
            <summary>
            Max amount of concurrent players, any beyond will be denied to join
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.Password">
            <summary>
            Password the player has to supply to join
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.MaxChunkRadius">
            <summary>
            How many chunks in each direction should be loaded at most for each player (1 chunk = 32 blocks) 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.TickTime">
            <summary>
            Of often the server should tick in milliesconds
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.BlockTickChunkRange">
            <summary>
            Horizontal distance in chunks from each player to tick blocks randomly
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.MaxMainThreadBlockTicks">
            <summary>
            The maximum number of blocks to tick per server tick
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.TickSamplesPerChunk">
            <summary>
            The number of blocks to sample for ticks each pass within a single chunk
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.BlockTickInterval">
            <summary>
            The interval of time in ms between each execution of the random tick system
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.BuildAreas">
            <summary>
            List of areas allowed/forbidden to build in
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.Roles">
            <summary>
            List of player roles 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.DefaultRoleCode">
            <summary>
            Default player role
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.AntiAbuse">
            <summary>
            AntiAbuse protection level. The anti abuse system is very buggy at the moment
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.OnlyWhitelisted">
            <summary>
            If true, only whitelisted players can join
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.DefaultSpawn">
            <summary>
            Default spawn position for players
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.AllowPvP">
            <summary>
            Whether or not to allow Player versus Player
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.IServerEventAPI">
            <summary>
            Contains methods to hook into various server processes
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.GetRegisteredWorldGenHandlers(Vintagestory.API.Common.EnumPlayStyle)">
            <summary>
            Returns the list of currently registered map chunk generator handlers for given playstyle. Returns an array of handler lists. Each element in the array represents all the handlers for one worldgenpass (see EnumWorldGenPass)       
            </summary>
            <param name="playstyle"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.CanPlaceOrBreakBlock(Vintagestory.API.Common.CanPlaceOrBreak)">
            <summary>
            Registers a handler to be called every time a player places a block. The methods return value determines if the player may place/break this block.
            </summary>
            <param name = "handler">Function to register. Required parameters: (int player, int x, int y, int z)</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.CanUseBlock(Vintagestory.API.Common.CanUse)">
            <summary>
            Registers a handler to be called every time a player uses a block. The methods return value determines if the player may place/break this block.
            </summary>
            <param name = "handler">Function to register. Required parameters: (int player, int x, int y, int z)</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.GetWorldgenBlockAccessor(Vintagestory.API.Common.WorldGenThread)">
            <summary>
            If you require neighbour chunk data during world generation, you have to register to this event to receive access to the chunk generator thread. This method is only called once during server startup.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.MapChunkGeneration(Vintagestory.API.Common.MapChunkGenerator,Vintagestory.API.Common.EnumPlayStyleFlag)">
            <summary>
            Event that is triggered whenever a new column of chunks is being generated. It is always called before the ChunkGenerator event
            </summary>
            <param name="handler"></param>
            <param name="worldPlayStyleFlags">For which worlds to use this generator</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.MapRegionGeneration(Vintagestory.API.Common.MapRegionGenerator,Vintagestory.API.Common.EnumPlayStyleFlag)">
            <summary>
            Event that is triggered whenever a new 8x8 section of column of chunks is being generated. It is always called before the ChunkGenerator and before the MapChunkGeneration event
            </summary>
            <param name="handler"></param>
            <param name="worldPlayStyleFlags">For which worlds to use this generator</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.ChunkColumnGeneration(Vintagestory.API.Common.ChunkColumnGeneration,Vintagestory.API.Server.EnumWorldGenPass,Vintagestory.API.Common.EnumPlayStyleFlag)">
            <summary>
            Vintagestory uses this method to generate the basic terrain (base terrain + rock strata + caves) in full columns. Only called once in pass EnumWorldGenPass.TerrainNoise. Register to this event if you need acces to a whole chunk column during inital generation.
            </summary>
            <param name="handler"></param>
            <param name="pass"></param>
            <param name="worldPlayStyleFlags">For which worlds to use this generator</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.PlayerJoin(Vintagestory.API.Common.PlayerJoinServer)">
            <summary>
            Called when a player joins
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.PlayerLeave(Vintagestory.API.Common.PlayerLeave)">
            <summary>
            Called when a player intentionally leaves
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.PlayerDisconnect(Vintagestory.API.Common.PlayerDisconnectServer)">
            <summary>
            Called whenever a player disconnects (timeout, leave, disconnect, kick, etc.). 
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.PlayerChat(Vintagestory.API.Common.PlayerChat)">
            <summary>
            Called when a player wrote a chat message
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.PlayerDeath(Vintagestory.API.Common.PlayerDeath)">
            <summary>
            Called when a player died
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.PlayerSwitchGameMode(Vintagestory.API.Common.PlayerChangeGameMode)">
            <summary>
            Whenever a player switched his game mode or has it switched for him
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.SaveGameLoaded(Vintagestory.API.Common.Action)">
            <summary>
            Triggered after the game world data has been loaded. At this point all blocks are loaded and the Map size is known.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.GameWorldSave(Vintagestory.API.Common.Action)">
            <summary>
            Triggered before the game world data is being saved to disk 
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.ServerRunPhase(Vintagestory.API.Server.EnumServerRunPhase,Vintagestory.API.Common.Action)">
            <summary>
            Triggered whenever the server enters a new run phase. Since mods are only loaded during run phase "LoadGamePre" registering to any earlier event will get triggered.
            </summary>
            <param name="runPhase"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.Timer(Vintagestory.API.Common.Action,System.Double)">
            <summary>
            Registers a method to be called every given interval
            </summary>
            <param name="handler"></param>
            <param name="interval"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.SpecialKey(Vintagestory.API.Common.SpecialKey)">
            <summary>
            Registers the given method to be called every time a player presses a "SpecialKey" (currenly only the Respawn key is in use)
            </summary>
            <param name = "handler">Method to execute. Must have certain format: void Name(int player, SpecialKey key);</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.ChangedActiveHotbarSlot(Vintagestory.API.Common.SelectedHotbarslotChanged)">
            <summary>
            Registers the given method to be called each time the player changes their current hotbar slot
            </summary>
            <param name = "handler">Method to execute. Must have certain format: void Name(int player)</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.DidBuildBlock(Vintagestory.API.Common.BlockPlace)">
            <summary>
            Registers a method to be called every time a player places a block
            </summary>
            <param name = "handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.DidBreakBlock(Vintagestory.API.Common.BlockBreak)">
            <summary>
            Registers a method to be called every time a player deletes a block
            </summary>
            <param name = "handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.DidUseBlock(Vintagestory.API.Common.BlockUse)">
            <summary>
            Registers a method to be called every time a player uses a block
            </summary>
            <param name = "handler"></param>
        </member>
        <member name="T:Vintagestory.API.Server.IServerAPI">
            <summary>
            API for general Server features
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.Players">
            <summary>
            All players known to the server (which joined at least once)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.Config">
            <summary>
            The servers current configuration as configured in the serverconfig.json. You can set the values but you need to call MarkDirty() to have them saved
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.MarkConfigDirty">
            <summary>
            Marks the config dirty for saving
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.CurrentRunPhase">
            <summary>
            Returns the servers current run phase
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.IsSinglePlayer">
            <summary>
            Returns whether the current server a singpleplayer world
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.IsShuttingDown">
            <summary>
            Determines if the server process has been asked to terminate.
            Use this when you need to save data in a method registered using RegisterOnSave() before server quits.
            </summary>
            <value><i>true</i>
              if server is about to shutdown</value>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.ShutDown">
            <summary>
            Gracefully shuts down the server
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.ServerUptimeSeconds">
            <summary>
            Returns the number of seconds the server has been running since last restart
            </summary>  
            <value>Server uptime in seconds</value>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.ServerUptimeMilliseconds">
            <summary>
            Server uptime in milliseconds
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.TotalWorldPlayTime">
            <summary>
            Returns the number of seconds the current world has been running. This is the playtime displayed on the singleplayer world list.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.Logger">
            <summary>
            Returns a logging interface to log any log level message
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogChat(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Chat
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogBuild(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Build
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogVerboseDebug(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.VerboseDebug
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogDebug(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Debug
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogNotification(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Notification
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogWarning(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Warning
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogError(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Error
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogFatal(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Fatal
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogEvent(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Vintagestory.API.Server.IServerNetworkAPI" -->
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.RegisterChannel(System.String)">
            <summary>   
            Supplies you with your very own and personal network channel that you can use to send packets across the network.  Use the same channelName on the client and server to have them link up.
            </summary>
            <param name="channelName">Unique channel identifier</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.SendBlockEntityPacket(Vintagestory.API.Server.IServerPlayer,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Sends a blockentity packet to the given player. For quick an easy network communication without setting up a channel first.
            </summary>
            <param name="player"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="packetId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.BroadcastBlockEntityPacket(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Broadcasts a blockentity packet to all connected players. For quick an easy network communication without setting up a channel first.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="packetId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.SendArbitraryPacket(System.Byte[],Vintagestory.API.Server.IServerPlayer[])">
            <summary>
            Sends a packet data to given players. This let's you mess with the raw network communication if you know the protocol. Use with caution! For normal network communication you probably want to register your own network channel.
            </summary>
            <param name="data"></param>
            <param name="players"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.BroadcastArbitraryPacket(System.Byte[],Vintagestory.API.Server.IServerPlayer[])">
            <summary>
            Sends a packet data to everyone except given players.This let's you mess with the raw network communication if you know the protocol. Use with caution! For normal network communication you probably want to register your own network channel.
            </summary>
            <param name="data"></param>
            <param name="exceptPlayers"></param>
        </member>
        <member name="T:Vintagestory.API.Server.IServerPlayer">
            <summary>
            Represents a player on the server side that joined the server at least once. May not be online at this point in time.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.ConnectionState">
            <summary>
            Retrieves the current connection state of the client
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.IpAddress">
            <summary>
            Get the IP for the given player ID. Returns null if not connected, or when called on client side.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.Ping">
            <summary>
            Returns the players ping time in seconds. Returns NaN if not connected or when on client side.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.ServerData">
            <summary>
            The players configuration that is world independent
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.Role">
            <summary>
            Returns the players privilege group
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.Privileges">
            <summary>
            Returns all privileges the player currenly has through role or through direct privilege assignment
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.BroadcastPlayerData">
            <summary>
            Notifies all clients of given players playerdata. Useful when you modified any of the WorldData. Does nothing if this player is not connected.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.Disconnect">
            <summary>
            Disconnects (kicks) this player from the server. Does nothing if this player is not connected.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.Disconnect(System.String)">
            <summary>
            Disconnects (kicks) a player from the server with given reason. Does nothing if this player is not connected.
            </summary>
            <param name = "message">Message displayed to the player</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.SendMessage(System.Int32,System.String,Vintagestory.API.Common.EnumChatType,System.String)">
            <summary>
            Sends a chat message to this player to given groupId. You can use GlobalConstants.GeneralChatGroup as groupId to send it to the players general chat.
            </summary>
            <param name="groupId"></param>
            <param name="message"></param>
            <param name="chatType"></param>
            <param name="data">Optional parameter that can be used to pass on unformated data. Just like stdin/stdout/stderr, you could see this as a separate "programming communication channel"</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.HasPrivilege(System.String)">
            <summary>
            Check if a player has the given privilege
            </summary>
            <param name = "privilegeCode">The privilege to check</param>
            <returns>true if the player has the given privilege, false otherwise</returns>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.SetSpawnPosition(Vintagestory.API.Server.PlayerSpawnPos)">
            <summary>
            Sets a player specific spawn position
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.ClearSpawnPosition">
            <summary>
            Removes the player specific spawn position, which means it will default to the role or global default spawn position
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.SpawnPosition">
            <summary>
            Returns the default spawn position.
            This method will return the custom spawnpoint if one has been permanently set.
            If no custom spawnpoint is present this method will return the global default spawnpoint.
            Returns null when called on client side.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.SendPositionToClient">
            <summary>
            Tells the server send a position packet to the client
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.IWorldManagerAPI">
            <summary>
            Methods to modify the game world
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.SaveGame">
            <summary>
            The worlds savegame object. If you change these values they will be permanently stored
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SetBlockLightLevels(System.Single[])">
            <summary>
            Allows setting a 32 float array that defines the brightness of each block light level. Has to be set before any players join or any chunks are generated.
            </summary>
            <param name="lightLevels"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SetSunLightLevels(System.Single[])">
            <summary>
            Allows setting a 32 float array that defines the brightness of each sun light level. Has to be set before any players join or any chunks are generated.
            </summary>
            <param name="lightLevels"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SetSunBrightness(System.Int32)">
            <summary>
            Sets the default light range of sunlight. Default is 24. Has to be set before any players join or any chunks are generated.
            </summary>
            <param name="lightlevel"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SetSealLevel(System.Int32)">
            <summary>
            Sets the default sea level for the world to be generated. Currently used by the client to calculate the correct temperature/rainfall values for climate tinting.
            </summary>
            <param name="sealevel"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetMapRegion(System.Int32,System.Int32)">
            <summary>
            Gets the Server map region at given coordinate. Returns null if it's not loaded or does not exist yet
            </summary>
            <param name="regionX"></param>
            <param name="regionZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetMapChunk(System.Int32,System.Int32)">
            <summary>
            Gets the Server map chunk at given coordinate. Returns null if it's not loaded or does not exist yet
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetChunk(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the Server chunk at given coordinate. Returns null if it's not loaded or does not exist yet
            </summary>
            <param name="chunkX"></param>
            <param name="chunkY"></param>
            <param name="chunkZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetChunk(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Gets the Server chunk at given coordinate. Returns null if it's not loaded or does not exist yet
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetBlockAccessor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieve a customized interface to access blocks in the loaded game world.
            </summary>
            <param name="synchronize">Whether or not a call to Setblock should send the update also to all connected clients</param>
            <param name="relightChunk">Whether or not to relight the whole chunk after the a call to SetBlock</param>
            <param name="strict">Log an error message if GetBlock/SetBlock was called to an unloaded chunk</param>
            <param name="debug">If strict, crashes the server if a unloaded chunk was crashed, prints an exception and exports a png image of the current loaded chunks</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetBlockAccessorBulkUpdate(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieve a customized interface to access blocks in the loaded game world. Does not to relight/sync on a SetBlock until Commit() is called. On commit all touched blocks are relit/synced at once. This method should be used when setting many blocks (e.g. tree generation, explosion, etc.).
            </summary>
            <param name="synchronize"></param>
            <param name="relightChunk"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetBlockAccessorRevertable(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Same as GetBlockAccessorBulkUpdate, additionally, each Commit() stores the previous state and you can perform undo/redo operations on these. 
            </summary>
            <param name="synchronize"></param>
            <param name="relightChunk"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetNextHerdId">
            <summary>
            Returns a number that is guaranteed to be unique for the current world every time it is called. Curently use for entity herding behavior.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.AutoGenerateChunks">
            <summary>
            Completely disables automatic generation of chunks that normally builds up a radius of chunks around the player. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.SendChunks">
            <summary>
            Disables sending of normal chunks to all players except for force loaded ones using ForceLoadChunkColumn
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.ForceLoadChunkColumn(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads/Generates a chunk independent of any nearby players and sends it to all clients ignoring whether this chunk has been sent before or not. The loading happens in a seperate thread, so it might take some time.
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
            <param name="onlyIfInRange">If True will send the chunks only to clients that are in range with their viewdistance</param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.ForceSendChunk(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Forcefully (re-)sends a chunk to all connected clients ignoring whether this chunk has been sent before or not
            </summary>
            <param name="chunkX"></param>
            <param name="chunkY"></param>
            <param name="chunkZ"></param>
            <param name="onlyIfInRange"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.UnloadChunkColumn(System.Int32,System.Int32)">
            <summary>
            Unloads a column of chunks at given coordinate independent of any nearby players and sends an appropriate unload packet to the player
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.DeleteChunkColumn(System.Int32,System.Int32)">
            <summary>
            Deletes a column of chunks at given coordinate from the save file. Also unloads the chunk in the same process.
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.MapSizeX">
            <summary>
            Width of the current world
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.MapSizeY">
            <summary>
            Height of the current world
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.MapSizeZ">
            <summary>
            Length of the current world
            </summary>
            <value></value>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetSurfacePosY(System.Int32,System.Int32)">
            <summary>
            Finds the first y position that is solid ground to stand on. Returns null if the chunk is not loaded.
            </summary>
            <param name="posX"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.RegionSize">
            <summary>
            Width/Length/Height in blocks of a region on the server
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.ChunkSize">
            <summary>
            Width/Length/Height in blocks of a chunk on the server
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.Seed">
            <summary>
            Get the seed used to generate the current world
            </summary>
            <value>The map seed</value>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetData(System.String)">
            <summary>
            Gets a previously saved object from the savegame. Returns null if no such data under this key was previously set.
            </summary>
            <param name = "name">The key to look for</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.StoreData(System.String,System.Byte[])">
            <summary>
            Store the given data persistently to the savegame.
            </summary>
            <param name = "name">Key value</param>
            <param name = "value">Data to save</param>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.CurrentWorldName">
            <summary>
            The current world filename
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.DefaultSpawnPosition">
            <summary>
            Retrieves the default spawnpoint (x/y/z coordinate)
            </summary>
            <value>Default spawnpoint</value>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SetDefaultSpawnPosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            Permanently sets the default spawnpoint
            </summary>
            <param name = "x">X coordinate of new spawnpoint</param>
            <param name = "y">Y coordinate of new spawnpoint</param>
            <param name = "z">Z coordinate of new spawnpoint</param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetBlockType(System.Int32)">
            <summary>
            Get the BlockType object of a certain block ID. This method causes an exception when the ID is not found
            </summary>
            <param name = "blockid">The block ID to search for</param>
            <returns>BlockType object</returns>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.BlockTypes">
            <summary>
            Returns all loaded block types
            </summary>
            <value></value>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SearchBlockTypes(System.String,System.String)">
            <summary>
            Returns all blocktypes starting with given string
            </summary>
            <param name="codeBeginsWith"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.HighlightBlocks(Vintagestory.API.Common.IPlayer,System.Collections.Generic.List{Vintagestory.API.MathTools.BlockPos},Vintagestory.API.Client.EnumHighlightBlocksMode,Vintagestory.API.Common.EnumHighlightShape)">
            <summary>
            Sends given player a list of block positions that should be highlighted
            </summary>
            <param name="player"></param>
            <param name="blocks"></param>
            <param name="mode"></param>
            <param name="shape">When arbitrary, the blocks list represents the blocks to be highlighted. When Cube the blocks list should contain 2 positions for start and end</param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetBlockId(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Get the ID of a certain BlockType
            </summary>
            <param name = "name">Name of the BlockType</param>
            <returns>ID of the BlockType</returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SunFloodChunkColumnForWorldGen(Vintagestory.API.Common.IWorldChunk[],System.Int32,System.Int32)">
            <summary>
            Floods the chunk column with sunlight. Only works on full chunk columns.
            </summary>
            <param name="chunks"></param>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SunFloodChunkColumnNeighboursForWorldGen(Vintagestory.API.Common.IWorldChunk[],System.Int32,System.Int32)">
            <summary>
            Spreads the chunk columns light into neighbour chunks and vice versa. Only works on full chunk columns.
            </summary>
            <param name="chunks"></param>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.FullRelight(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Does a complete relighting of the cuboid deliminated by given min/max pos. Completely resends all affected chunk columns to all connected nearby clients.
            </summary>
            <param name="minPos"></param>
            <param name="maxPos"></param>
        </member>
        <member name="T:Vintagestory.API.Server.INetworkMessage">
            <summary>
            A message to be sent across the network. Is serialized/deserialized using protobuf
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.NetworkClientMessageHandler`1">
            <summary>
            Handler for processing a message
            </summary>
            <param name="fromPlayer"></param>
            <param name="networkMessage"></param>
        </member>
        <member name="T:Vintagestory.API.Server.IServerNetworkChannel">
            <summary>
            Represent a custom network channel for sending messages between client and server
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkChannel.RegisterMessageType(System.Type)">
            <summary>
            Registers a handler for when you send a packet with given messageId
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkChannel.SetMessageHandler``1(Vintagestory.API.Server.NetworkClientMessageHandler{``0})">
            <summary>
            Registers a handler for when you send a packet with given messageId
            </summary>
            <typeparam name="T"></typeparam>
            <param name="messageHandler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkChannel.SendPacket``1(``0,Vintagestory.API.Server.IServerPlayer[])">
            <summary>
            Sends a packet to given player
            </summary>
            <param name="message"></param>
            <param name="players"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkChannel.BroadcastPacket``1(``0,Vintagestory.API.Server.IServerPlayer[])">
            <summary>
            When called on Sends a packet to all connected player, except given players
            </summary>
            <param name="message"></param>
            <param name="exceptPlayers"></param>
        </member>
        <member name="T:Vintagestory.API.Server.IServerPlayerData">
            <summary>
            The player configuration that is world independent
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.PlayerGroupMemberships">
            <summary>
            Returns all player groups which this player is part of
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.CustomPlayerData">
            <summary>
            Store your own custom data in here if you need. Might want to serialize your data to json code first.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldGenHandler.OnMapRegionGen">
            <summary>
            List of registered map region generation handlers
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldGenHandler.OnMapChunkGen">
            <summary>
            List of registered map chunk generation handlers
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldGenHandler.OnChunkColumnGen">
            <summary>
            List of registered map chunk generation handlers per pass (see EnumWorldGenPass)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldGenHandler.WipeAllHandlers">
            <summary>
            Empties all three lists
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldGenBlockAccessor.ScheduleBlockUpdate(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Tells the server to produce a block update at this given position once the chunk is fully generated and world ticking has begun
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldGenBlockAccessor.ScheduleBlockLightUpdate(Vintagestory.API.MathTools.BlockPos,System.UInt16,System.UInt16)">
            <summary>
            Tells the server to relight this position once RunScheduledBlockLightUpdates() is called
            </summary>
            <param name="pos"></param>
            <param name="oldBlockid"></param>
            <param name="newBlockId"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldGenBlockAccessor.RunScheduledBlockLightUpdates">
            <summary>
            This will run all scheduled block light updates at once. Should be called after all lighting has been completed.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldGenBlockAccessor.AddEntity(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Adds given initialized entity to the world. Requires you to set the Pos and ServerPos fields.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Vintagestory.API.Server.IServerWorldAccessor">
            <summary>
            The world accessor implemented by the server
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerWorldAccessor.LoadedEntities">
            <summary>
            The internal cache of all currently loaded entities. Warning: You should not set or remove anything from this dic unless you *really* know what you're doing. Use SpawnEntity/DespawnEntity instead.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerWorldAccessor.DespawnEntity(Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Common.Entities.EntityDespawnReason)">
            <summary>
            Removes an entity from the game and the chunk it resides in
            </summary>
            <param name="entity"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerWorldAccessor.CreateExplosion(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumBlastType,System.Double,System.Double)">
            <summary>
            Creates an explosion at given position. 
            </summary>
            <param name="pos"></param>
            <param name="blastType"></param>
            <param name="destructionRadius"></param>
            <param name="injureRadius"></param>
        </member>
        <member name="P:Vintagestory.API.Server.IServerWorldAccessor.TreeGenerators">
            <summary>
            List of all loaded tree generators
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.EnumClientState">
            <summary>
            The current connection state of a player thats currently connecting to the server
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IChunkProviderThread.GetBlockAccessor(System.Boolean)">
            <summary>
            Retrieve a customized interface to access blocks for generating chunks
            </summary>
            <param name="updateHeightmap">Whether or not SetBlock should update the heightmap</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IChunkProvider.ChunkIndex3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            Index for a chunk coordinate
            </summary>
            <param name="chunkX"></param>
            <param name="chunkY"></param>
            <param name="chunkZ"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Server.EnumProtectionLevel">
            <summary>
            How strongly the Server should protect against hacking
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumProtectionLevel.Off">
            <summary>
            No verification or protection of any kind
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumProtectionLevel.Basic">
            <summary>
            Server will: Verify all players connecting against the vintage story auth server, simulate each players movements and correct the position if the client reports the player at a different positions, verify the players picking range when placing or removing blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumProtectionLevel.Pedantic">
            <summary>
            Not used yet
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.EnumServerRunPhase">
            <summary>
            These are the stages the server goes through during launch
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.Start">
            <summary>
            Before anything has been initialized (you cannot receive any events at this point)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.Initialization">
            <summary>
            Server only stuff initialized, Serversystems instantatied, now initializing ServerSystems then Mods. Serversystem receive events at this point.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.Configuration">
            <summary>
            Everything initialized, now loading config
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.LoadAssets">
            <summary>
            Mods will be compiled, AssetManager will init all origins and cache assets.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.LoadGamePre">
            <summary>
            All configs loaded, game world loaded by server. Mods receive events at this point.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.LoadGame">
            <summary>
            All configs loaded, game world loaded by server. All blocks are loaded.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.RunGame">
            <summary>
            About to run first game world tick. Spawnchunks get loaded.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.Shutdown">
            <summary>
            Shutdown has begun
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.Exit">
            <summary>
            Shutdown complete
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.EnumWorldGenPass">
            <summary>
            The stages a chunk goes through when being created
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.None">
            <summary>
            Nothing generated yet
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.Terrain">
            <summary>
            Does not require neighbour chunks to exist. Should generates 3d rock terrain mostly. Default generators by execute order:
            0 = Basic 3D Terrain (granite+rock)
            0.1 = Rock Strata
            0.3 = Cave generator 
            0.4 = Block layers (soil, gravel, sand, ice, etc.)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.TerrainFeatures">
            <summary>
            Requires neighbour chunks. Ravines, Lakes, Boulders.  Default generators by execute order:
            0.2 = Deposits (Ores, Peat, Clay, etc.)
            0.3 = Worldgen Structures
            0.4 = Above sealevel Lakes
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.Vegetation">
            <summary>
            Requires neighbour chunks. Default generators by execute order:
            0.5 = Block Patches, Shrubs and Trees
            0.9 = Rivulets (single block water sources)
            0.95 = Sunlight flooding only inside current chunk
            0.99 = Snow layer
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.NeighbourSunLightFlood">
            <summary>
            Requires neighbour chunks. Does the lighting of the chunk.
            0.95 = Sunlight flooding into neighbouring chunks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.PreDone">
            <summary>
            Requires neighbour chunks. Nothing left to generate, but neighbour chunks might still generate stuff into this chunk
            0.1 = Generate creatures
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.Done">
            <summary>
            Chunk generation complete. This pass is not triggered as an event. 
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.IServerChunk">
            <summary>
            Some extra methods available for server side chunks
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerChunk.SetModdata(System.String,System.Byte[])">
            <summary>
            Allows setting of arbitrary  moddata of this chunk
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerChunk.GetModdata(System.String)">
            <summary>
            Retrieve arbitrary mod data
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Server.IServerChunk.MapChunk">
            <summary>
            Holds a reference to the current map data of this chunk column
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.buildblocks">
            <summary>
            Place or break blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.useblock">
            <summary>
            Interact with block (e.g. door, chest)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.buildblockseverywhere">
            <summary>
            Place or break blocks everywhere, ignoring area permissons
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.useblockseverywhere">
            <summary>
            Use blocks everywhere, ignoring area permissons
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.freemove">
            <summary>
            Ability to fly or change movepseed
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.gamemode">
            <summary>
            Ability to set own game mode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.pickingrange">
            <summary>
            Ability to set own picking range
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.chat">
            <summary>
            Ability to chat
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.kick">
            <summary>
            Ability to kick players
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.ban">
            <summary>
            Ability to ban/unban a player
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.whitelist">
            <summary>
            Ability to whitelist/unwhitelist a player
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.setwelcome">
            <summary>
            Ability to set welcome message
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.announce">
            <summary>
            Ability to make a server wide announcement
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.readlists">
            <summary>
            Ability to see client, group, banned user and area lists
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.give">
            <summary>
            Ability to create block from given block id
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.buildareamodify">
            <summary>
            Ability to modify block building permissions by area
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.setspawn">
            <summary>
            Ability to set default spawn
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.controlserver">
            <summary>
            Ability to restart/shutdown server, reload mods, etc.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.tp">
            <summary>
            Ability to teleport
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.time">
            <summary>
            Ability to read, modify game world time
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.grantrevoke">
            <summary>
            Ability to add/remove players to player groups and ability to grant/revoke individual privileges. A player can only grant the same or a lower level group and the same or less privileges.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.root">
            <summary>
            Ability to do everything and have all permissions
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.commandplayer">
            <summary>
            Ability to issue a command for another player (e.g. teleport another player or set another players game mode)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.controlplayergroups">
            <summary>
            Ability to join/leave/invite/op own player groups and their chat channels
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.manageplayergroups">
            <summary>
            Ability to create/disband own player groups and their chat channels
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.ICoreServerAPI">
            <summary>
            The core api implemented by the server. The main interface for accessing the server. Contains all sub components and some miscellaneous methods.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.Event">
            <summary>
            API Component for registering to various Events
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.WorldManager">
            <summary>
            API Component for access/modify everything game world related
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.Server">
            <summary>
            API Component for accessing server related functionality
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.Network">
            <summary>
            API for sending/receiving network packets
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.World">
            <summary>
            API for accessing anything in the game world
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.SendMessage(Vintagestory.API.Common.IPlayer,System.Int32,System.String,Vintagestory.API.Common.EnumChatType,System.String)">
            <summary>
            Sends a chat message only to given player in given groupId
            </summary>
            <param name="player"></param>
            <param name="groupId"></param>
            <param name="message"></param>
            <param name="chatType"></param>
            <param name="data">Custom data to a message to be received by the client</param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.SendMessageToGroup(System.Int32,System.String,Vintagestory.API.Common.EnumChatType,System.String)">
            <summary>
            Sends a chat message to all online players in given player group
            </summary>
            <param name="groupid"></param>
            <param name="message"></param>
            <param name="chatType"></param>
            <param name="data">Custom data to a message to be received by the client</param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.BroadcastMessageToAllGroups(System.String,Vintagestory.API.Common.EnumChatType,System.String)">
            <summary>
            Sends a chat message to all online players in all of their channels
            </summary>
            <param name="message"></param>
            <param name="chatType"></param>
            <param name="data">Custom data to a message to be received by the client</param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterPrivilege(System.String,System.String)">
            <summary>
            Registers a user privilege with the server. Is only active for the current server session and lost during a server restart/shutdown, so register it during server startup.
            New privileges are auto-granted to admins and the server console.
            </summary>
            <param name = "code">Privilege to register</param>
            <param name = "shortdescription">Short description</param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.GrantPrivilege(System.String)">
            <summary>
            Grants privilege to all players connected or yet to connect. This setting is only active for the current server session and lost during a server restart/shutdown.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RevokePrivilege(System.String)">
            <summary>
            Revokes a privilege that has been previously granted to all players. Does not revoke privileges granted from a group. Does nothing if this privilege hasn't been previously granted.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.GrantPrivilege(System.String,System.String,System.Boolean)">
            <summary>
            Grant a privilege to an individual connected player. 
            </summary>
            <param name="playerUID"></param>
            <param name="code"></param>
            <param name="permanent">Wether to store this privilege permanently. Otherwise only valid for the active server session.</param>
            <returns>False if player was not found</returns>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RevokePrivilege(System.String,System.String,System.Boolean)">
            <summary>
            Revokes a privilege that has been previously granted to this player. Does not revoke privileges granted from a group. Does nothing if the player does not have given privilege.
            </summary>
            <param name="playerUID"></param>
            <param name="code"></param>
            <param name="permanent">If true it removes a previously granted permanent privilege. If false it removes a previously granted temporary privilege.</param>
            <returns>False if player was not found</returns>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.AddPrivilegeToGroup(System.String,System.String)">
            <summary>
            Add given privilege to given group, granting everyone in this group access to this privilege. This setting is only active for the current server session and lost during a server restart/shutdown.
            </summary>
            <param name="groupCode"></param>
            <param name="privilegeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RemovePrivilegeFromGroup(System.String,System.String)">
            <summary>
            Revokes given privilege to given group, revoking everyones access to this privilege inside this group
            </summary>
            <param name="groupCode"></param>
            <param name="privilegeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.GrantBuildArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Grans a new build area where players may build with given permission level
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="z1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
            <param name="permissionLevel"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RevokeBuildArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes a previously granted area
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="z1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.GetPlayerPermissionLevel(System.Int32)">
            <summary>
            Returns the players permission level
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterItem(Vintagestory.API.Common.Item)">
            <summary>
            Register a new item type
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterBlock(Vintagestory.API.Common.Block)">
            <summary>
            Register a new Block. Must happen before server runphase LoadGame. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name = "block">BlockType to register. The Server assigns a block id and sets block.blockId</param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterCraftingRecipe(Vintagestory.API.Common.GridRecipe)">
            <summary>
            Registers a new crafting recipe. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name="recipe"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterMetalAlloy(Vintagestory.API.Common.AlloyRecipe)">
            <summary>
            Registers a new metal alloy. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name="alloy"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterClayFormingRecipe(Vintagestory.API.Common.ClayFormingRecipe)">
            <summary>
            Registers a new clay forming recipe. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name="recipe"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterTreeGenerator(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Server.ITreeGenerator)">
            <summary>
            Registers a new tree generator
            </summary>
            <param name="generatorCode"></param>
            <param name="gen"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterSmithingRecipe(Vintagestory.API.Common.SmithingRecipe)">
            <summary>
            Registers a new metal smithing recipe. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name="recipe"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterKnappingRecipe(Vintagestory.API.Common.KnappingRecipe)">
            <summary>
            Registers a new flint knapping recipe. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name="recipe"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterCommand(Vintagestory.API.Common.ServerChatCommand)">
            <summary>
            Registers a chat command. When registered on the client you access the command by prefixing a dot (.), on the server it's a slash (/)
            </summary>
            <param name="chatcommand"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterCommand(System.String,System.String,System.String,Vintagestory.API.Common.ServerChatCommandDelegate,System.String)">
            <summary>
            Registers a chat command. When registered on the client you access the command by prefixing a dot (.), on the server it's a slash (/)
            </summary>
            <param name="command"></param>
            <param name="descriptionMsg"></param>
            <param name="syntaxMsg"></param>
            <param name="handler"></param>
            <param name="requiredPrivilege"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Util.StringUtil.UcFirst(System.String)">
            <summary>
            Convert the first character to an uppercase one
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Util.ArrayExtensions.Shuffle``1(``0[],System.Random)">
            <summary>
            Performs a Fisher-Yates shuffle in linear time or O(n)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rand"></param>
            <param name="array"></param>
        </member>
        <member name="M:Vintagestory.API.Util.ListExtensions.Shuffle``1(System.Collections.Generic.List{``0},System.Random)">
            <summary>
            Performs a Fisher-Yates shuffle in linear time or O(n)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rand"></param>
            <param name="array"></param>
        </member>
        <member name="F:Vintagestory.API.Datastructures.SyncedTreeAttribute.allDirty">
            <summary>
            Whole tree will be resent
            </summary>
        </member>
        <member name="F:Vintagestory.API.Datastructures.SyncedTreeAttribute.attributePathsDirty">
            <summary>
            Subtrees will be resent
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.SyncedTreeAttribute.MarkAllDirty">
            <summary>
            Marks the whole attribute tree as dirty, so that it will be resent to all connected clients. Does not trigger modified listeners (because it makes no sense and breaks things)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.SyncedTreeAttribute.MarkPathDirty(System.String)">
            <summary>
            Marks part of the attribute tree as dirty, allowing for a partial update of the attribute tree.
            Has no effect it the whole tree is already marked dirty. If more than 5 paths are marked dirty it will wipe the list of dirty paths and just marked the whole tree as dirty
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Vintagestory.API.Datastructures.TreeAttribute">
            <summary>
            A datastructure to hold generic data for most primitives (int, string, float, etc.). But can also hold generic data using the ByteArrayAttribute + class serialization
            </summary>
        </member>
        <member name="T:Vintagestory.API.Datastructures.IAttribute">
            <summary>
            An attribute from an attribute tree
            </summary>
        </member>
        <member name="T:Vintagestory.API.Datastructures.ITreeAttribute">
            <summary>
            Represents a List of nestable Attributes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Datastructures.ITreeAttribute.Item(System.String)">
            <summary>
            Will return null if given attribute does not exist
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Datastructures.ITreeAttribute.Count">
            <summary>
            Amount of elements in this Tree attribute
            </summary>
        </member>
        <member name="P:Vintagestory.API.Datastructures.ITreeAttribute.Values">
            <summary>
            Returns all values inside this tree attributes
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.HasAttribute(System.String)">
            <summary>
            True if this attribute exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetInt(System.String,System.Int32)">
            <summary>
            Creates an int attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetLong(System.String,System.Int64)">
            <summary>
            Creates a long attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetDouble(System.String,System.Double)">
            <summary>
            Creates a double attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetFloat(System.String,System.Single)">
            <summary>
            Creates a float attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetString(System.String,System.String)">
            <summary>
            Creates a string attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetBytes(System.String,System.Byte[])">
            <summary>
            Creates a byte[] attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetItemstack(System.String,Vintagestory.API.Common.ItemStack)">
            <summary>
            Sets given item stack with given key
            </summary>
            <param name="key"></param>
            <param name="itemstack"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.TryGetInt(System.String)">
            <summary>
            Retrieves an int or null if the key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetInt(System.String,System.Int32)">
            <summary>
            Retrieves an int or default value if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.TryGetLong(System.String)">
            <summary>
            Retrieves a long or null value if key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetLong(System.String,System.Int64)">
            <summary>
            Retrieves a long or default value if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.TryGetFloat(System.String)">
            <summary>
            Retrieves a float or null if the key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetFloat(System.String,System.Single)">
            <summary>
            Retrieves a float or defaultvalue if key is not found
            </summary>
            <param name="key"></param>
            <param name="devaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.TryGetDouble(System.String)">
            <summary>
            Retrieves a double or null if key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetDouble(System.String,System.Double)">
            <summary>
            Retrieves a double or defaultValue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetString(System.String,System.String)">
            <summary>
            Retrieves a string or defaultValue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetBytes(System.String,System.Byte[])">
            <summary>
            Retrieves a byte array or defaultValue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetItemstack(System.String,Vintagestory.API.Common.ItemStack)">
            <summary>
            Retrieves an itemstack or defaultValue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetTreeAttribute(System.String)">
            <summary>
            Retrieves an attribute tree or null if key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.Clone">
            <summary>
            Creates a deep copy of the attribute tree
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Datastructures.IOrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are ordered independently of the key and value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary</typeparam>
        </member>
        <member name="T:Vintagestory.API.Datastructures.LimitedList`1">
            <summary>
            Holds a limited amount of items, discards the lowest index item when an overflow happens
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.LimitedList`1.#ctor(System.Int32)">
            <summary>
            Create a new list with a given maximum capacity
            </summary>
            <param name="maxCapacity"></param>
        </member>
        <member name="T:Vintagestory.API.Datastructures.OrderedDictionary`2">
            <summary>
            Same as your normal C# Dictionary but ensures that the order in which the items are added is remembered. That way you can iterate over the dictionary with the insert order intact or set/get elements by index.
            Taken from http://www.codeproject.com/Articles/18615/OrderedDictionary-T-A-generic-implementation-of-IO
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Vintagestory.API.Datastructures.UniqueQueue`1">
            <summary>
            Same as your normal c# queue but ensures that every element is contained only once using a Hashset.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Vintagestory.API.Datastructures.UniqueQueue`1.Count">
            <summary>
            Amount of elements in the queue
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.UniqueQueue`1.Clear">
            <summary>
            Emptys the queue and the hashset
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.UniqueQueue`1.Contains(`0)">
            <summary>
            Check if given item is contained. Uses the hashset to find the item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.UniqueQueue`1.Enqueue(`0)">
            <summary>
            Adds an item to the queue
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.UniqueQueue`1.Dequeue">
            <summary>
            Removes an item from the queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.UniqueQueue`1.Peek">
            <summary>
            Returns the first item in the queue without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Datastructures.LimitedDictionary`2">
            <summary>
            Can only hold a limited amount of elements, discards oldest elements once the capacity is reached.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Vintagestory.API.Datastructures.LimitedDictionary`2.#ctor(System.Int32)">
            <summary>
            Create a new limited dictionary with given maximum capacity
            </summary>
            <param name="maxCapacity"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.CollisionTester.IsColliding(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.MathTools.Vec3d,System.Boolean)">
            <summary>
            Tests given cuboidf collides with the terrain. By default also checks if the cuboid is merely touching the terrain, set alsoCheckTouch to disable that.
            </summary>
            <param name="blockAccessor"></param>
            <param name="entityBoxRel"></param>
            <param name="pos"></param>
            <param name="alsoCheckTouch"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Crc32Algorithm">
            <summary>
            Implementation of CRC-32.
            This class supports several convenient static methods returning the CRC as UInt32.
            From https://github.com/force-net/Crc32.NET
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintagestory.API.MathTools.Crc32Algorithm"/> class. 
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.Append(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes CRC-32 from multiple buffers.
            Call this method multiple times to chain multiple buffers.
            </summary>
            <param name="initial">
            Initial CRC value for the algorithm. It is zero for the first buffer.
            Subsequent buffers should have their initial value set to CRC value returned by previous call to this method.
            </param>
            <param name="input">Input buffer with data to be checksummed.</param>
            <param name="offset">Offset of the input data within the buffer.</param>
            <param name="length">Length of the input data in the buffer.</param>
            <returns>Accumulated CRC-32 of all buffers processed so far.</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.Append(System.UInt32,System.Byte[])">
            <summary>
            Computes CRC-3C from multiple buffers.
            Call this method multiple times to chain multiple buffers.
            </summary>
            <param name="initial">
            Initial CRC value for the algorithm. It is zero for the first buffer.
            Subsequent buffers should have their initial value set to CRC value returned by previous call to this method.
            </param>
            <param name="input">Input buffer containing data to be checksummed.</param>
            <returns>Accumulated CRC-32 of all buffers processed so far.</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes CRC-32 from input buffer.
            </summary>
            <param name="input">Input buffer with data to be checksummed.</param>
            <param name="offset">Offset of the input data within the buffer.</param>
            <param name="length">Length of the input data in the buffer.</param>
            <returns>CRC-32 of the data in the buffer.</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.Compute(System.Byte[])">
            <summary>
            Computes CRC-32 from input buffer.
            </summary>
            <param name="input">Input buffer containing data to be checksummed.</param>
            <returns>CRC-32 of the buffer.</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.Initialize">
            <summary>
            Resets internal state of the algorithm. Used internally.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends CRC-32 from given buffer
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.HashFinal">
            <summary>
            Computes CRC-32 from <see cref="M:Vintagestory.API.MathTools.Crc32Algorithm.HashCore(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.Set(`0,`0,`0,`0,`0,`0)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.Set(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.IVec3)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.Add(`0,`0,`0)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.Add(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.Sub(`0,`0,`0)">
            <summary>
            Substractes the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.Sub(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Substractes the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.ContainsOrTouches(`0,`0,`0)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.ContainsOrTouches(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.GrowToInclude(System.Int32,System.Int32,System.Int32)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.GrowToInclude(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.ShortestDistanceFrom(`0,`0,`0)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.ShortestDistanceFrom(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.pushOutX(`1,`0,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new x coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.pushOutY(`1,`0,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new y coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.pushOutZ(`1,`0,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new z coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.RotatedCopy(`0,`0,`0,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.RotatedCopy(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.OffsetCopy(`0,`0,`0)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.OffsetCopy(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.Clone">
            <summary>
            Creates a copy of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ShapeUtil.GetSquarePointsSortedByMDist(System.Int32)">
            <summary>
            Returns an array of vectors for each point in a square, sorted by manhatten distance to center, exluding the center point
            </summary>
            <param name="halflength"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ShapeUtil.GetHollowSquarePoints(System.Int32)">
            <summary>
            Returns a square outline of given radius (only for odd lengths)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec4d.Item(System.Int32)">
            <summary>
            Returns the n-th coordinate
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec4f.R">
            <summary>
            Synonum for X
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec4f.G">
            <summary>
            Synonum for Y
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec4f.B">
            <summary>
            Synonum for Z
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec4f.A">
            <summary>
            Synonum for W
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec4f.Item(System.Int32)">
            <summary>
            Returns the n-th coordinate
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Set(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Set(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.IVec3)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Add(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Sub(System.Int32,System.Int32,System.Int32)">
            <summary>
            Substractes the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Sub(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Substractes the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Contains(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.ContainsOrTouches(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.ContainsOrTouches(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.GrowToInclude(System.Int32,System.Int32,System.Int32)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.GrowToInclude(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.ShortestDistanceFrom(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.ShortestDistanceFrom(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.pushOutX(Vintagestory.API.MathTools.Cuboidi,System.Int32,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new x coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.pushOutY(Vintagestory.API.MathTools.Cuboidi,System.Int32,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new y coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.pushOutZ(Vintagestory.API.MathTools.Cuboidi,System.Int32,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new z coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.RotatedCopy(System.Int32,System.Int32,System.Int32,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.RotatedCopy(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.OffsetCopy(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.OffsetCopy(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.IntersectsWith(Vintagestory.API.MathTools.Cuboidi)">
            <summary>
            If the given cuboid intersects with this cubiod
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Clone">
            <summary>
            Creates a copy of the cuboid
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.FastRandom">
            <summary>
            A faster random particularly suitable for worldgen
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastRandom.#ctor(System.Int64)">
            <summary>
            Initialize random with given seed
            </summary>
            <param name="worldSeed"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastRandom.#ctor">
            <summary>
            Initialize random with no seed. Use SetWorldSeed() to initialize
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastRandom.SetWorldSeed(System.Int64)">
            <summary>
            Sets given seed
            </summary>
            <param name="worldSeed"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastRandom.InitPositionSeed(System.Int32,System.Int32)">
            <summary>
            Initializes a position dependent seed, if required
            </summary>
            <param name="xPos"></param>
            <param name="zPos"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastRandom.NextInt(System.Int32)">
            <summary>
            Returns a pseudo random number from 0 - max (excluding max)
            </summary>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastRandom.NextFloat">
            <summary>
            Returns a 6 digit precision random number from 0 - 1
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.EnumAxis">
            <summary>
            Represents an axis in the cartesian coordinate system
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Cuboidd">
            <summary>
            Represents a three dimensional axis-aligned cuboid using two 3d coordinates. Used for collision and selection withes.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Set(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Set(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.IVec3)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Set(Vintagestory.API.MathTools.Cuboidf)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Add(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Add(System.Double,System.Double,System.Double)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Sub(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Substractes the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Sub(System.Double,System.Double,System.Double)">
            <summary>
            Substractes the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ContainsOrTouches(System.Double,System.Double,System.Double)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Contains(System.Double,System.Double,System.Double)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ContainsOrTouches(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.GrowToInclude(System.Int32,System.Int32,System.Int32)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.GrowToInclude(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestDistanceFrom(System.Double,System.Double,System.Double)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestVerticalDistanceFrom(System.Double)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestDistanceFrom(Vintagestory.API.MathTools.Cuboidd)">
            <summary>
            Returns the shortest distance to any point between this and given cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestDistanceFrom(Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the shortest distance to any point between this and given cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestHorizontalDistanceFrom(Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the shortest horizontal distance to any point between this and given cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestDistanceFrom(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.pushOutX(Vintagestory.API.MathTools.Cuboidd,System.Double,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new x coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.pushOutY(Vintagestory.API.MathTools.Cuboidd,System.Double,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new y coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.pushOutZ(Vintagestory.API.MathTools.Cuboidd,System.Double,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new z coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.RotatedCopy(System.Double,System.Double,System.Double,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.RotatedCopy(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.OffsetCopy(System.Double,System.Double,System.Double)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.OffsetCopy(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Intersects(Vintagestory.API.MathTools.Cuboidd)">
            <summary>
            If the given cuboid intersects with this cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Intersects(Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            If the given cuboid intersects with this cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.IntersectsOrTouches(Vintagestory.API.MathTools.Cuboidd)">
            <summary>
            If the given cuboid intersects with this cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.IntersectsOrTouches(Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            If the given cuboid intersects with this cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.IntersectsOrTouches(Vintagestory.API.MathTools.Cuboidf,System.Double,System.Double,System.Double)">
            <summary>
            If the given cuboid intersects with this cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Clone">
            <summary>
            Creates a copy of the cuboid
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Cuboidf">
            <summary>
            Represents a three dimensional axis-aligned cuboid using two 3d coordinates. Used for collision and selection boxes.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Set(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Set(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.IVec3)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Add(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Sub(System.Single,System.Single,System.Single)">
            <summary>
            Substractes the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Sub(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Substractes the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Contains(System.Double,System.Double,System.Double)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.ContainsOrTouches(System.Single,System.Single,System.Single)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.ContainsOrTouches(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.GrowToInclude(System.Int32,System.Int32,System.Int32)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.GrowToInclude(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.ShortestDistanceFrom(System.Single,System.Single,System.Single)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.ShortestDistanceFrom(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.pushOutX(Vintagestory.API.MathTools.Cuboidf,System.Single,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new x coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.pushOutY(Vintagestory.API.MathTools.Cuboidf,System.Single,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new y coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.pushOutZ(Vintagestory.API.MathTools.Cuboidf,System.Single,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new z coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.RotatedCopy(System.Single,System.Single,System.Single,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.RotatedCopy(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.OffsetCopy(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new double precision cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.OffsetCopy(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.OffsetCopyDouble(System.Double,System.Double,System.Double)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.OffsetCopyDouble(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Clone">
            <summary>
            Creates a copy of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Default">
            <summary>
            Returns a new cuboid with default size 1 width/height/length
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.RoundToFracsOf16">
            <summary>
            Makes sure the collisionbox coords are multiples of 1/16th
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec2d">
            <summary>
            Represents a vector of 2 doubles. Go bug Tyron of you need more utility methods in this class.
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec2f">
            <summary>
            Represents a vector of 2 floats. Go bug Tyron of you need more utility methods in this class.
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec4i">
            <summary>
            Represents a vector of 4 ints. Go bug Tyron if you need more utility methods in this class.
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Mat22">
            <summary>
            2x2 Matrix
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Create">
            <summary>
            Creates a new identity mat2
            Returns a new 2x2 matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.CloneIt(System.Single[])">
            <summary>
            Creates a new mat2 initialized with values from an existing matrix
            Returns a new 2x2 matrix
            </summary>
            <param name="a">matrix to clone</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Copy(System.Single[],System.Single[])">
            <summary>
            Copy the values from one mat2 to another
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Identity_(System.Single[])">
            <summary>
            Set a mat2 to the identity matrix
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Transpose(System.Single[],System.Single[])">
            <summary>
            Transpose the values of a mat2
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Invert(System.Single[],System.Single[])">
            <summary>
            Inverts a mat2
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Adjoint(System.Single[],System.Single[])">
            <summary>
            Calculates the adjugate of a mat2
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Determinant(System.Single[])">
            <summary>
            Calculates the determinant of a mat2
            Returns determinant of a
            </summary>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Multiply(System.Single[],System.Single[],System.Single[])">
            <summary>
            Multiplies two mat2's
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the first operand</param>
            <param name="b">the second operand</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Mul(System.Single[],System.Single[],System.Single[])">
            <summary>
            Alias for {@link mat2.multiply}
            </summary>
            <param name="output"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Rotate(System.Single[],System.Single[],System.Single)">
            <summary>
            Rotates a mat2 by the given angle
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the matrix to rotate</param>
            <param name="rad">the angle to rotate the matrix by</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Scale(System.Single[],System.Single[],System.Single[])">
            <summary>
            Scales the mat2 by the dimensions in the given vec2
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the matrix to rotate</param>
            <param name="v">the vec2 to scale the matrix by</param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Mat23">
            <summary>
            2x3 Matrix
            * A mat2d contains six elements defined as:
            * <pre>
            * [a, b,
            *  c, d,
            *  tx,ty]
            * </pre>
            * This is a short form for the 3x3 matrix:
            * <pre>
            * [a, b, 0
            *  c, d, 0
            *  tx,ty,1]
            * </pre>
            * The last column is ignored so the array is shorter and operations are faster.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Create">
            <summary>
            Creates a new identity mat2d
            Returns a new 2x3 matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.CloneIt(System.Single[])">
            <summary>
            Creates a new mat2d initialized with values from an existing matrix
            Returns a new 2x3 matrix
            </summary>
            <param name="a">matrix to clone</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Copy(System.Single[],System.Single[])">
            <summary>
            Copy the values from one mat2d to another
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Identity_(System.Single[])">
            <summary>
            Set a mat2d to the identity matrix
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Invert(System.Single[],System.Single[])">
            <summary>
            Inverts a mat2d
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Determinant(System.Single[])">
            <summary>
            Calculates the determinant of a mat2d
            Returns determinant of a
            </summary>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Multiply(System.Single[],System.Single[],System.Single[])">
            <summary>
            Multiplies two mat2d's
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the first operand</param>
            <param name="b">the second operand</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Mul(System.Single[],System.Single[],System.Single[])">
            <summary>
            Alias for {@link mat2d.multiply} @function
            </summary>
            <param name="output"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Rotate(System.Single[],System.Single[],System.Single)">
            <summary>
            Rotates a mat2d by the given angle
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the matrix to rotate</param>
            <param name="rad">the angle to rotate the matrix by</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Scale(System.Single[],System.Single[],System.Single[])">
            <summary>
            Scales the mat2d by the dimensions in the given vec2
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the matrix to translate</param>
            <param name="v">the vec2 to scale the matrix by</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Translate(System.Single[],System.Single[],System.Single[])">
            <summary>
            Translates the mat2d by the dimensions in the given vec2
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the matrix to translate</param>
            <param name="v">the vec2 to translate the matrix by</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Create">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.FromMat4(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.CloneIt(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Copy(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Identity_(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Transpose(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Invert(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Adjoint(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Determinant(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Multiply(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Mul(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Translate(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Rotate(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Scale(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.FromMat2d(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.FromQuat(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.NormalFromMat4(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.f">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Create">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.FromMat4(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.CloneIt(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Copy(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Identity_(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Transpose(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Invert(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Adjoint(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Determinant(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Multiply(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Mul(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Translate(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Rotate(System.Single[],System.Single[],System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Scale(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.FromMat2d(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.FromQuat(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.NormalFromMat4(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.f">
            **
        </member>
        <member name="T:Vintagestory.API.MathTools.Mat4d">
            <summary>
            4x4 Matrix Math
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Create">
            <summary>
            Creates a new identity mat4
            0 4 8  12
            1 5 9  13
            2 6 10 14
            3 7 11 15
            </summary>
            <returns>{mat4} a new 4x4 matrix</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.CloneIt(System.Double[])">
            <summary>
            Creates a new mat4 initialized with values from an existing matrix
            </summary>
            <param name="a">a matrix to clone</param>
            <returns>{mat4} a new 4x4 matrix</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Copy(System.Double[],System.Double[])">
            <summary>
            Copy the values from one mat4 to another
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Identity(System.Double[])">
            <summary>
            Set a mat4 to the identity matrix
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Transpose(System.Double[],System.Double[])">
            <summary>
            Transpose the values of a mat4
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Invert(System.Double[],System.Double[])">
            <summary>
            Inverts a mat4
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Adjoint(System.Double[],System.Double[])">
            <summary>
            Calculates the adjugate of a mat4   
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Determinant(System.Double[])">
            <summary>
            Calculates the determinant of a mat4
            </summary>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{Number} determinant of a</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Multiply(System.Double[],System.Double[],System.Double[])">
            <summary>
            Multiplies two mat4's
            
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the first operand</param>
            <param name="b">{mat4} b the second operand</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Mul(System.Double[],System.Double[],System.Double[])">
            <summary>
            mat4.multiply
            </summary>
            <param name="output"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Translate(System.Double[],System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Translate a mat4 by the given vector
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="input">{mat4} a the matrix to translate</param>
            <param name="x">{vec3} v vector to translate by</param>
            <param name="y"></param>
            <param name="z"></param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Translate(System.Double[],System.Double[],System.Double[])">
            <summary>
            Translate a mat4 by the given vector
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="input">{mat4} a the matrix to translate</param>
            <param name="translate">{vec3} v vector to translate by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Scale(System.Double[],System.Double[],System.Double[])">
            <summary>
            Scales the mat4 by the dimensions in the given vec3
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to scale</param>
            <param name="v">{vec3} v the vec3 to scale the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Rotate(System.Double[],System.Double[],System.Double,System.Double[])">
            <summary>
            Rotates a mat4 by the given angle
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <param name="axis">{vec3} axis the axis to rotate around</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.RotateX(System.Double[],System.Double[],System.Double)">
            <summary>
            Rotates a matrix by the given angle around the X axis
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.RotateY(System.Double[],System.Double[],System.Double)">
            <summary>
            Rotates a matrix by the given angle around the Y axis
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.RotateZ(System.Double[],System.Double[],System.Double)">
            <summary>
            Rotates a matrix by the given angle around the Z axis
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.FromRotationTranslation(System.Double[],System.Double[],System.Double[])">
            <summary>
            Creates a matrix from a quaternion rotation and vector translation
            This is equivalent to (but much faster than):
                mat4.identity(dest);
                mat4.translate(dest, vec);
                var quatMat = mat4.create();
                quat4.toMat4(quat, quatMat);
                mat4.multiply(dest, quatMat);
            </summary>
            <param name="output">{mat4} out mat4 receiving operation result</param>
            <param name="q">{quat4} q Rotation quaternion</param>
            <param name="v">{vec3} v Translation vector</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.FromQuat(System.Double[],System.Double[])">
            <summary>
            Calculates a 4x4 matrix from the given quaternion
            </summary>
            <param name="output">{mat4} out mat4 receiving operation result</param>
            <param name="q">{quat} q Quaternion to create matrix from</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Frustum(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a frustum matrix with the given bounds
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="left">{Number} left Left bound of the frustum</param>
            <param name="right">{Number} right Right bound of the frustum</param>
            <param name="bottom">{Number} bottom Bottom bound of the frustum</param>
            <param name="top">{Number} top Top bound of the frustum</param>
            <param name="near">{Number} near Near bound of the frustum</param>
            <param name="far">{Number} far Far bound of the frustum</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Perspective(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a perspective projection matrix with the given bounds
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="fovy">{number} fovy Vertical field of view in radians</param>
            <param name="aspect">{number} aspect Aspect ratio. typically viewport width/height</param>
            <param name="near">{number} near Near bound of the frustum</param>
            <param name="far">{number} far Far bound of the frustum</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Ortho(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a orthogonal projection matrix with the given bounds
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="left">{number} left Left bound of the frustum</param>
            <param name="right">{number} right Right bound of the frustum</param>
            <param name="bottom">{number} bottom Bottom bound of the frustum</param>
            <param name="top">{number} top Top bound of the frustum</param>
            <param name="near">{number} near Near bound of the frustum</param>
            <param name="far">{number} far Far bound of the frustum</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.LookAt(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Generates a look-at matrix with the given eye position, focal point, and up axis
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="eye">{vec3} eye Position of the viewer</param>
            <param name="center">{vec3} center Point the viewer is looking at</param>
            <param name="up">{vec3} up vec3 pointing up</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.MulWithVec4(System.Double[],System.Double[])">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            Returns a new vec4 vector
            </summary>
            <param name="matrix"></param>
            <param name="vec4"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.MulWithVec4(System.Double[],System.Double[],Vintagestory.API.MathTools.Vec4d)">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            </summary>
            <param name="matrix"></param>
            <param name="vec4"></param>
            <param name="outVal"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.MulWithVec4(System.Double[],Vintagestory.API.MathTools.Vec4d,Vintagestory.API.MathTools.Vec4d)">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            
            </summary>
            <param name="matrix"></param>
            <param name="inVal"></param>
            <param name="outVal"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Mat4f">
            <summary>
            4x4 Matrix Math
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Create">
            <summary>
            Creates a new identity mat4
            0 4 8  12
            1 5 9  13
            2 6 10 14
            3 7 11 15
            </summary>
            <returns>{mat4} a new 4x4 matrix</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.CloneIt(System.Single[])">
            <summary>
            Creates a new mat4 initialized with values from an existing matrix
            </summary>
            <param name="a">a matrix to clone</param>
            <returns>{mat4} a new 4x4 matrix</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Copy(System.Single[],System.Single[])">
            <summary>
            Copy the values from one mat4 to another
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Identity(System.Single[])">
            <summary>
            Set a mat4 to the identity matrix
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Transpose(System.Single[],System.Single[])">
            <summary>
            Transpose the values of a mat4
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Invert(System.Single[],System.Single[])">
            <summary>
            Inverts a mat4
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Adjoint(System.Single[],System.Single[])">
            <summary>
            Calculates the adjugate of a mat4   
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Determinant(System.Single[])">
            <summary>
            Calculates the determinant of a mat4
            </summary>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{Number} determinant of a</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Multiply(System.Single[],System.Single[],System.Single[])">
            <summary>
            Multiplies two mat4's
            
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the first operand</param>
            <param name="b">{mat4} b the second operand</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Mul(System.Single[],System.Single[],System.Single[])">
            <summary>
            mat4.multiply
            </summary>
            <param name="output"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Translate(System.Single[],System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            Translate a mat4 by the given vector
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="input">{mat4} a the matrix to translate</param>
            <param name="x">{vec3} v vector to translate by</param>
            <param name="y"></param>
            <param name="z"></param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Translate(System.Single[],System.Single[],System.Single[])">
            <summary>
            Translate a mat4 by the given vector
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="input">{mat4} a the matrix to translate</param>
            <param name="translate">{vec3} v vector to translate by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Scale(System.Single[],System.Single[],System.Single[])">
            <summary>
            Scales the mat4 by the dimensions in the given vec3
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to scale</param>
            <param name="v">{vec3} v the vec3 to scale the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Scale(System.Single[],System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            Scales the mat4 by the dimensions in the given vec3
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to scale</param>
            <param name="v">{vec3} v the vec3 to scale the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Rotate(System.Single[],System.Single[],System.Single,System.Single[])">
            <summary>
            Rotates a mat4 by the given angle
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <param name="axis">{vec3} axis the axis to rotate around</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.RotateX(System.Single[],System.Single[],System.Single)">
            <summary>
            Rotates a matrix by the given angle around the X axis
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.RotateY(System.Single[],System.Single[],System.Single)">
            <summary>
            Rotates a matrix by the given angle around the Y axis
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.RotateZ(System.Single[],System.Single[],System.Single)">
            <summary>
            Rotates a matrix by the given angle around the Z axis
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.FromRotationTranslation(System.Single[],System.Single[],System.Single[])">
            <summary>
            Creates a matrix from a quaternion rotation and vector translation
            This is equivalent to (but much faster than):
                mat4.identity(dest);
                mat4.translate(dest, vec);
                var quatMat = mat4.create();
                quat4.toMat4(quat, quatMat);
                mat4.multiply(dest, quatMat);
            </summary>
            <param name="output">{mat4} out mat4 receiving operation result</param>
            <param name="q">{quat4} q Rotation quaternion</param>
            <param name="v">{vec3} v Translation vector</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.FromQuat(System.Single[],System.Single[])">
            <summary>
            Calculates a 4x4 matrix from the given quaternion
            </summary>
            <param name="output">{mat4} out mat4 receiving operation result</param>
            <param name="q">{quat} q Quaternion to create matrix from</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Frustum(System.Single[],System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generates a frustum matrix with the given bounds
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="left">{Number} left Left bound of the frustum</param>
            <param name="right">{Number} right Right bound of the frustum</param>
            <param name="bottom">{Number} bottom Bottom bound of the frustum</param>
            <param name="top">{Number} top Top bound of the frustum</param>
            <param name="near">{Number} near Near bound of the frustum</param>
            <param name="far">{Number} far Far bound of the frustum</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Perspective(System.Single[],System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generates a perspective projection matrix with the given bounds
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="fovy">{number} fovy Vertical field of view in radians</param>
            <param name="aspect">{number} aspect Aspect ratio. typically viewport width/height</param>
            <param name="near">{number} near Near bound of the frustum</param>
            <param name="far">{number} far Far bound of the frustum</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Ortho(System.Single[],System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generates a orthogonal projection matrix with the given bounds
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="left">{number} left Left bound of the frustum</param>
            <param name="right">{number} right Right bound of the frustum</param>
            <param name="bottom">{number} bottom Bottom bound of the frustum</param>
            <param name="top">{number} top Top bound of the frustum</param>
            <param name="near">{number} near Near bound of the frustum</param>
            <param name="far">{number} far Far bound of the frustum</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.LookAt(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Generates a look-at matrix with the given eye position, focal point, and up axis
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="eye">{vec3} eye Position of the viewer</param>
            <param name="center">{vec3} center Point the viewer is looking at</param>
            <param name="up">{vec3} up vec3 pointing up</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec4(System.Single[],System.Single[])">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            Returns a new vec4 vector
            </summary>
            <param name="matrix"></param>
            <param name="vec4"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec4(System.Single[],System.Single[],Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            </summary>
            <param name="matrix"></param>
            <param name="vec4"></param>
            <param name="outVal"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec4(System.Single[],Vintagestory.API.MathTools.Vec4f,Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            
            </summary>
            <param name="matrix"></param>
            <param name="inVal"></param>
            <param name="outVal"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Create">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.RotationTo(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.SetAxes(System.Double[],System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.CloneIt(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.FromValues(System.Double,System.Double,System.Double,System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Copy(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Set(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Identity_(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.SetAxisAngle(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Add(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Multiply(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Mul(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Scale(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.RotateX(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.RotateY(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.RotateZ(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.CalculateW(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Dot(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Lerp(System.Double[],System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Slerp(System.Double[],System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Invert(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Conjugate(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Length_(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Len(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.SquaredLength(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.SqrLen(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.Normalize(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternion.FromMat3(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Create">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.CloneIt(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.FromValues(System.Double,System.Double,System.Double,System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Copy(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Set(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Add(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Subtract(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Sub(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Multiply(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Mul(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Divide(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Div(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Min(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Max(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Scale(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.ScaleAndAdd(System.Double[],System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Distance(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Dist(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.SquaredDistance(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.SqrDist(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Length_(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Len(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.SquaredLength(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.SqrLen(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Negate(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Normalize(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Dot(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.Lerp(System.Double[],System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.TransformMat4(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4.transformQuat(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec3Utils">
            <summary>
            Don't use this class unless you need it to interoperate with Mat4d
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Create">
            Creates a new, empty vec3
            Returns {vec3} a new 3D vector.
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.CloneIt(System.Double[])">
            Creates a new vec3 initialized with values from an existing vector
            Returns {vec3} a new 3D vector
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.FromValues(System.Double,System.Double,System.Double)">
            Creates a new vec3 initialized with the given values
            Returns {vec3} a new 3D vector
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Copy(System.Double[],System.Double[])">
             Copy the values from one vec3 to another
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Set(System.Double[],System.Double,System.Double,System.Double)">
            Set the components of a vec3 to the given values
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Add(System.Double[],System.Double[],System.Double[])">
            Adds two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Substract(System.Double[],System.Double[],System.Double[])">
            Subtracts vector b from vector a
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Sub(System.Double[],System.Double[],System.Double[])">
            Alias for {@link vec3.subtract}
            @function
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Multiply(System.Double[],System.Double[],System.Double[])">
            Multiplies two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Mul(System.Double[],System.Double[],System.Double[])">
            Alias for {@link vec3.multiply}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Divide(System.Double[],System.Double[],System.Double[])">
            Divides two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Div(System.Double[],System.Double[],System.Double[])">
            Alias for {@link vec3.divide}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Min(System.Double[],System.Double[],System.Double[])">
            Returns the minimum of two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Max(System.Double[],System.Double[],System.Double[])">
            Returns the maximum of two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Scale(System.Double[],System.Double[],System.Double)">
            Scales a vec3 by a scalar number
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.ScaleAndAdd(System.Double[],System.Double[],System.Double[],System.Double)">
            Adds two vec3's after scaling the second operand by a scalar value
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Distance(System.Double[],System.Double[])">
            Calculates the euclidian distance between two vec3's
            @returns {Number} distance between a and b
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Dist(System.Double[],System.Double[])">
            Alias for {@link vec3.distance}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.SquaredDistance(System.Double[],System.Double[])">
            Calculates the squared euclidian distance between two vec3's
            @returns {Number} squared distance between a and b
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.SqrDist(System.Double[],System.Double[])">
            Alias for {@link vec3.squaredDistance}
            @function
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Length_(System.Double[])">
            Calculates the length of a vec3
            @returns {Number} length of a
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Len(System.Double[])">
            Alias for {@link vec3.length}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.SquaredLength(System.Double[])">
            Calculates the squared length of a vec3
            @returns {Number} squared length of a
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.SqrLen(System.Double[])">
            Alias for {@link vec3.squaredLength}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Negate(System.Double[],System.Double[])">
            Negates the components of a vec3
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Normalize(System.Double[],System.Double[])">
            Normalize a vec3
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Dot(System.Double[],System.Double[])">
            Calculates the dot product of two vec3's
            @returns {Number} dot product of a and b
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Cross(System.Double[],System.Double[],System.Double[])">
            Computes the cross product of two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.Lerp(System.Double[],System.Double[],System.Double[],System.Double)">
            Performs a linear interpolation between two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.TransformMat3(System.Double[],System.Double[],System.Double[])">
            Transforms the vec3 with a mat3.
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utils.TransformQuat(System.Double[],System.Double[],System.Double[])">
            Transforms the vec3 with a quat
            @returns {vec3} out
        </member>
        <member name="T:Vintagestory.API.MathTools.ColorUtil">
            <summary>
            Many utility methods and fields for working with colors
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.HueBits">
            <summary>
            Amount of bits per block that are available to store the hue value
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.SatBits">
            <summary>
            Amount of bits per block that are available to store the saturation value
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.BrightBits">
            <summary>
            Amount of bits per block that are available to store the brightness value
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.OpaqueAlpha">
            <summary>
            255 &lt;&lt; 24
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.ClearAlpha">
            <summary>
            ~(255 &lt;&lt; 24)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteRgbVec">
            <summary>
            White opaque color as normalized float values (0..1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteArgbVec">
            <summary>
            White opaque color as normalized float values (0..1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteArgbFloat">
            <summary>
            White opaque color as normalized float values (0..1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteArgbDouble">
            <summary>
            White opaque color as normalized float values (0..1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteArgbBytes">
            <summary>
            White opaque argb color as bytes (0..255)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteAhsvBytes">
            <summary>
            White opaque ahsv color as bytes (0..255)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteArgb">
            <summary>
            White opaque argb color
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteAhsl">
            <summary>
            White opaque AHSV color
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.BlackArgb">
            <summary>
            Black opaque rgb color
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.BlackRgbVec">
            <summary>
            Black opaque rgb color
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.BlackArgbVec">
            <summary>
            Black opaque rgb color
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.BlackArgbDouble">
            <summary>
            White opaque color as normalized float values (0..1)
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ToBGRABytes(System.Int32)">
            <summary>
            Splits up a 32bit int color into 4 1 byte components, in BGRA order (Alpha channel at the highest 8 bits)
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ToRGBABytes(System.Int32)">
            <summary>
            Splits up a 32bit int color into 4 1 byte components, in RGBA order
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ToRGBAFloats(System.Int32)">
            <summary>
            Returns a 4 element rgb float with values between 0..1
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ToRGBVec3f(System.Int32,Vintagestory.API.MathTools.Vec3f@)">
            <summary>
            Returns a 4 element rgb float with values between 0..1
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ToRGBADoubles(System.Int32)">
            <summary>
            Returns a 4 element rgb double with values between 0..1
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorMultiply(System.Byte[],System.Byte[])">
            <summary>
            Multiplies two colors together: c=(a*b)/255
            </summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorMultiplyEach(System.Int32,System.Int32)">
            <summary>
            Multiplies two colors together c=(a*b)/255
            </summary>
            <param name="color"></param>
            <param name="color2"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorMultiply3(System.Int32,System.Single)">
            <summary>
            Multiplies a float value to the rgb color channels, leaves alpha channel unchanged
            </summary>
            <param name="color"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorMultiply4(System.Int32,System.Single)">
            <summary>
            Multiplies a float value to every color channel including the alpha component.
            </summary>
            <param name="color"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorAverage(System.Int32[],System.Single[])">
            <summary>
            Averages several colors together
            </summary>
            <param name="colors"></param>
            <param name="weights"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorMixRGB(System.Int32,System.Int32,System.Single)">
            <summary>
            Mixes 2 colors in RGB Space
            When c2weight = 0 resulting color is color1, when c2weight = 1 then resulting color is color2
            Resulting color alpha value is 100% color1 alpha
            </summary>
            <param name="rgb1"></param>
            <param name="rgb2"></param>
            <param name="c2weight"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorOver(System.Int32,System.Int32)">
            <summary>
            Overlays rgb1 on top of rgb2, based on their alph values
            </summary>
            <param name="rgb1"></param>
            <param name="rgb2"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorCombineHSV(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines two HSV colors by converting them to rgb then back to hsv. Uses the brightness as a weighting factor. Also leaves the brightness at the max of both hsv colors.
            </summary>
            <param name="h1"></param>
            <param name="s1"></param>
            <param name="v1"></param>
            <param name="h2"></param>
            <param name="s2"></param>
            <param name="v2"></param>
            <returns>Combined HSV Color</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorSubstractHSV(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes HSV2 from HSV1 by converting them to rgb then back to hsv. Uses the brightness as a weighting factor. Leaves brightness unchanged.
            </summary>
            <param name="h1"></param>
            <param name="s1"></param>
            <param name="v1"></param>
            <param name="h2"></param>
            <param name="s2"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorFromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Pack the 4 color components into a single ARGB 32bit int
            </summary>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorA(System.Int32)">
            <summary>
            Returns alpha value of given color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorR(System.Int32)">
            <summary>
            Returns red value of given color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorG(System.Int32)">
            <summary>
            Returns green value of given color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorB(System.Int32)">
            <summary>
            Returns blue value of given color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorToString(System.Int32)">
            <summary>
            Returns human a readable string of given color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.RGB2HSV(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts given RGB values into it's respective HSV Representation (all values in range of 0-255)
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.RGB2HSV(System.Int32)">
            <summary>
            Converts given RGB value into it's respective HSV Representation (all values in range of 0-255)
            </summary>
            <param name="rgb"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.RGB2HSVInts(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts given RGB values into it's respective HSV Representation (all values in range of 0-255)
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.HSV2RGB(System.Int32)">
            <summary>
            Converts given HSV value into it's respective RGB Representation (all values in range of 0-255)
            </summary>
            <param name="hsv"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.HSV2RGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts given HSV values into it's respective RGB Representation (all values in range of 0-255)
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.GrayscaleColor(System.Byte)">
            <summary>
            Returns a fully opaque gray color with given brightness
            </summary>
            <param name="brightness"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.HSV2ARGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts given HSB values into it's respective ARGB Representation (all values in range of 0-255, alpha always 255)
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.HSV2ARGB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts given HSB values into it's respective ARGB Representation (all values in range of 0-255)
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.HSV2RGBInts(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts given HSB values into it's respective HSV Representation (all values in range of 0-255)
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.HSVa2RGBaBytes(System.Byte[])">
            <summary>
            Converts given HSVA values into it's respective RGBA Representation (all values in range of 0-255)
            </summary>
            <param name="hsva"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.BlockFacing">
            <summary>
            Represents one of the 6 faces of a cube and all it's properties. Uses a right Handed Coordinate System. See also http://www.matrix44.net/cms/notes/opengl-3d-graphics/coordinate-systems-in-opengl
            In short: 
            North: Negative Z
            East: Positive X
            South: Positive Z
            West: Negative X
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.HorizontalFlags">
            <summary>
            All horizontal blockfacing flags combined
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.VerticalFlags">
            <summary>
            All vertical blockfacing flags combined
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.ALLFACES">
            <summary>
            All block faces in the order of N, E, S, W, U, D
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.HORIZONTALS">
            <summary>
            Array of horizontal faces (N, E, S, W)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.VERTICALS">
            <summary>
            Array of vertical faces (U, D)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.HORIZONTALS_ANGLEORDER">
            <summary>
            Array of horizontal faces in angle order (0°, 90°, 180°, 270°) => (E, N, W, S)
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Flag">
            <summary>
            The faces byte flag
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Index">
            <summary>
            The index of the face (N=0, E=1, S=2, W=3, U=4, D=5)
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.HorizontalAngleIndex">
            <summary>
            The angle index of the face (E = 0, N = 1, W = 2, S = 3)
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Normali">
            <summary>
            Returns a normal vector of this face
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Normalf">
            <summary>
            Returns a normal vector of this face
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.NormalByte">
            <summary>
            Returns a normal vector of this face encoded in 6 bits/
            bit 0: 1 if south or west
            bit 1: sign bit 
            bit 2: 1 if up or down
            bit 3: sign bit 
            bit 4: 1 if north or south
            bit 5: sign bit 
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.NormalPacked">
            <summary>
            Normalized normal vector in format GL_INT_2_10_10_10_REV
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.PlaneCenter">
            <summary>
            Returns the center position of this face
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Code">
            <summary>
            Returns the string north, east, south, west, up or down
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.IsHorizontal">
            <summary>
            True if this face is N,E,S or W
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.IsVertical">
            <summary>
            True if this face is U or D
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Axis">
            <summary>
            The normal axis of this vector.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.GetOpposite">
            <summary>
            Returns the opposing face
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.GetCW">
            <summary>
            Returns the face if current face would be horizontally clockwise rotated, only works for horizontal faces
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.GetCCW">
            <summary>
            Returns the face if current face would be horizontally counter-clockwise rotated, only works for horizontal faces
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.FromCode(System.String)">
            <summary>
            Returns the face if code is 'north', 'east', 'south', 'west', 'north', 'up' or 'down'. Otherwise null.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.FromFirstLetter(System.String)">
            <summary>
            Returns the face if code is 'n', 'e', 's', 'w', 'n', 'u' or 'd'. Otherwise null.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.HorizontalFromAngle(System.Single)">
            <summary>
            Returns the closest horizontal face from given angle (0 degree = east). Uses HORIZONTALS_ANGLEORDER
            </summary>
            <param name="radiant"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.FaceWhenRotatedBy(System.Single,System.Single,System.Single)">
            <summary>
            Applies a 3d rotation on the face and returns the face thats closest to the rotated face
            </summary>
            <param name="radX"></param>
            <param name="radY"></param>
            <param name="radZ"></param>
            <returns></returns>     
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.GetFaceBrightness(System.Single,System.Single,System.Single,System.Single[])">
            <summary>
            Rotates the face by given angle and returns the interpolated brightness of this face.
            </summary>
            <param name="radX"></param>
            <param name="radY"></param>
            <param name="radZ"></param>
            <param name="BlockSideBrightnessByFacing">Array of brightness values between 0 and 1 per face. In index order (N, E, S, W, U, D)</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.GetFaceBrightness(System.Double[],System.Single[])">
            <summary>
            Rotates the face by given angle and returns the interpolated brightness of this face.
            </summary>
            <param name="matrix"></param>
            <param name="BlockSideBrightnessByFacing">Array of brightness values between 0 and 1 per face. In index order (N, E, S, W, U, D)</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.FlagContains(System.Byte,Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Returns true if given byte flags contain given face 
            </summary>
            <param name="flag"></param>
            <param name="facing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.FlagContainsHorizontals(System.Byte)">
            <summary>
            Returns true if given byte flags contains a horizontal face
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.BlockPos">
            <summary>
            A useful data structure when operating with block postions.<br/>
            Valuable Hint: Make use of Copy() or the XXXCopy() variants where needed. A common pitfall is writing code like: BlockPos abovePos = pos.Up(); - with this code abovePos and pos will reference to the same object!
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockPos.Item(System.Int32)">
            <summary>
            0 = x, 1 = y, 2 = z
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Up(System.Int32)">
            <summary>
            Move the position vertically up
            </summary>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Down(System.Int32)">
            <summary>
            Move the position vertically down
            </summary>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Set(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets XYZ to new vlaues
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.WestCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and moves the position by the given length to the west
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.SouthCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and moves the position by the given length to the south
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.EastCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and moves the position by the given length to the east
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.NorthCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and moves the position by the given length to the north
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.DownCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and moves the position by the given length down
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.UpCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and moves the position by the given length up
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Copy">
            <summary>
            Creates a copy of this block positions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Add(System.Single,System.Single,System.Single)">
            <summary>
            Offsets the position by given xyz
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dz"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Offsets the position by given xyz
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dz"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Add(Vintagestory.API.MathTools.Vec3i)">
            <summary>
            Offsets the position by given xyz vector
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Add(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Offsets the position by given xyz vector
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Add(Vintagestory.API.MathTools.BlockFacing,System.Int32)">
            <summary>
            Offsets the position into the direction of given block face
            </summary>
            <param name="facing"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Offset(Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Offsets the position into the direction of given block face
            </summary>
            <param name="facing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.AddCopy(System.Single,System.Single,System.Single)">
            <summary>
            Creates a copy of this block positions and offsets it by given xyz
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dz"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.AddCopy(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a copy of this block positions and offsets it by given xyz
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dz"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.AddCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and offsets it by given xyz
            </summary>
            <param name="xyz"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.AddCopy(Vintagestory.API.MathTools.Vec3i)">
            <summary>
            Creates a copy of this block positions and offsets it by given xyz
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.AddCopy(Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Creates a copy of this block positions and offsets it in the direction of given block face
            </summary>
            <param name="facing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.AddCopy(Vintagestory.API.MathTools.BlockFacing,System.Int32)">
            <summary>
            Creates a copy of this block positions and offsets it in the direction of given block face
            </summary>
            <param name="facing"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Sub(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Substract a position => you'll have the manhatten distance 
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.SubCopy(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Substract a position => you'll have the manhatten distance 
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.DivCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and divides it by given factor
            </summary>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.DistanceTo(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the Euclidean distance to between this and given position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.DistanceTo(System.Double,System.Double,System.Double)">
            <summary>
            Returns the Euclidean distance to between this and given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.DistanceSqTo(System.Double,System.Double,System.Double)">
            <summary>
            Returns the squared Euclidean distance to between this and given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.HorDistanceSqTo(System.Double,System.Double)">
            <summary>
            Returns the squared Euclidean horizontal distance to between this and given position
            </summary>
            <param name="x"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.HorizontalManhattenDistance(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the manhatten distance to given position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.ManhattenDistance(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the manhatten distance to given position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.ManhattenDistance(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the manhatten distance to given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.ToVec3d">
            <summary>
            Creates a new instance of a Vec3d initialized with this position
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.ToVec3i">
            <summary>
            Creates a new instance of a Vec3i initialized with this position
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec2i">
            <summary>
            Represents a vector of 2 ints. Go bug Tyron if you need more utility methods in this class.
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec3d">
            <summary>
            Represents a vector of 3 doubles. Go bug Tyron of you need more utility methods in this class.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3d.#ctor(Vintagestory.API.MathTools.Vec4d)">
            <summary>
            Create a new vector with given coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec3d.Item(System.Int32)">
            <summary>
            Returns the n-th coordinate
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec3f">
            <summary>
            Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class.
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.Vec3f.X">
            <summary>
            The X-Component of the vector
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.Vec3f.Y">
            <summary>
            The Y-Component of the vector
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.Vec3f.Z">
            <summary>
            The Z-Component of the vector
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec3f.R">
            <summary>
            Synonum for X
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec3f.G">
            <summary>
            Synonum for Y
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec3f.B">
            <summary>
            Synonum for Z
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.#ctor">
            <summary>
            Creates a new vector with x/y/z = 0
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a new vector with given coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.#ctor(Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Create a new vector with given coordinates
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.#ctor(System.Single[])">
            <summary>
            Create a new vector with given coordinates
            </summary>
            <param name="values"></param>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec3f.Item(System.Int32)">
            <summary>
            Returns the n-th coordinate
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Length">
            <summary>
            Returns the length of this vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Dot(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Returns the dot product with given vector
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Dot(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Returns the dot product with given vector
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds given x/y/z coordinates to the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Mul(System.Single)">
            <summary>
            Multiplies each coordinate with given multiplier
            </summary>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Clone">
            <summary>
            Creates a copy of the vetor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Normalize">
            <summary>
            Turns the vector into a unit vector with length 1, but only if length is non-zero
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Distance(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Calculates the distance the two endpoints
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.AddCopy(System.Single,System.Single,System.Single)">
            <summary>
            Adds given coordinates to a new vectors and returns it. The original calling vector remains unchanged
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.AddCopy(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Adds both vectors into a new vector. Both source vectors remain unchanged.
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.ReduceBy(System.Single)">
            <summary>
            Substracts val from each coordinate if the coordinate if positive, otherwise it is added. If 0, the value is unchanged. The value must be a positive number
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.NormalizedCopy">
            <summary>
            Creates a new vectors that is the normalized version of this vector. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.ToVec3d">
            <summary>
            Creates a new double precision vector with the same coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Set(System.Single,System.Single,System.Single)">
            <summary>
            Sets the vector to this coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Set(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Sets the vector to the coordinates of given vector
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Set(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Sets the vector to the coordinates of given vector
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.ToString">
            <summary>
            Simple string represenation of the x/y/z components
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec3i">
            <summary>
            Represents a vector of 3 ints. Go bug Tyron if you need more utility methods in this class.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3i.Reduce(System.Int32)">
            <summary>
            Substracts val from each coordinate if the coordinate if positive, otherwise it is added. If 0, the value is unchanged. The value must be a positive number
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3i.ToChunkIndex">
            <summary>
            27 lowest bits for X Coordinate, then 27 bits for Z coordinate and the highest 10 bits for Y coordinate
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.EnumTransformFunction">
            <summary>
            Used for EvolvingNatFloat value transforms
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.IDENTICAL">
            <summary>
            y = firstval
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.LINEAR">
            <summary>
            y = firstval + factor * seq
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.LINEARNULLIFY">
            <summary>
            y = factor > 0 ? Math.Min(0, firstval + factor * seq) : Math.Max(0, firstval + factor * seq)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.LINEARREDUCE">
            <summary>
            firstval - firstval / Math.Abs(firstval) * factor * seq
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.LINEARINCREASE">
            <summary>
            firstval + firstval / Math.Abs(firstval) * factor * seq
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.QUADRATIC">
            <summary>
            firstval + Math.Sign(factor) * (factor * seq) * (factor * seq)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.INVERSELINEAR">
            <summary>
            firstval + 1f / (1f + factor * seq)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.ROOT">
            <summary>
            firstval + (float)Math.Sqrt(factor * seq)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.SINUS">
            <summary>
            firstval + GameMath.FastSin(factor * seq)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.CLAMPEDPOSITIVESINUS">
            <summary>
            firstval * GameMath.Min(5 * Math.Abs(GameMath.FastSin(factor * seq)), 1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.COSINUS">
            <summary>
            firstval + GameMath.FastCos(factor * seq)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.SMOOTHSTEP">
            <summary>
            firstval + GameMath.SmoothStep(factor * seq)
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.GameMath">
            <summary>
            A large set of useful game mathematics functions
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FastSin(System.Single)">
            <summary>
            Faster Sin at the cost of lower accuracy
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FastCos(System.Single)">
            <summary>
            Faster Cos at the cost of lower accuracy
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FastSinDeg(System.Single)">
            <summary>
            Faster Sin at the cost of lower accuracy
            </summary>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FastCosDeg(System.Single)">
            <summary>
            Faster Cos at the cost of lower accuracy
            </summary>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FastSqrt(System.Single)">
            <summary>
            Faster square root but at the cost of lower accuracy
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Mod(System.Int32,System.Int32)">
            <summary>
            C#'s %-Operation is actually not modulo but remainder, so this is the actual modulo function that ensures positive numbers as return value
            </summary>
            <param name="k"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Mod(System.Single,System.Single)">
            <summary>
            C#'s %-Operation is actually not modulo but remainder, so this is the actual modulo function that ensures positive numbers as return value
            </summary>
            <param name="k"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Mod(System.Double,System.Double)">
            <summary>
            C#'s %-Operation is actually not modulo but remainder, so this is the actual modulo function that ensures positive numbers as return value
            </summary>
            <param name="k"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.AngleDegDistance(System.Single,System.Single)">
            <summary>
            Returns the shortest distance between 2 angles
            See also https://stackoverflow.com/a/14498790/1873041
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.AngleRadDistance(System.Single,System.Single)">
            <summary>
            Returns the shortest distance between 2 angles
            See also https://stackoverflow.com/a/14498790/1873041
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.GenGaussKernel(System.Double,System.Int32)">
            <summary>
            Generates a gaussian blur kernel to be used when blurring something
            </summary>
            <param name="sigma"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiLerpColorMap(Vintagestory.API.IntMap,System.Int32)">
            <summary>
            Does linear interpolation on a 2d map for each of the 4 bytes individually (e.g. RGBA color). It's basically a bilinear zoom of an image like you know it from common image editing software. Only intended for square images.
            The resulting map will be without any paddding (also requires at least 1 padding at bottom and left side)
            </summary>
            <param name="map"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiLerpByte(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Linear Interpolates one selected bytes of the 4 ints
            </summary>
            <param name="lx"></param>
            <param name="ly"></param>
            <param name="byteIndex">0, 1, 2 or 3</param>
            <param name="leftTop"></param>
            <param name="rightTop"></param>
            <param name="leftBottom"></param>
            <param name="rightBottom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiSerpByte(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Linear Interpolates one selected bytes of the 4 ints
            </summary>
            <param name="lx"></param>
            <param name="ly"></param>
            <param name="byteIndex">0, 1, 2 or 3</param>
            <param name="leftTop"></param>
            <param name="rightTop"></param>
            <param name="leftBottom"></param>
            <param name="rightBottom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiLerpRgbaColor(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Linear Interpolates the bytes of the int individually (i.e. interpolates RGB values individually)
            </summary>
            <param name="lx"></param>
            <param name="ly"></param>
            <param name="leftTop"></param>
            <param name="rightTop"></param>
            <param name="leftBottom"></param>
            <param name="rightBottom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiLerpRgbColor(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Linear Interpolates the lower 3 bytes of the int individually (i.e. interpolates RGB values individually)
            </summary>
            <param name="lx"></param>
            <param name="ly"></param>
            <param name="leftTop"></param>
            <param name="rightTop"></param>
            <param name="leftBottom"></param>
            <param name="rightBottom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiSerpRgbColor(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Smoothstep Interpolates the lower 3 bytes of the int individually (i.e. interpolates RGB values individually)
            </summary>
            <param name="lx"></param>
            <param name="ly"></param>
            <param name="leftTop"></param>
            <param name="rightTop"></param>
            <param name="leftBottom"></param>
            <param name="rightBottom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.LerpRgbColor(System.Single,System.Int32,System.Int32)">
            <summary>
            Linear Interpolates the lower 3 bytes of the int individually (i.e. interpolates RGB values individually)
            </summary>
            <param name="lx"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.LerpRgbaColor(System.Single,System.Int32,System.Int32)">
            <summary>
            Linear Interpolates the 4 bytes of the int individually (i.e. interpolates RGB values individually)
            </summary>
            <param name="lx"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.LerpByte(System.Single,System.Byte,System.Byte)">
            <summary>
            Linear Interpolates a single byte
            </summary>
            <param name="lx"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiLerp(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Basic Bilinear Lerp
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiLerp(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Basic Bilinear Lerp
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Basic Lerp
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Serp(System.Single,System.Single,System.Single)">
            <summary>
            Smooth Interpolation using inlined Smoothstep
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.CPCatmullRomSplineLerp(System.Double,System.Double[],System.Double[])">
            <summary>
            Unlike the other implementation here, which uses the default "uniform"
            treatment of t, this computation is used to calculate the same values but
            introduces the ability to "parameterize" the t values used in the
            calculation. This is based on Figure 3 from
            http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
            </summary>
            <param name="t">the actual interpolation ratio from 0 to 1 representing the position between p1 and p2 to interpolate the value.</param>
            <param name="p">An array of double values of length 4, where interpolation occurs from p1 to p2.</param>
            <param name="time">An array of time measures of length 4, corresponding to each p value.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.SmoothStep(System.Single)">
            <summary>
            Better Lerp but more CPU intensive, see also https://en.wikipedia.org/wiki/Smoothstep
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Smootherstep(System.Single,System.Single,System.Single)">
            <summary>
            Better Lerp but more CPU intensive, see also https://en.wikipedia.org/wiki/Smoothstep
            </summary>
            <param name="edge0"></param>
            <param name="edge1"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.TriangleStep(System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns a value between 0..1. Returns 0 if val is smaller than left or greater than right. For val == (left+right)/2 the return value is 1. Every other value is a linear interpolation based on the distance to the middle value. Ascii art representation:
             
            1  |      /\
               |     /  \
            0.5|    /    \
               |   /      \
               |  /        \
            0  __/__________\______
              left          right
             </summary>
             <param name="val"></param>
             <param name="left"></param>
             <param name="right"></param>
             <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.TriangleStep(System.Single,System.Single,System.Single)">
             <summary>
             Returns a value between 0..1. Returns 0 if val is smaller than left or greater than right. For val == (left+right)/2 the return value is 1. Every other value is a linear interpolation based on the distance to the middle value. Ascii art representation:
             
            1  |      /\
               |     /  \
            0.5|    /    \
               |   /      \
               |  /        \
            0  __/__________\______
              left          right
             </summary>
             <param name="val"></param>
             <param name="left"></param>
             <param name="right"></param>
             <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.TriangleStepFast(System.Int32,System.Int32,System.Int32)">
            <summary>
            Same as TriangleStep but skipping the step to calc mid and range. 
            </summary>
            <param name="val"></param>
            <param name="mid"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.DotNetStringHash(System.String)">
            <summary>
            Pretty much taken directly from the string.GetHashCode() implementation, but these methods as the documentation says: "You should never persist or use a hash code outside the application domain in which it was created, [...]."
            Hence, this is one basic 32bit bit implementation that can be used in a platform independent way.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Md5Hash(System.String)">
            <summary>
            See also https://msdn.microsoft.com/en-us/library/system.security.cryptography.md5%28v=vs.110%29.aspx
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHash(System.Int32)">
            <summary>
            A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHashU(System.UInt32)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHash(Vintagestory.API.MathTools.Vec2i)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHash(System.Int32,System.Int32)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHash(Vintagestory.API.MathTools.Vec3i)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHash(System.Int32,System.Int32,System.Int32)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHashU(System.Int32,System.Int32,System.Int32)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHash(Vintagestory.API.MathTools.Vec4i)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.PrettyBadHash(System.Int32,System.Int32)">
            <summary>
            A really bad, but very fast hashing method.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.MurmurHash3Mod(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A not so fast, but higher quality than oaatHash(). See also https://en.wikipedia.org/wiki/MurmurHash. Includes a modulo operation.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.MurmurHash3(System.Int32,System.Int32,System.Int32)">
            <summary>
            A not so fast, but higher quality than oaatHash(). See also https://en.wikipedia.org/wiki/MurmurHash
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FlipVal(System.Int32@,System.Int32@)">
            <summary>
            Assigns the value of x1 to x2 and vice versa
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FlipVal(System.Double@,System.Double@)">
            <summary>
            Assigns the value of x1 to x2 and vice versa
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Shuffle``1(System.Random,``0[])">
            <summary>
            Performs a Fisher-Yates shuffle in linear time or O(n)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rand"></param>
            <param name="array"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Shuffle``1(System.Random,System.Collections.Generic.List{``0})">
            <summary>
            Performs a Fisher-Yates shuffle in linear time or O(n)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rand"></param>
            <param name="array"></param>
        </member>
        <member name="T:Vintagestory.API.MathTools.ClampedPerlinNoise">
            <summary>
            Perlin noise of supplied amplitude and frequency. The resulting value is clamped to 0...1
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.NormalizedPerlinNoise">
            <summary>
            It's generally pretty hard to get a neatly normalized perlin noise function due to the way perlin works (gauss curve) and how random numbers are generated. So instead of trying to find the perfect normalization factor and instead try to perform some approximate normalization this class allows a small overflow and brings it down very close to the [0, 1] range using tanh().
            
            Returns values in a range of [0..1]
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.NormalizedPerlinNoise.FromDefaultOctaves(System.Int32,System.Double,System.Double,System.Int64)">
            <summary>
            Generates the octaves and frequencies using following formulas 
            freq[i] = baseFrequency * 2^i
            amp[i] = persistence^i
            </summary>
            <param name="quantityOctaves"></param>
            <param name="baseFrequency"></param>
            <param name="persistence"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.NormalizedPerlinNoise.Noise(System.Double,System.Double)">
            <summary>
            2d noise
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.NormalizedPerlinNoise.Noise(System.Double,System.Double,System.Double)">
            <summary>
            3d noise
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.NormalizedPerlinNoise.Noise(System.Double,System.Double,System.Double,System.Double[])">
            <summary>
            3d Noise using custom amplitudes
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="amplitudes"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.EvolvingNatFloat">
            <summary>
            A number generator whose return value changes over time, parametrized by a transform function and some constants
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.EnumDistribution">
            <summary>
            The distribution of the random numbers 
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.UNIFORM">
            <summary>
            Select completely random numbers within avg-var until avg+var
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.TRIANGLE">
            <summary>
            Select random numbers with numbers near avg being the most commonly selected ones, following a triangle curve
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.GAUSSIAN">
            <summary>
            Select random numbers with numbers near avg being the most commonly selected ones, following a gaussian curve
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.NARROWGAUSSIAN">
            <summary>
            Select random numbers with numbers near avg being the most commonly selected ones, following a narrow gaussian curve
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.VERYNARROWGAUSSIAN">
            <summary>
            Select random numbers with numbers near avg being the least commonly selected ones, following an even narrower gaussian curve
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.INVERSEGAUSSIAN">
            <summary>
            Select random numbers with numbers near avg being the least commonly selected ones, following an upside down gaussian curve
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.NARROWINVERSEGAUSSIAN">
            <summary>
            Select random numbers with numbers near avg being the least commonly selected ones, following an upside down gaussian curve
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.INVEXP">
            <summary>
            Select numbers in the form of avg + var, wheras low value of var are preferred
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.STRONGINVEXP">
            <summary>
            Select numbers in the form of avg + var, wheras low value of var are strongly preferred
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.STRONGERINVEXP">
            <summary>
            Select numbers in the form of avg + var, wheras low value of var are very strongly preferred
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.DIRAC">
            <summary>
            Select completely random numbers within avg-var until avg+var only ONCE and then always 0
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.NatFloat">
            <summary>
            A more natural random number generator (nature usually doesn't grow by the exact same numbers nor does it completely randomly)
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.NatFloat.Zero">
            <summary>
            Always 0
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.NatFloat.One">
            <summary>
            Always 1
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Ascii85">
            <summary>
            Converts between binary data and an Ascii85-encoded string.
            </summary>
            <remarks>See <a href="http://en.wikipedia.org/wiki/Ascii85">Ascii85 at Wikipedia</a>.</remarks>
        </member>
        <member name="M:Vintagestory.API.MathTools.Ascii85.Encode(System.Byte[])">
            <summary>
            Encodes the specified byte array in Ascii85.
            </summary>
            <param name="bytes">The bytes to encode.</param>
            <returns>An Ascii85-encoded string representing the input byte array.</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Ascii85.Decode(System.String)">
            <summary>
            Decodes the specified Ascii85 string into the corresponding byte array.
            </summary>
            <param name="encoded">The Ascii85 string.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="T:Vintagestory.API.Config.Lang">
            <summary>
            Utility class for enabling i18n. Loads language entries from assets/[currentlanguage].json
            </summary>
        </member>
        <member name="M:Vintagestory.API.Config.Lang.Load(Vintagestory.API.Common.ILogger,Vintagestory.API.Common.IAssetManager,System.String)">
            <summary>
            Loads all lang entries including this from mods
            </summary>
            <param name="logger"></param>
            <param name="manager"></param>
            <param name="language"></param>
        </member>
        <member name="F:Vintagestory.API.Config.Lang.Inst">
            <summary>
            Yes this means in a singleplayer situdation server and client share the same lang inst, but thats okay, since they use the same file anyway?
            </summary>
        </member>
        <member name="M:Vintagestory.API.Config.Lang.PreLoad(Vintagestory.API.Common.ILogger,System.String,System.String)">
            <summary>
            This will load the vanilla json file, without taking care of mods or resourcepacks.
            </summary>
            <param name="logger"></param>
            <param name="basePath"></param>
            <param name="language"></param>
        </member>
        <member name="T:Vintagestory.API.Config.GlobalConstants">
            <summary>
            Contains some global constants and static values
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.DefaultDomain">
            <summary>
            Prefix for all default asset locations
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.MaxAnimatedElements">
            <summary>
            Max. amount of "bones" for animated model. Limited by max amount of shader uniforms of around 60, but depends on the gfx card
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.PhysicsFrameTime">
            <summary>
            Frame time for physics simulation
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.GravityStrengthParticle">
            <summary>
            A multiplier applied to the y motion of all particles affected by gravity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.DefaultAttackRange">
            <summary>
            Attack range when using hands
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.BaseMoveSpeed">
            <summary>
            Multiplier applied to the players movement motion
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.BaseJumpForce">
            <summary>
            Multiplier applied to the players jump motion
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.SneakSpeedMultiplier">
            <summary>
            Multiplier applied to the players sneaking motion
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.SprintSpeedMultiplier">
            <summary>
            Multiplier applied to the players sprinting motion
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.AirDragAlways">
            <summary>
            Multiplier applied to the players motion while on the ground or in air
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.AirDragFlying">
            <summary>
            Multiplier applied to the players motion while flying (creative mode)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.WaterDrag">
            <summary>
            Multiplier applied to the players motion while walking in water
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.GravityPerSecond">
            <summary>
            Amount of gravity per tick applied to all entities affected by gravity
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.DefaultTrackingRange">
            <summary>
            Range in blocks at which clients receive regular updates of this entity
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.DefaultPickingRange">
            <summary>
            Range in blocks a player can interact with blocks (break, use, place)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Config.GlobalConstants.OutsideWorld(System.Int32,System.Int32,System.Int32,Vintagestory.API.Common.IBlockAccessor)">
            <summary>
            Returns true if the player fell out of the world (which is map boundaries + 30 blocks in every direction)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="blockAccessor"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.GlobalConstants.OutsideWorld(System.Double,System.Double,System.Double,Vintagestory.API.Common.IBlockAccessor)">
            <summary>
            Returns true if the player fell out of the world (which is map boundaries + 30 blocks in every direction)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="blockAccessor"></param>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.GeneralChatGroup">
            <summary>
            Channel name for the general chat
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.ServerInfoChatGroup">
            <summary>
            Channel name for the general chat
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.DamageLogChatGroup">
            <summary>
            Channel name for the damage chat log
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.CurrentChatGroup">
            <summary>
            Special channel key typically to reply a Command inside the same the channel the player sent it
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.AllChatGroups">
            <summary>
            Special channel key typically to reply a Command inside the same the channel the player sent it
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.ConsoleGroup">
            <summary>
            Special channel key for message sent via server console
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.AllowedChatGroupChars">
            <summary>
            Allowed characters for a player group name
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.MaxItemTypes">
            <summary>
            Total amount of possible itemids
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.EntityItemTypeCode">
            <summary>
            The entity class used when spawning items in the world
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.EntityPlayerTypeCode">
            <summary>
            The entity class used when spawning players
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.EntityBlockFallingTypeCode">
            <summary>
            The entity class used when spawning falling blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.IgnoredStackAttributes">
            <summary>
            Itemstack attributes that should be ignored during a stack.Collectible.Equals() comparison
            </summary>
        </member>
        <member name="T:Vintagestory.API.Config.OS">
            <summary>
            Operating System Enum
            </summary>
        </member>
        <member name="T:Vintagestory.API.Config.RuntimeEnv">
            <summary>
            Information about the runningtime environment
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.OS">
            <summary>
            The current operating system
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.EnvSearchPathName">
            <summary>
            The Env variable which contains the OS specific search paths for libarires
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.LibExtension">
            <summary>
            .dll for windows, .so for linux, .dylib for mac
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.IsMono">
            <summary>
            Whether the game is run using the Mono framework
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.IsDevEnvironment">
            <summary>
            Whether we are in a dev environment or not
            </summary>
        </member>
        <member name="T:Vintagestory.API.Config.EnumGameBranch">
            <summary>
            Current branch of the game
            </summary>
        </member>
        <member name="T:Vintagestory.API.Config.GameVersion">
            <summary>
            The games current version
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.OverallVersion">
            <summary>
            Assembly Info Version number in the format: major.minor.revision
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.Branch">
            <summary>
            Whether this is a stable or unstable version
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.ShortGameVersion">
            <summary>
            Version number in the format: major.minor.revision[appendix]
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.LongGameVersion">
            <summary>
            Version number in the format: major.minor.revision [release title]
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.AssemblyVersion">
            <summary>
            Assembly Info Version number in the format: major.minor.revision
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.APIVersion">
            <summary>
            Version of the Mod API
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.NetworkVersion">
            <summary>
            Version of the Network Protocol
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.DatabaseVersion">
            <summary>
            Version of the savegame database
            </summary>
        </member>
        <member name="M:Vintagestory.API.Config.GameVersion.IsCompatibleApiVersion(System.String)">
            <summary>
            Returns true if given version has the same major and minor version. Ignores revision.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.GameVersion.IsCompatibleNetworkVersion(System.String)">
            <summary>
            Returns true if given version has the same major and minor version. Ignores revision.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.GameVersion.IsAtLeastVersion(System.String)">
            <summary>
            Returns true if supplied version is the same or higher as the current version
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.GameVersion.IsAtLeastVersion(System.String,System.String)">
            <summary>
            Returns true if supplied version is the same or higher as the reference version
            </summary>
            <param name="version"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.GameVersion.IsNewerVersionThan(System.String,System.String)">
            <summary>
            Returns true if supplied version is the higher as the reference version
            </summary>
            <param name="version"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.IntMap">
            <summary>
            A datastructure to hold 2 dimensional data in the form of ints. 
            Can be used to perfrom bilinear interpolation between individual values
            </summary>
        </member>
        <member name="F:Vintagestory.API.IntMap.Size">
            <summary>
            Width and Length of the map (square)
            </summary>
        </member>
        <member name="F:Vintagestory.API.IntMap.TopLeftPadding">
            <summary>
            Top and Left padding
            </summary>
        </member>
        <member name="F:Vintagestory.API.IntMap.BottomRightPadding">
            <summary>
            Bottom and Right padding
            </summary>
        </member>
        <member name="P:Vintagestory.API.IntMap.InnerSize">
            <summary>
            Width and Length of the map excluding any padding
            </summary>
        </member>
        <member name="T:Vintagestory.API.JsonObject">
            <summary>
            Elegant, yet somewhat inefficently designed (because wasteful with heap objects) wrapper class to abstract away the type-casting nightmare of JToken O.O
            </summary>
        </member>
        <member name="M:Vintagestory.API.JsonObject.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Create a new instance of a JsonObject
            </summary>
            <param name="token"></param>
        </member>
        <member name="P:Vintagestory.API.JsonObject.Item(System.String)">
            <summary>
            Access a tokens element with given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.JsonObject.Exists">
            <summary>
            True if the token is not null
            </summary>
        </member>
        <member name="M:Vintagestory.API.JsonObject.KeyExists(System.String)">
            <summary>
            True if the token has an element with given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsObject``1">
            <summary>
            Deserialize the token to an object
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsArray">
            <summary>
            Turn the token into an array of JsonObjects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsString(System.String)">
            <summary>
            Turn the token into a string
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsStringArray(System.String[])">
            <summary>
            Turn the token into a string array
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsFloatArray(System.Single[])">
            <summary>
            Turn the token into a float array
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsBool(System.Boolean)">
            <summary>
            Turn the token into a boolean
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsInt(System.Int32)">
            <summary>
            Turn the token into an integer
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsFloat(System.Single)">
            <summary>
            Turn the token into a float
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsDouble(System.Double)">
            <summary>
            Turn the token into a double
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.ToString">
            <summary>
            Calls token.ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.IsArray">
            <summary>
            True if the token is a JArray
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.ToAttribute">
            <summary>
            Turns the token into an IAttribute with all its child elements, if it has any
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.ToPrimitiveArray``1(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Turn a JArray into a primitive array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.Clone">
            <summary>
            Returns a deep clone
            </summary>
            <returns></returns>
        </member>
        <member name="T:ProperVersion.SemVer">
            <summary>
              Implementation of Semantic Verisoning standard, version 2.0.0.
              See https://semver.org/ for specifications.
            </summary>
        </member>
        <member name="M:ProperVersion.SemVer.Parse(System.String)">
            <summary>
              Converts the specified string representation of a
              semantic version to its <see cref="T:ProperVersion.SemVer"/> equivalent.
            </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the specified string is null. </exception>
            <exception cref="T:System.FormatException"> Thrown if the specified string doesn't contain a proper properly formatted semantic version. </exception>
        </member>
        <member name="M:ProperVersion.SemVer.TryParse(System.String,ProperVersion.SemVer@)">
            <summary>
              Tries to convert the specified string representation of a
              semantic version to its <see cref="T:ProperVersion.SemVer"/> equivalent,
              returning true if successful.
            </summary>
            <param name="result">
              When this method returns, contains a valid, non-null SemVer,
              If the conversion failed, this is set to the parser's best guess.
            </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if the specified string is null. </exception>
        </member>
        <member name="M:ProperVersion.SemVer.TryParse(System.String,ProperVersion.SemVer@,System.String@)">
            <summary>
              Tries to convert the specified string representation of a
              semantic version to its <see cref="T:ProperVersion.SemVer"/> equivalent,
              returning true if successful.
            </summary>
            <param name="result">
              When this method returns, contains a valid, non-null SemVer,
              If the conversion failed, this is set to the method's best guess.
            </param>
            <param name="error">
              When this method returns, contains the first error describing
              why the conversion failed, or null if it succeeded.
            </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if the specified string is null. </exception>
        </member>
        <member name="M:ProperVersion.SemVer.IsValidIdentifier(System.String)">
            <summary>
              Returns whether the specified string contains only valid
              identifier characters. That is, only alphanumeric characters
              and hyphens, [0-9A-Za-z-]. Does not check for empty identifiers.
            </summary>
        </member>
        <member name="M:ProperVersion.SemVer.IsNumericIdent(System.String)">
            <summary>
              Returns whether the specified string is a
              numeric identifier (only contains digits).
            </summary>
        </member>
        <member name="M:ProperVersion.SemVer.SplitIdentifiers(System.String)">
            <summary>
              Splits a string into dot-separated identifiers.
              Both null and empty strings return an empty array.
            </summary>
        </member>
    </members>
</doc>
